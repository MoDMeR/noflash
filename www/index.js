(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';
function find(array, predicate, context) {
    if (typeof Array.prototype.find === 'function') {
        return array.find(predicate, context);
    }
    context = context || this;
    var length = array.length;
    var i;
    if (typeof predicate !== 'function') {
        throw new TypeError(predicate + ' is not a function');
    }
    for (i = 0; i < length; i++) {
        if (predicate.call(context, array[i], i, array)) {
            return array[i];
        }
    }
}
module.exports = find;


},{}],2:[function(require,module,exports){
module.exports = applyHook;
function applyHook(arr, arg1, arg2, arg3, arg4, arg5) {
    arr.forEach(function (fn) {
        fn(arg1, arg2, arg3, arg4, arg5);
    });
}


},{}],3:[function(require,module,exports){
const mutate = require(45);
const xtend = require(44);
const applyHook = require(2);
module.exports = dispatcher;
function dispatcher(hooks) {
    hooks = hooks || {};
    const onStateChangeHooks = [];
    const onActionHooks = [];
    const onErrorHooks = [];
    const subscriptionWraps = [];
    const initialStateWraps = [];
    const reducerWraps = [];
    const effectWraps = [];
    use(hooks);
    var reducersCalled = false;
    var effectsCalled = false;
    var stateCalled = false;
    var subsCalled = false;
    const subscriptions = start._subscriptions = {};
    const reducers = start._reducers = {};
    const effects = start._effects = {};
    const models = start._models = [];
    var _state = {};
    start.model = setModel;
    start.state = getState;
    start.start = start;
    start.use = use;
    return start;
    function use(hooks) {
        if (hooks.onStateChange)
            onStateChangeHooks.push(hooks.onStateChange);
        if (hooks.onError)
            onErrorHooks.push(wrapOnError(hooks.onError));
        if (hooks.onAction)
            onActionHooks.push(hooks.onAction);
        if (hooks.wrapSubscriptions)
            subscriptionWraps.push(hooks.wrapSubscriptions);
        if (hooks.wrapInitialState)
            initialStateWraps.push(hooks.wrapInitialState);
        if (hooks.wrapReducers)
            reducerWraps.push(hooks.wrapReducers);
        if (hooks.wrapEffects)
            effectWraps.push(hooks.wrapEffects);
    }
    function setModel(model) {
        models.push(model);
    }
    function getState(opts) {
        opts = opts || {};
        const state = opts.state;
        if (!opts.state && opts.freeze === false)
            return xtend(_state);
        else if (!opts.state)
            return Object.freeze(xtend(_state));
        const namespaces = [];
        const newState = {};
        models.forEach(function (model) {
            const ns = model.namespace;
            namespaces.push(ns);
            const modelState = model.state || {};
            if (ns) {
                newState[ns] = newState[ns] || {};
                apply(ns, modelState, newState);
                newState[ns] = xtend(newState[ns], state[ns]);
            } else {
                mutate(newState, modelState);
            }
        });
        Object.keys(state).forEach(function (key) {
            if (namespaces.indexOf(key) !== -1)
                return;
            newState[key] = state[key];
        });
        const tmpState = xtend(_state, xtend(state, newState));
        const wrappedState = wrapHook(tmpState, initialStateWraps);
        return opts.freeze === false ? wrappedState : Object.freeze(wrappedState);
    }
    function start(opts) {
        opts = opts || {};
        models.forEach(function (model) {
            const ns = model.namespace;
            if (!stateCalled && model.state && opts.state !== false) {
                const modelState = model.state || {};
                if (ns) {
                    _state[ns] = _state[ns] || {};
                    apply(ns, modelState, _state);
                } else {
                    mutate(_state, modelState);
                }
            }
            if (!reducersCalled && model.reducers && opts.reducers !== false) {
                apply(ns, model.reducers, reducers, function (cb) {
                    return wrapHook(cb, reducerWraps);
                });
            }
            if (!effectsCalled && model.effects && opts.effects !== false) {
                apply(ns, model.effects, effects, function (cb) {
                    return wrapHook(cb, effectWraps);
                });
            }
            if (!subsCalled && model.subscriptions && opts.subscriptions !== false) {
                apply(ns, model.subscriptions, subscriptions, function (cb, key) {
                    const send = createSend('subscription: ' + (ns ? ns + ':' + key : key));
                    cb = wrapHook(cb, subscriptionWraps);
                    cb(send, function (err) {
                        applyHook(onErrorHooks, err, _state, createSend);
                    });
                    return cb;
                });
            }
        });
        if (!stateCalled && opts.state !== false) {
            _state = wrapHook(_state, initialStateWraps);
        }
        if (!opts.noSubscriptions)
            subsCalled = true;
        if (!opts.noReducers)
            reducersCalled = true;
        if (!opts.noEffects)
            effectsCalled = true;
        if (!opts.noState)
            stateCalled = true;
        if (!onErrorHooks.length)
            onErrorHooks.push(wrapOnError(defaultOnError));
        return createSend;
        function createSend(selfName, callOnError) {
            return function send(name, data, cb) {
                if (!cb && !callOnError) {
                    cb = data;
                    data = null;
                }
                data = typeof data === 'undefined' ? null : data;
                const done = callOnError ? onErrorCallback : cb;
                _send(name, data, selfName, done);
                function onErrorCallback(err) {
                    err = err || null;
                    if (err) {
                        applyHook(onErrorHooks, err, _state, function createSend(selfName) {
                            return function send(name, data) {
                                data = typeof data === 'undefined' ? null : data;
                                _send(name, data, selfName, done);
                            };
                        });
                    }
                }
            };
        }
        function _send(name, data, caller, cb) {
            setTimeout(function () {
                var reducersCalled = false;
                var effectsCalled = false;
                const newState = xtend(_state);
                if (onActionHooks.length) {
                    applyHook(onActionHooks, data, _state, name, caller, createSend);
                }
                var actionName = name;
                if (/:/.test(name)) {
                    const arr = name.split(':');
                    var ns = arr.shift();
                    actionName = arr.join(':');
                }
                const _reducers = ns ? reducers[ns] : reducers;
                if (_reducers && _reducers[actionName]) {
                    if (ns) {
                        const reducedState = _reducers[actionName](data, _state[ns]);
                        newState[ns] = xtend(_state[ns], reducedState);
                    } else {
                        mutate(newState, reducers[actionName](data, _state));
                    }
                    reducersCalled = true;
                    if (onStateChangeHooks.length) {
                        applyHook(onStateChangeHooks, data, newState, _state, actionName, createSend);
                    }
                    _state = newState;
                    cb(null, newState);
                }
                const _effects = ns ? effects[ns] : effects;
                if (!reducersCalled && _effects && _effects[actionName]) {
                    const send = createSend('effect: ' + name);
                    if (ns)
                        _effects[actionName](data, _state[ns], send, cb);
                    else
                        _effects[actionName](data, _state, send, cb);
                    effectsCalled = true;
                }
                if (!reducersCalled && !effectsCalled) {
                    throw new Error('Could not find action ' + actionName);
                }
            }, 0);
        }
    }
}
function apply(ns, source, target, wrap) {
    if (ns && !target[ns])
        target[ns] = {};
    Object.keys(source).forEach(function (key) {
        const cb = wrap ? wrap(source[key], key) : source[key];
        if (ns)
            target[ns][key] = cb;
        else
            target[key] = cb;
    });
}
function defaultOnError(err) {
    throw err;
}
function wrapOnError(onError) {
    return function onErrorWrap(err, state, createSend) {
        if (err)
            onError(err, state, createSend);
    };
}
function wrapHook(value, transforms) {
    transforms.forEach(function (transform) {
        value = transform(value);
    });
    return value;
}


},{"2":2,"44":44,"45":45}],4:[function(require,module,exports){
var document = require(17);
var hyperx = require(21);
var onload = require(28);
var SVGNS = 'http://www.w3.org/2000/svg';
var XLINKNS = 'http://www.w3.org/1999/xlink';
var BOOL_PROPS = {
    autofocus: 1,
    checked: 1,
    defaultchecked: 1,
    disabled: 1,
    formnovalidate: 1,
    indeterminate: 1,
    readonly: 1,
    required: 1,
    selected: 1,
    willvalidate: 1
};
var SVG_TAGS = [
    'svg',
    'altGlyph',
    'altGlyphDef',
    'altGlyphItem',
    'animate',
    'animateColor',
    'animateMotion',
    'animateTransform',
    'circle',
    'clipPath',
    'color-profile',
    'cursor',
    'defs',
    'desc',
    'ellipse',
    'feBlend',
    'feColorMatrix',
    'feComponentTransfer',
    'feComposite',
    'feConvolveMatrix',
    'feDiffuseLighting',
    'feDisplacementMap',
    'feDistantLight',
    'feFlood',
    'feFuncA',
    'feFuncB',
    'feFuncG',
    'feFuncR',
    'feGaussianBlur',
    'feImage',
    'feMerge',
    'feMergeNode',
    'feMorphology',
    'feOffset',
    'fePointLight',
    'feSpecularLighting',
    'feSpotLight',
    'feTile',
    'feTurbulence',
    'filter',
    'font',
    'font-face',
    'font-face-format',
    'font-face-name',
    'font-face-src',
    'font-face-uri',
    'foreignObject',
    'g',
    'glyph',
    'glyphRef',
    'hkern',
    'image',
    'line',
    'linearGradient',
    'marker',
    'mask',
    'metadata',
    'missing-glyph',
    'mpath',
    'path',
    'pattern',
    'polygon',
    'polyline',
    'radialGradient',
    'rect',
    'set',
    'stop',
    'switch',
    'symbol',
    'text',
    'textPath',
    'title',
    'tref',
    'tspan',
    'use',
    'view',
    'vkern'
];
function belCreateElement(tag, props, children) {
    var el;
    if (SVG_TAGS.indexOf(tag) !== -1) {
        props.namespace = SVGNS;
    }
    var ns = false;
    if (props.namespace) {
        ns = props.namespace;
        delete props.namespace;
    }
    if (ns) {
        el = document.createElementNS(ns, tag);
    } else {
        el = document.createElement(tag);
    }
    if (props.onload || props.onunload) {
        var load = props.onload || function () {
        };
        var unload = props.onunload || function () {
        };
        onload(el, function belOnload() {
            load(el);
        }, function belOnunload() {
            unload(el);
        }, belCreateElement.caller.caller.caller);
        delete props.onload;
        delete props.onunload;
    }
    for (var p in props) {
        if (props.hasOwnProperty(p)) {
            var key = p.toLowerCase();
            var val = props[p];
            if (key === 'classname') {
                key = 'class';
                p = 'class';
            }
            if (p === 'htmlFor') {
                p = 'for';
            }
            if (BOOL_PROPS[key]) {
                if (val === 'true')
                    val = key;
                else if (val === 'false')
                    continue;
            }
            if (key.slice(0, 2) === 'on') {
                el[p] = val;
            } else {
                if (ns) {
                    if (p === 'xlink:href') {
                        el.setAttributeNS(XLINKNS, p, val);
                    } else {
                        el.setAttributeNS(null, p, val);
                    }
                } else {
                    el.setAttribute(p, val);
                }
            }
        }
    }
    function appendChild(childs) {
        if (!Array.isArray(childs))
            return;
        for (var i = 0; i < childs.length; i++) {
            var node = childs[i];
            if (Array.isArray(node)) {
                appendChild(node);
                continue;
            }
            if (typeof node === 'number' || typeof node === 'boolean' || node instanceof Date || node instanceof RegExp) {
                node = node.toString();
            }
            if (typeof node === 'string') {
                if (el.lastChild && el.lastChild.nodeName === '#text') {
                    el.lastChild.nodeValue += node;
                    continue;
                }
                node = document.createTextNode(node);
            }
            if (node && node.nodeType) {
                el.appendChild(node);
            }
        }
    }
    appendChild(children);
    return el;
}
module.exports = hyperx(belCreateElement);
module.exports.createElement = belCreateElement;


},{"17":17,"21":21,"28":28}],5:[function(require,module,exports){


},{}],6:[function(require,module,exports){
const deepDiff = require(11);
const padRight = require(30);
const padLeft = require(29);
const browser = require(12);
module.exports = chooLog;
const colors = {
    green: '#2ECC40',
    red: '#FF4136',
    blue: '#7FDBFF',
    lightGray: '#DDDDDD',
    gray: '#AAAAAA',
    yellow: '#FFDC00',
    default: '#293037'
};
const paddings = {
    type: 7,
    actionType: 7
};
function chooLog() {
    const startTime = Date.now();
    return {
        onAction: onAction,
        onError: onError,
        onStateChange: onStateChange
    };
    function onAction(data, state, name, trace, createSend) {
        const split = trace.split(':');
        const actionType = split[0].trim();
        const caller = split[1].trim();
        const line = [];
        colorify('lightGray', renderTime(startTime) + ' ', line);
        colorify('gray', renderType('action') + ' ', line);
        colorify('gray', renderActionType(actionType) + ' ', line);
        colorify('default', '\'' + caller + '\'', line);
        colorify('default', '->', line);
        colorify('default', '\'' + name + '\'', line);
        if (groupCollapseSupported()) {
            logGroup(line);
            logInner(name, data);
            console.groupEnd();
        } else {
            log(line);
            logInner(name, data);
        }
        function logInner(name, action) {
            console.log('action name:', name);
            console.log('data:', data);
        }
    }
    function onError(err, state, createSend) {
        const line = [];
        colorify('lightGray', renderTime(startTime) + ' ', line);
        colorify('red', renderType('error') + ' ', line);
        colorify('default', err.message + ' ', line);
        if (groupCollapseSupported()) {
            logGroup(line);
            logInner(err);
            console.groupEnd();
        } else {
            log(line);
            logInner(err);
        }
        function logInner(err) {
            console.error(err);
        }
    }
    function onStateChange(data, state, prev, createSend) {
        const diff = deepDiff(prev, state) || [];
        const hasWarn = diff.length === 0;
        const inlineText = function (diff) {
            if (hasWarn) {
                return 'no diff';
            } else if (diff.length === 1) {
                return 'diff';
            } else {
                return 'diffs';
            }
        }(diff);
        const line = [];
        colorify('lightGray', renderTime(startTime) + ' ', line);
        colorify(hasWarn ? 'yellow' : 'gray', renderType('state') + ' ', line);
        colorify('default', (hasWarn ? '' : diff.length + ' ') + inlineText, line);
        if (groupCollapseSupported()) {
            logGroup(line);
            logInner(prev, state);
            console.groupEnd();
        } else {
            log(line);
            logInner(prev, state);
        }
        function logInner(prev, state) {
            console.log('prev ', prev);
            console.log('state', state);
            if (hasWarn) {
                console.warn('diff ', 'There is no difference between states');
            } else {
                console.log('diff ', diff);
            }
        }
    }
}
function logGroup(line) {
    console.groupCollapsed.apply(console, line);
}
function log(line) {
    console.log.apply(console, line);
}
function renderType(msg) {
    const leftPad = paddings.type;
    const rightPad = paddings.actionType + leftPad + 2;
    return msg === 'state' || msg === 'error' ? padRight(padLeft(msg, leftPad, ' '), rightPad, ' ') : padLeft(msg, leftPad, ' ');
}
function renderActionType(msg) {
    const padding = paddings.actionType;
    if (msg === 'subscription')
        msg = 'subs';
    return padRight(msg, padding, ' ');
}
function colorify(color, line, prev) {
    var newLine = '%c' + line;
    var newStyle = 'color: ' + colors[color] + ';';
    if (!prev) {
        prev = [
            newLine,
            newStyle
        ];
        return prev;
    }
    if (!prev[0])
        prev[0] = '';
    prev[0] += ' ' + newLine;
    if (!prev[1])
        prev[1] = '';
    if (browser.name === 'firefox') {
        prev[1] += ' ' + newStyle;
    } else {
        prev.push(newStyle);
    }
    return prev;
}
function renderTime(startTime) {
    var offset = String(Math.round((Date.now() - startTime) / 1000) % 10000);
    var msg = '[' + padLeft(offset, 4, '0') + ']';
    return msg;
}
function groupCollapseSupported() {
    return console.groupCollapsed && browser.name !== 'firefox';
}


},{"11":11,"12":12,"29":29,"30":30}],7:[function(require,module,exports){
module.exports = require(46);


},{"46":46}],8:[function(require,module,exports){
const history = require(35);
const sheetRouter = require(37);
const document = require(17);
const onReady = require(14);
const href = require(36);
const hash = require(34);
const hashMatch = require(19);
const barracks = require(3);
const nanoraf = require(27);
const xtend = require(44);
const yo = require(46);
module.exports = choo;
function choo(opts) {
    opts = opts || {};
    const _store = start._store = barracks();
    var _router = start._router = null;
    var _defaultRoute = null;
    var _rootNode = null;
    var _routes = null;
    var _frame = null;
    _store.use({ onStateChange: render });
    _store.use(opts);
    start.toString = toString;
    start.router = router;
    start.model = model;
    start.start = start;
    start.use = use;
    return start;
    function toString(route, serverState) {
        serverState = serverState || {};
        _store.start({
            subscriptions: false,
            reducers: false,
            effects: false
        });
        const state = _store.state({ state: serverState });
        const router = createRouter(_defaultRoute, _routes, createSend);
        const tree = router(route, state);
        return tree.outerHTML || tree.toString();
        function createSend() {
            return function send() {
            };
        }
    }
    function start(selector, startOpts) {
        if (!startOpts && typeof selector !== 'string') {
            startOpts = selector;
            selector = null;
        }
        startOpts = startOpts || {};
        _store.model(appInit(startOpts));
        const createSend = _store.start(startOpts);
        _router = start._router = createRouter(_defaultRoute, _routes, createSend);
        const state = _store.state({ state: {} });
        if (!selector) {
            const tree = _router(state.location.pathname, state);
            _rootNode = tree;
            return tree;
        } else {
            onReady(function onReady() {
                const oldTree = document.querySelector(selector);
                const newTree = _router(state.location.pathname, state);
                _rootNode = yo.update(oldTree, newTree);
            });
        }
    }
    function render(data, state, prev, name, createSend) {
        if (!_frame) {
            _frame = nanoraf(function (state, prev) {
                const newTree = _router(state.location.pathname, state, prev);
                _rootNode = yo.update(_rootNode, newTree);
            });
        }
        _frame(state, prev);
    }
    function router(defaultRoute, routes) {
        _defaultRoute = defaultRoute;
        _routes = routes;
    }
    function model(model) {
        _store.model(model);
    }
    function use(hooks) {
        _store.use(hooks);
    }
    function createRouter(defaultRoute, routes, createSend) {
        var prev = { params: {} };
        return sheetRouter(defaultRoute, routes, createRoute);
        function createRoute(routeFn) {
            return function (route, inline, child) {
                if (typeof inline === 'function') {
                    inline = wrap(inline, route);
                }
                return routeFn(route, inline, child);
            };
            function wrap(child, route) {
                const send = createSend('view: ' + route, true);
                return function chooWrap(params, state) {
                    const nwPrev = prev;
                    const nwState = prev = xtend(state, { params: params });
                    if (opts.freeze !== false)
                        Object.freeze(nwState);
                    return child(nwState, nwPrev, send);
                };
            }
        }
    }
}
function appInit(opts) {
    const loc = document.location;
    const state = { pathname: opts.hash ? hashMatch(loc.hash) : loc.href };
    const reducers = {
        setLocation: function setLocation(data, state) {
            return { pathname: data.location.replace(/#.*/, '') };
        }
    };
    const subs = {};
    if (opts.hash === true) {
        pushLocationSub(function (navigate) {
            hash(function (fragment) {
                navigate(hashMatch(fragment));
            });
        }, 'handleHash', subs);
    } else {
        if (opts.history !== false)
            pushLocationSub(history, 'handleHistory', subs);
        if (opts.href !== false)
            pushLocationSub(href, 'handleHref', subs);
    }
    return {
        namespace: 'location',
        subscriptions: subs,
        reducers: reducers,
        state: state
    };
    function pushLocationSub(cb, key, model) {
        model[key] = function (send, done) {
            cb(function navigate(pathname) {
                send('location:setLocation', { location: pathname }, done);
            });
        };
    }
}


},{"14":14,"17":17,"19":19,"27":27,"3":3,"34":34,"35":35,"36":36,"37":37,"44":44,"46":46}],9:[function(require,module,exports){
(function () {
    'use strict';
    var hasOwn = {}.hasOwnProperty;
    function classNames() {
        var classes = [];
        for (var i = 0; i < arguments.length; i++) {
            var arg = arguments[i];
            if (!arg)
                continue;
            var argType = typeof arg;
            if (argType === 'string' || argType === 'number') {
                classes.push(arg);
            } else if (Array.isArray(arg)) {
                classes.push(classNames.apply(null, arg));
            } else if (argType === 'object') {
                for (var key in arg) {
                    if (hasOwn.call(arg, key) && arg[key]) {
                        classes.push(key);
                    }
                }
            }
        }
        return classes.join(' ');
    }
    if (typeof module !== 'undefined' && module.exports) {
        module.exports = classNames;
    } else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {
        define('classnames', [], function () {
            return classNames;
        });
    } else {
        window.classNames = classNames;
    }
}());


},{}],10:[function(require,module,exports){
var matches = require(25);
module.exports = function (element, selector, checkYoSelf) {
    var parent = checkYoSelf ? element : element.parentNode;
    while (parent && parent !== document) {
        if (matches(parent, selector))
            return parent;
        parent = parent.parentNode;
    }
};


},{"25":25}],11:[function(require,module,exports){
(function (global){
;
(function (root, factory) {
    'use strict';
    if (typeof define === 'function' && define.amd) {
        define([], function () {
            return factory();
        });
    } else if (typeof exports === 'object') {
        module.exports = factory();
    } else {
        root.DeepDiff = factory();
    }
}(this, function (undefined) {
    'use strict';
    var $scope, conflict, conflictResolution = [];
    if (typeof global === 'object' && global) {
        $scope = global;
    } else if (typeof window !== 'undefined') {
        $scope = window;
    } else {
        $scope = {};
    }
    conflict = $scope.DeepDiff;
    if (conflict) {
        conflictResolution.push(function () {
            if ('undefined' !== typeof conflict && $scope.DeepDiff === accumulateDiff) {
                $scope.DeepDiff = conflict;
                conflict = undefined;
            }
        });
    }
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
    }
    function Diff(kind, path) {
        Object.defineProperty(this, 'kind', {
            value: kind,
            enumerable: true
        });
        if (path && path.length) {
            Object.defineProperty(this, 'path', {
                value: path,
                enumerable: true
            });
        }
    }
    function DiffEdit(path, origin, value) {
        DiffEdit.super_.call(this, 'E', path);
        Object.defineProperty(this, 'lhs', {
            value: origin,
            enumerable: true
        });
        Object.defineProperty(this, 'rhs', {
            value: value,
            enumerable: true
        });
    }
    inherits(DiffEdit, Diff);
    function DiffNew(path, value) {
        DiffNew.super_.call(this, 'N', path);
        Object.defineProperty(this, 'rhs', {
            value: value,
            enumerable: true
        });
    }
    inherits(DiffNew, Diff);
    function DiffDeleted(path, value) {
        DiffDeleted.super_.call(this, 'D', path);
        Object.defineProperty(this, 'lhs', {
            value: value,
            enumerable: true
        });
    }
    inherits(DiffDeleted, Diff);
    function DiffArray(path, index, item) {
        DiffArray.super_.call(this, 'A', path);
        Object.defineProperty(this, 'index', {
            value: index,
            enumerable: true
        });
        Object.defineProperty(this, 'item', {
            value: item,
            enumerable: true
        });
    }
    inherits(DiffArray, Diff);
    function arrayRemove(arr, from, to) {
        var rest = arr.slice((to || from) + 1 || arr.length);
        arr.length = from < 0 ? arr.length + from : from;
        arr.push.apply(arr, rest);
        return arr;
    }
    function realTypeOf(subject) {
        var type = typeof subject;
        if (type !== 'object') {
            return type;
        }
        if (subject === Math) {
            return 'math';
        } else if (subject === null) {
            return 'null';
        } else if (Array.isArray(subject)) {
            return 'array';
        } else if (Object.prototype.toString.call(subject) === '[object Date]') {
            return 'date';
        } else if (typeof subject.toString !== 'undefined' && /^\/.*\//.test(subject.toString())) {
            return 'regexp';
        }
        return 'object';
    }
    function deepDiff(lhs, rhs, changes, prefilter, path, key, stack) {
        path = path || [];
        var currentPath = path.slice(0);
        if (typeof key !== 'undefined') {
            if (prefilter) {
                if (typeof prefilter === 'function' && prefilter(currentPath, key)) {
                    return;
                } else if (typeof prefilter === 'object') {
                    if (prefilter.prefilter && prefilter.prefilter(currentPath, key)) {
                        return;
                    }
                    if (prefilter.normalize) {
                        var alt = prefilter.normalize(currentPath, key, lhs, rhs);
                        if (alt) {
                            lhs = alt[0];
                            rhs = alt[1];
                        }
                    }
                }
            }
            currentPath.push(key);
        }
        if (realTypeOf(lhs) === 'regexp' && realTypeOf(rhs) === 'regexp') {
            lhs = lhs.toString();
            rhs = rhs.toString();
        }
        var ltype = typeof lhs;
        var rtype = typeof rhs;
        if (ltype === 'undefined') {
            if (rtype !== 'undefined') {
                changes(new DiffNew(currentPath, rhs));
            }
        } else if (rtype === 'undefined') {
            changes(new DiffDeleted(currentPath, lhs));
        } else if (realTypeOf(lhs) !== realTypeOf(rhs)) {
            changes(new DiffEdit(currentPath, lhs, rhs));
        } else if (Object.prototype.toString.call(lhs) === '[object Date]' && Object.prototype.toString.call(rhs) === '[object Date]' && lhs - rhs !== 0) {
            changes(new DiffEdit(currentPath, lhs, rhs));
        } else if (ltype === 'object' && lhs !== null && rhs !== null) {
            stack = stack || [];
            if (stack.indexOf(lhs) < 0) {
                stack.push(lhs);
                if (Array.isArray(lhs)) {
                    var i, len = lhs.length;
                    for (i = 0; i < lhs.length; i++) {
                        if (i >= rhs.length) {
                            changes(new DiffArray(currentPath, i, new DiffDeleted(undefined, lhs[i])));
                        } else {
                            deepDiff(lhs[i], rhs[i], changes, prefilter, currentPath, i, stack);
                        }
                    }
                    while (i < rhs.length) {
                        changes(new DiffArray(currentPath, i, new DiffNew(undefined, rhs[i++])));
                    }
                } else {
                    var akeys = Object.keys(lhs);
                    var pkeys = Object.keys(rhs);
                    akeys.forEach(function (k, i) {
                        var other = pkeys.indexOf(k);
                        if (other >= 0) {
                            deepDiff(lhs[k], rhs[k], changes, prefilter, currentPath, k, stack);
                            pkeys = arrayRemove(pkeys, other);
                        } else {
                            deepDiff(lhs[k], undefined, changes, prefilter, currentPath, k, stack);
                        }
                    });
                    pkeys.forEach(function (k) {
                        deepDiff(undefined, rhs[k], changes, prefilter, currentPath, k, stack);
                    });
                }
                stack.length = stack.length - 1;
            }
        } else if (lhs !== rhs) {
            if (!(ltype === 'number' && isNaN(lhs) && isNaN(rhs))) {
                changes(new DiffEdit(currentPath, lhs, rhs));
            }
        }
    }
    function accumulateDiff(lhs, rhs, prefilter, accum) {
        accum = accum || [];
        deepDiff(lhs, rhs, function (diff) {
            if (diff) {
                accum.push(diff);
            }
        }, prefilter);
        return accum.length ? accum : undefined;
    }
    function applyArrayChange(arr, index, change) {
        if (change.path && change.path.length) {
            var it = arr[index], i, u = change.path.length - 1;
            for (i = 0; i < u; i++) {
                it = it[change.path[i]];
            }
            switch (change.kind) {
            case 'A':
                applyArrayChange(it[change.path[i]], change.index, change.item);
                break;
            case 'D':
                delete it[change.path[i]];
                break;
            case 'E':
            case 'N':
                it[change.path[i]] = change.rhs;
                break;
            }
        } else {
            switch (change.kind) {
            case 'A':
                applyArrayChange(arr[index], change.index, change.item);
                break;
            case 'D':
                arr = arrayRemove(arr, index);
                break;
            case 'E':
            case 'N':
                arr[index] = change.rhs;
                break;
            }
        }
        return arr;
    }
    function applyChange(target, source, change) {
        if (target && source && change && change.kind) {
            var it = target, i = -1, last = change.path ? change.path.length - 1 : 0;
            while (++i < last) {
                if (typeof it[change.path[i]] === 'undefined') {
                    it[change.path[i]] = typeof change.path[i] === 'number' ? [] : {};
                }
                it = it[change.path[i]];
            }
            switch (change.kind) {
            case 'A':
                applyArrayChange(change.path ? it[change.path[i]] : it, change.index, change.item);
                break;
            case 'D':
                delete it[change.path[i]];
                break;
            case 'E':
            case 'N':
                it[change.path[i]] = change.rhs;
                break;
            }
        }
    }
    function revertArrayChange(arr, index, change) {
        if (change.path && change.path.length) {
            var it = arr[index], i, u = change.path.length - 1;
            for (i = 0; i < u; i++) {
                it = it[change.path[i]];
            }
            switch (change.kind) {
            case 'A':
                revertArrayChange(it[change.path[i]], change.index, change.item);
                break;
            case 'D':
                it[change.path[i]] = change.lhs;
                break;
            case 'E':
                it[change.path[i]] = change.lhs;
                break;
            case 'N':
                delete it[change.path[i]];
                break;
            }
        } else {
            switch (change.kind) {
            case 'A':
                revertArrayChange(arr[index], change.index, change.item);
                break;
            case 'D':
                arr[index] = change.lhs;
                break;
            case 'E':
                arr[index] = change.lhs;
                break;
            case 'N':
                arr = arrayRemove(arr, index);
                break;
            }
        }
        return arr;
    }
    function revertChange(target, source, change) {
        if (target && source && change && change.kind) {
            var it = target, i, u;
            u = change.path.length - 1;
            for (i = 0; i < u; i++) {
                if (typeof it[change.path[i]] === 'undefined') {
                    it[change.path[i]] = {};
                }
                it = it[change.path[i]];
            }
            switch (change.kind) {
            case 'A':
                revertArrayChange(it[change.path[i]], change.index, change.item);
                break;
            case 'D':
                it[change.path[i]] = change.lhs;
                break;
            case 'E':
                it[change.path[i]] = change.lhs;
                break;
            case 'N':
                delete it[change.path[i]];
                break;
            }
        }
    }
    function applyDiff(target, source, filter) {
        if (target && source) {
            var onChange = function (change) {
                if (!filter || filter(target, source, change)) {
                    applyChange(target, source, change);
                }
            };
            deepDiff(target, source, onChange);
        }
    }
    Object.defineProperties(accumulateDiff, {
        diff: {
            value: accumulateDiff,
            enumerable: true
        },
        observableDiff: {
            value: deepDiff,
            enumerable: true
        },
        applyDiff: {
            value: applyDiff,
            enumerable: true
        },
        applyChange: {
            value: applyChange,
            enumerable: true
        },
        revertChange: {
            value: revertChange,
            enumerable: true
        },
        isConflict: {
            value: function () {
                return 'undefined' !== typeof conflict;
            },
            enumerable: true
        },
        noConflict: {
            value: function () {
                if (conflictResolution) {
                    conflictResolution.forEach(function (it) {
                        it();
                    });
                    conflictResolution = null;
                }
                return accumulateDiff;
            },
            enumerable: true
        }
    });
    return accumulateDiff;
}));


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],12:[function(require,module,exports){
var detectBrowser = require(13);
module.exports = detectBrowser(navigator.userAgent);


},{"13":13}],13:[function(require,module,exports){
module.exports = function detectBrowser(userAgentString) {
    var browsers = [
        [
            'edge',
            /Edge\/([0-9\._]+)/
        ],
        [
            'chrome',
            /(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/
        ],
        [
            'crios',
            /CriOS\/([0-9\.]+)(:?\s|$)/
        ],
        [
            'firefox',
            /Firefox\/([0-9\.]+)(?:\s|$)/
        ],
        [
            'opera',
            /Opera\/([0-9\.]+)(?:\s|$)/
        ],
        [
            'opera',
            /OPR\/([0-9\.]+)(:?\s|$)$/
        ],
        [
            'ie',
            /Trident\/7\.0.*rv\:([0-9\.]+)\).*Gecko$/
        ],
        [
            'ie',
            /MSIE\s([0-9\.]+);.*Trident\/[4-7].0/
        ],
        [
            'ie',
            /MSIE\s(7\.0)/
        ],
        [
            'bb10',
            /BB10;\sTouch.*Version\/([0-9\.]+)/
        ],
        [
            'android',
            /Android\s([0-9\.]+)/
        ],
        [
            'ios',
            /iPad.*Version\/([0-9\._]+)/
        ],
        [
            'ios',
            /iPhone.*Version\/([0-9\._]+)/
        ],
        [
            'safari',
            /Version\/([0-9\._]+).*Safari/
        ]
    ];
    var i = 0, mapped = [];
    for (i = 0; i < browsers.length; i++) {
        browsers[i] = createMatch(browsers[i]);
        if (isMatch(browsers[i])) {
            mapped.push(browsers[i]);
        }
    }
    var match = mapped[0];
    var parts = match && match[3].split(/[._]/).slice(0, 3);
    while (parts && parts.length < 3) {
        parts.push('0');
    }
    function createMatch(pair) {
        return pair.concat(pair[1].exec(userAgentString));
    }
    function isMatch(pair) {
        return !!pair[2];
    }
    return {
        name: match && match[0],
        version: parts && parts.join('.')
    };
};


},{}],14:[function(require,module,exports){
'use strict';
var document = require(17);
module.exports = document.addEventListener ? ready : noop;
function ready(callback) {
    var state = document.readyState;
    if (state === 'complete' || state === 'interactive') {
        return setTimeout(callback, 0);
    }
    document.addEventListener('DOMContentLoaded', function onLoad() {
        callback();
    });
}
function noop() {
}


},{"17":17}],15:[function(require,module,exports){
;
(function () {
    'use strict';
    function FastClick(layer, options) {
        var oldOnClick;
        options = options || {};
        this.trackingClick = false;
        this.trackingClickStart = 0;
        this.targetElement = null;
        this.touchStartX = 0;
        this.touchStartY = 0;
        this.lastTouchIdentifier = 0;
        this.touchBoundary = options.touchBoundary || 10;
        this.layer = layer;
        this.tapDelay = options.tapDelay || 200;
        this.tapTimeout = options.tapTimeout || 700;
        if (FastClick.notNeeded(layer)) {
            return;
        }
        function bind(method, context) {
            return function () {
                return method.apply(context, arguments);
            };
        }
        var methods = [
            'onMouse',
            'onClick',
            'onTouchStart',
            'onTouchMove',
            'onTouchEnd',
            'onTouchCancel'
        ];
        var context = this;
        for (var i = 0, l = methods.length; i < l; i++) {
            context[methods[i]] = bind(context[methods[i]], context);
        }
        if (deviceIsAndroid) {
            layer.addEventListener('mouseover', this.onMouse, true);
            layer.addEventListener('mousedown', this.onMouse, true);
            layer.addEventListener('mouseup', this.onMouse, true);
        }
        layer.addEventListener('click', this.onClick, true);
        layer.addEventListener('touchstart', this.onTouchStart, false);
        layer.addEventListener('touchmove', this.onTouchMove, false);
        layer.addEventListener('touchend', this.onTouchEnd, false);
        layer.addEventListener('touchcancel', this.onTouchCancel, false);
        if (!Event.prototype.stopImmediatePropagation) {
            layer.removeEventListener = function (type, callback, capture) {
                var rmv = Node.prototype.removeEventListener;
                if (type === 'click') {
                    rmv.call(layer, type, callback.hijacked || callback, capture);
                } else {
                    rmv.call(layer, type, callback, capture);
                }
            };
            layer.addEventListener = function (type, callback, capture) {
                var adv = Node.prototype.addEventListener;
                if (type === 'click') {
                    adv.call(layer, type, callback.hijacked || (callback.hijacked = function (event) {
                        if (!event.propagationStopped) {
                            callback(event);
                        }
                    }), capture);
                } else {
                    adv.call(layer, type, callback, capture);
                }
            };
        }
        if (typeof layer.onclick === 'function') {
            oldOnClick = layer.onclick;
            layer.addEventListener('click', function (event) {
                oldOnClick(event);
            }, false);
            layer.onclick = null;
        }
    }
    var deviceIsWindowsPhone = navigator.userAgent.indexOf('Windows Phone') >= 0;
    var deviceIsAndroid = navigator.userAgent.indexOf('Android') > 0 && !deviceIsWindowsPhone;
    var deviceIsIOS = /iP(ad|hone|od)/.test(navigator.userAgent) && !deviceIsWindowsPhone;
    var deviceIsIOS4 = deviceIsIOS && /OS 4_\d(_\d)?/.test(navigator.userAgent);
    var deviceIsIOSWithBadTarget = deviceIsIOS && /OS [6-7]_\d/.test(navigator.userAgent);
    var deviceIsBlackBerry10 = navigator.userAgent.indexOf('BB10') > 0;
    FastClick.prototype.needsClick = function (target) {
        switch (target.nodeName.toLowerCase()) {
        case 'button':
        case 'select':
        case 'textarea':
            if (target.disabled) {
                return true;
            }
            break;
        case 'input':
            if (deviceIsIOS && target.type === 'file' || target.disabled) {
                return true;
            }
            break;
        case 'label':
        case 'iframe':
        case 'video':
            return true;
        }
        return /\bneedsclick\b/.test(target.className);
    };
    FastClick.prototype.needsFocus = function (target) {
        switch (target.nodeName.toLowerCase()) {
        case 'textarea':
            return true;
        case 'select':
            return !deviceIsAndroid;
        case 'input':
            switch (target.type) {
            case 'button':
            case 'checkbox':
            case 'file':
            case 'image':
            case 'radio':
            case 'submit':
                return false;
            }
            return !target.disabled && !target.readOnly;
        default:
            return /\bneedsfocus\b/.test(target.className);
        }
    };
    FastClick.prototype.sendClick = function (targetElement, event) {
        var clickEvent, touch;
        if (document.activeElement && document.activeElement !== targetElement) {
            document.activeElement.blur();
        }
        touch = event.changedTouches[0];
        clickEvent = document.createEvent('MouseEvents');
        clickEvent.initMouseEvent(this.determineEventType(targetElement), true, true, window, 1, touch.screenX, touch.screenY, touch.clientX, touch.clientY, false, false, false, false, 0, null);
        clickEvent.forwardedTouchEvent = true;
        targetElement.dispatchEvent(clickEvent);
    };
    FastClick.prototype.determineEventType = function (targetElement) {
        if (deviceIsAndroid && targetElement.tagName.toLowerCase() === 'select') {
            return 'mousedown';
        }
        return 'click';
    };
    FastClick.prototype.focus = function (targetElement) {
        var length;
        if (deviceIsIOS && targetElement.setSelectionRange && targetElement.type.indexOf('date') !== 0 && targetElement.type !== 'time' && targetElement.type !== 'month') {
            length = targetElement.value.length;
            targetElement.setSelectionRange(length, length);
        } else {
            targetElement.focus();
        }
    };
    FastClick.prototype.updateScrollParent = function (targetElement) {
        var scrollParent, parentElement;
        scrollParent = targetElement.fastClickScrollParent;
        if (!scrollParent || !scrollParent.contains(targetElement)) {
            parentElement = targetElement;
            do {
                if (parentElement.scrollHeight > parentElement.offsetHeight) {
                    scrollParent = parentElement;
                    targetElement.fastClickScrollParent = parentElement;
                    break;
                }
                parentElement = parentElement.parentElement;
            } while (parentElement);
        }
        if (scrollParent) {
            scrollParent.fastClickLastScrollTop = scrollParent.scrollTop;
        }
    };
    FastClick.prototype.getTargetElementFromEventTarget = function (eventTarget) {
        if (eventTarget.nodeType === Node.TEXT_NODE) {
            return eventTarget.parentNode;
        }
        return eventTarget;
    };
    FastClick.prototype.onTouchStart = function (event) {
        var targetElement, touch, selection;
        if (event.targetTouches.length > 1) {
            return true;
        }
        targetElement = this.getTargetElementFromEventTarget(event.target);
        touch = event.targetTouches[0];
        if (deviceIsIOS) {
            selection = window.getSelection();
            if (selection.rangeCount && !selection.isCollapsed) {
                return true;
            }
            if (!deviceIsIOS4) {
                if (touch.identifier && touch.identifier === this.lastTouchIdentifier) {
                    event.preventDefault();
                    return false;
                }
                this.lastTouchIdentifier = touch.identifier;
                this.updateScrollParent(targetElement);
            }
        }
        this.trackingClick = true;
        this.trackingClickStart = event.timeStamp;
        this.targetElement = targetElement;
        this.touchStartX = touch.pageX;
        this.touchStartY = touch.pageY;
        if (event.timeStamp - this.lastClickTime < this.tapDelay) {
            event.preventDefault();
        }
        return true;
    };
    FastClick.prototype.touchHasMoved = function (event) {
        var touch = event.changedTouches[0], boundary = this.touchBoundary;
        if (Math.abs(touch.pageX - this.touchStartX) > boundary || Math.abs(touch.pageY - this.touchStartY) > boundary) {
            return true;
        }
        return false;
    };
    FastClick.prototype.onTouchMove = function (event) {
        if (!this.trackingClick) {
            return true;
        }
        if (this.targetElement !== this.getTargetElementFromEventTarget(event.target) || this.touchHasMoved(event)) {
            this.trackingClick = false;
            this.targetElement = null;
        }
        return true;
    };
    FastClick.prototype.findControl = function (labelElement) {
        if (labelElement.control !== undefined) {
            return labelElement.control;
        }
        if (labelElement.htmlFor) {
            return document.getElementById(labelElement.htmlFor);
        }
        return labelElement.querySelector('button, input:not([type=hidden]), keygen, meter, output, progress, select, textarea');
    };
    FastClick.prototype.onTouchEnd = function (event) {
        var forElement, trackingClickStart, targetTagName, scrollParent, touch, targetElement = this.targetElement;
        if (!this.trackingClick) {
            return true;
        }
        if (event.timeStamp - this.lastClickTime < this.tapDelay) {
            this.cancelNextClick = true;
            return true;
        }
        if (event.timeStamp - this.trackingClickStart > this.tapTimeout) {
            return true;
        }
        this.cancelNextClick = false;
        this.lastClickTime = event.timeStamp;
        trackingClickStart = this.trackingClickStart;
        this.trackingClick = false;
        this.trackingClickStart = 0;
        if (deviceIsIOSWithBadTarget) {
            touch = event.changedTouches[0];
            targetElement = document.elementFromPoint(touch.pageX - window.pageXOffset, touch.pageY - window.pageYOffset) || targetElement;
            targetElement.fastClickScrollParent = this.targetElement.fastClickScrollParent;
        }
        targetTagName = targetElement.tagName.toLowerCase();
        if (targetTagName === 'label') {
            forElement = this.findControl(targetElement);
            if (forElement) {
                this.focus(targetElement);
                if (deviceIsAndroid) {
                    return false;
                }
                targetElement = forElement;
            }
        } else if (this.needsFocus(targetElement)) {
            if (event.timeStamp - trackingClickStart > 100 || deviceIsIOS && window.top !== window && targetTagName === 'input') {
                this.targetElement = null;
                return false;
            }
            this.focus(targetElement);
            this.sendClick(targetElement, event);
            if (!deviceIsIOS || targetTagName !== 'select') {
                this.targetElement = null;
                event.preventDefault();
            }
            return false;
        }
        if (deviceIsIOS && !deviceIsIOS4) {
            scrollParent = targetElement.fastClickScrollParent;
            if (scrollParent && scrollParent.fastClickLastScrollTop !== scrollParent.scrollTop) {
                return true;
            }
        }
        if (!this.needsClick(targetElement)) {
            event.preventDefault();
            this.sendClick(targetElement, event);
        }
        return false;
    };
    FastClick.prototype.onTouchCancel = function () {
        this.trackingClick = false;
        this.targetElement = null;
    };
    FastClick.prototype.onMouse = function (event) {
        if (!this.targetElement) {
            return true;
        }
        if (event.forwardedTouchEvent) {
            return true;
        }
        if (!event.cancelable) {
            return true;
        }
        if (!this.needsClick(this.targetElement) || this.cancelNextClick) {
            if (event.stopImmediatePropagation) {
                event.stopImmediatePropagation();
            } else {
                event.propagationStopped = true;
            }
            event.stopPropagation();
            event.preventDefault();
            return false;
        }
        return true;
    };
    FastClick.prototype.onClick = function (event) {
        var permitted;
        if (this.trackingClick) {
            this.targetElement = null;
            this.trackingClick = false;
            return true;
        }
        if (event.target.type === 'submit' && event.detail === 0) {
            return true;
        }
        permitted = this.onMouse(event);
        if (!permitted) {
            this.targetElement = null;
        }
        return permitted;
    };
    FastClick.prototype.destroy = function () {
        var layer = this.layer;
        if (deviceIsAndroid) {
            layer.removeEventListener('mouseover', this.onMouse, true);
            layer.removeEventListener('mousedown', this.onMouse, true);
            layer.removeEventListener('mouseup', this.onMouse, true);
        }
        layer.removeEventListener('click', this.onClick, true);
        layer.removeEventListener('touchstart', this.onTouchStart, false);
        layer.removeEventListener('touchmove', this.onTouchMove, false);
        layer.removeEventListener('touchend', this.onTouchEnd, false);
        layer.removeEventListener('touchcancel', this.onTouchCancel, false);
    };
    FastClick.notNeeded = function (layer) {
        var metaViewport;
        var chromeVersion;
        var blackberryVersion;
        var firefoxVersion;
        if (typeof window.ontouchstart === 'undefined') {
            return true;
        }
        chromeVersion = +(/Chrome\/([0-9]+)/.exec(navigator.userAgent) || [
            ,
            0
        ])[1];
        if (chromeVersion) {
            if (deviceIsAndroid) {
                metaViewport = document.querySelector('meta[name=viewport]');
                if (metaViewport) {
                    if (metaViewport.content.indexOf('user-scalable=no') !== -1) {
                        return true;
                    }
                    if (chromeVersion > 31 && document.documentElement.scrollWidth <= window.outerWidth) {
                        return true;
                    }
                }
            } else {
                return true;
            }
        }
        if (deviceIsBlackBerry10) {
            blackberryVersion = navigator.userAgent.match(/Version\/([0-9]*)\.([0-9]*)/);
            if (blackberryVersion[1] >= 10 && blackberryVersion[2] >= 3) {
                metaViewport = document.querySelector('meta[name=viewport]');
                if (metaViewport) {
                    if (metaViewport.content.indexOf('user-scalable=no') !== -1) {
                        return true;
                    }
                    if (document.documentElement.scrollWidth <= window.outerWidth) {
                        return true;
                    }
                }
            }
        }
        if (layer.style.msTouchAction === 'none' || layer.style.touchAction === 'manipulation') {
            return true;
        }
        firefoxVersion = +(/Firefox\/([0-9]+)/.exec(navigator.userAgent) || [
            ,
            0
        ])[1];
        if (firefoxVersion >= 27) {
            metaViewport = document.querySelector('meta[name=viewport]');
            if (metaViewport && (metaViewport.content.indexOf('user-scalable=no') !== -1 || document.documentElement.scrollWidth <= window.outerWidth)) {
                return true;
            }
        }
        if (layer.style.touchAction === 'none' || layer.style.touchAction === 'manipulation') {
            return true;
        }
        return false;
    };
    FastClick.attach = function (layer, options) {
        return new FastClick(layer, options);
    };
    if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {
        define(function () {
            return FastClick;
        });
    } else if (typeof module !== 'undefined' && module.exports) {
        module.exports = FastClick.attach;
        module.exports.FastClick = FastClick;
    } else {
        window.FastClick = FastClick;
    }
}());


},{}],16:[function(require,module,exports){
var isFunction = require(22);
module.exports = forEach;
var toString = Object.prototype.toString;
var hasOwnProperty = Object.prototype.hasOwnProperty;
function forEach(list, iterator, context) {
    if (!isFunction(iterator)) {
        throw new TypeError('iterator must be a function');
    }
    if (arguments.length < 3) {
        context = this;
    }
    if (toString.call(list) === '[object Array]')
        forEachArray(list, iterator, context);
    else if (typeof list === 'string')
        forEachString(list, iterator, context);
    else
        forEachObject(list, iterator, context);
}
function forEachArray(array, iterator, context) {
    for (var i = 0, len = array.length; i < len; i++) {
        if (hasOwnProperty.call(array, i)) {
            iterator.call(context, array[i], i, array);
        }
    }
}
function forEachString(string, iterator, context) {
    for (var i = 0, len = string.length; i < len; i++) {
        iterator.call(context, string.charAt(i), i, string);
    }
}
function forEachObject(object, iterator, context) {
    for (var k in object) {
        if (hasOwnProperty.call(object, k)) {
            iterator.call(context, object[k], k, object);
        }
    }
}


},{"22":22}],17:[function(require,module,exports){
(function (global){
var topLevel = typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : {};
var minDoc = require(5);
if (typeof document !== 'undefined') {
    module.exports = document;
} else {
    var doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];
    if (!doccy) {
        doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;
    }
    module.exports = doccy;
}


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"5":5}],18:[function(require,module,exports){
(function (global){
if (typeof window !== 'undefined') {
    module.exports = window;
} else if (typeof global !== 'undefined') {
    module.exports = global;
} else if (typeof self !== 'undefined') {
    module.exports = self;
} else {
    module.exports = {};
}


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],19:[function(require,module,exports){
module.exports = function hashMatch(hash, prefix) {
    var pre = prefix || '/';
    if (hash.length === 0)
        return pre;
    hash = hash.replace('#', '');
    hash = hash.replace(/\/$/, '');
    if (hash.indexOf('/') != 0)
        hash = '/' + hash;
    if (pre == '/')
        return hash;
    else
        return hash.replace(pre, '');
};


},{}],20:[function(require,module,exports){
module.exports = attributeToProperty;
var transform = {
    'class': 'className',
    'for': 'htmlFor',
    'http-equiv': 'httpEquiv'
};
function attributeToProperty(h) {
    return function (tagName, attrs, children) {
        for (var attr in attrs) {
            if (attr in transform) {
                attrs[transform[attr]] = attrs[attr];
                delete attrs[attr];
            }
        }
        return h(tagName, attrs, children);
    };
}


},{}],21:[function(require,module,exports){
var attrToProp = require(20);
var VAR = 0, TEXT = 1, OPEN = 2, CLOSE = 3, ATTR = 4;
var ATTR_KEY = 5, ATTR_KEY_W = 6;
var ATTR_VALUE_W = 7, ATTR_VALUE = 8;
var ATTR_VALUE_SQ = 9, ATTR_VALUE_DQ = 10;
var ATTR_EQ = 11, ATTR_BREAK = 12;
module.exports = function (h, opts) {
    h = attrToProp(h);
    if (!opts)
        opts = {};
    var concat = opts.concat || function (a, b) {
        return String(a) + String(b);
    };
    return function (strings) {
        var state = TEXT, reg = '';
        var arglen = arguments.length;
        var parts = [];
        for (var i = 0; i < strings.length; i++) {
            if (i < arglen - 1) {
                var arg = arguments[i + 1];
                var p = parse(strings[i]);
                var xstate = state;
                if (xstate === ATTR_VALUE_DQ)
                    xstate = ATTR_VALUE;
                if (xstate === ATTR_VALUE_SQ)
                    xstate = ATTR_VALUE;
                if (xstate === ATTR_VALUE_W)
                    xstate = ATTR_VALUE;
                if (xstate === ATTR)
                    xstate = ATTR_KEY;
                p.push([
                    VAR,
                    xstate,
                    arg
                ]);
                parts.push.apply(parts, p);
            } else
                parts.push.apply(parts, parse(strings[i]));
        }
        var tree = [
            null,
            {},
            []
        ];
        var stack = [[
                tree,
                -1
            ]];
        for (var i = 0; i < parts.length; i++) {
            var cur = stack[stack.length - 1][0];
            var p = parts[i], s = p[0];
            if (s === OPEN && /^\//.test(p[1])) {
                var ix = stack[stack.length - 1][1];
                if (stack.length > 1) {
                    stack.pop();
                    stack[stack.length - 1][0][2][ix] = h(cur[0], cur[1], cur[2].length ? cur[2] : undefined);
                }
            } else if (s === OPEN) {
                var c = [
                    p[1],
                    {},
                    []
                ];
                cur[2].push(c);
                stack.push([
                    c,
                    cur[2].length - 1
                ]);
            } else if (s === ATTR_KEY || s === VAR && p[1] === ATTR_KEY) {
                var key = '';
                var copyKey;
                for (; i < parts.length; i++) {
                    if (parts[i][0] === ATTR_KEY) {
                        key = concat(key, parts[i][1]);
                    } else if (parts[i][0] === VAR && parts[i][1] === ATTR_KEY) {
                        if (typeof parts[i][2] === 'object' && !key) {
                            for (copyKey in parts[i][2]) {
                                if (parts[i][2].hasOwnProperty(copyKey) && !cur[1][copyKey]) {
                                    cur[1][copyKey] = parts[i][2][copyKey];
                                }
                            }
                        } else {
                            key = concat(key, parts[i][2]);
                        }
                    } else
                        break;
                }
                if (parts[i][0] === ATTR_EQ)
                    i++;
                var j = i;
                for (; i < parts.length; i++) {
                    if (parts[i][0] === ATTR_VALUE || parts[i][0] === ATTR_KEY) {
                        if (!cur[1][key])
                            cur[1][key] = strfn(parts[i][1]);
                        else
                            cur[1][key] = concat(cur[1][key], parts[i][1]);
                    } else if (parts[i][0] === VAR && (parts[i][1] === ATTR_VALUE || parts[i][1] === ATTR_KEY)) {
                        if (!cur[1][key])
                            cur[1][key] = strfn(parts[i][2]);
                        else
                            cur[1][key] = concat(cur[1][key], parts[i][2]);
                    } else {
                        if (key.length && !cur[1][key] && i === j && (parts[i][0] === CLOSE || parts[i][0] === ATTR_BREAK)) {
                            cur[1][key] = key.toLowerCase();
                        }
                        break;
                    }
                }
            } else if (s === ATTR_KEY) {
                cur[1][p[1]] = true;
            } else if (s === VAR && p[1] === ATTR_KEY) {
                cur[1][p[2]] = true;
            } else if (s === CLOSE) {
                if (selfClosing(cur[0]) && stack.length) {
                    var ix = stack[stack.length - 1][1];
                    stack.pop();
                    stack[stack.length - 1][0][2][ix] = h(cur[0], cur[1], cur[2].length ? cur[2] : undefined);
                }
            } else if (s === VAR && p[1] === TEXT) {
                if (p[2] === undefined || p[2] === null)
                    p[2] = '';
                else if (!p[2])
                    p[2] = concat('', p[2]);
                if (Array.isArray(p[2][0])) {
                    cur[2].push.apply(cur[2], p[2]);
                } else {
                    cur[2].push(p[2]);
                }
            } else if (s === TEXT) {
                cur[2].push(p[1]);
            } else if (s === ATTR_EQ || s === ATTR_BREAK) {
            } else {
                throw new Error('unhandled: ' + s);
            }
        }
        if (tree[2].length > 1 && /^\s*$/.test(tree[2][0])) {
            tree[2].shift();
        }
        if (tree[2].length > 2 || tree[2].length === 2 && /\S/.test(tree[2][1])) {
            throw new Error('multiple root elements must be wrapped in an enclosing tag');
        }
        if (Array.isArray(tree[2][0]) && typeof tree[2][0][0] === 'string' && Array.isArray(tree[2][0][2])) {
            tree[2][0] = h(tree[2][0][0], tree[2][0][1], tree[2][0][2]);
        }
        return tree[2][0];
        function parse(str) {
            var res = [];
            if (state === ATTR_VALUE_W)
                state = ATTR;
            for (var i = 0; i < str.length; i++) {
                var c = str.charAt(i);
                if (state === TEXT && c === '<') {
                    if (reg.length)
                        res.push([
                            TEXT,
                            reg
                        ]);
                    reg = '';
                    state = OPEN;
                } else if (c === '>' && !quot(state)) {
                    if (state === OPEN) {
                        res.push([
                            OPEN,
                            reg
                        ]);
                    } else if (state === ATTR_KEY) {
                        res.push([
                            ATTR_KEY,
                            reg
                        ]);
                    } else if (state === ATTR_VALUE && reg.length) {
                        res.push([
                            ATTR_VALUE,
                            reg
                        ]);
                    }
                    res.push([CLOSE]);
                    reg = '';
                    state = TEXT;
                } else if (state === TEXT) {
                    reg += c;
                } else if (state === OPEN && /\s/.test(c)) {
                    res.push([
                        OPEN,
                        reg
                    ]);
                    reg = '';
                    state = ATTR;
                } else if (state === OPEN) {
                    reg += c;
                } else if (state === ATTR && /[\w-]/.test(c)) {
                    state = ATTR_KEY;
                    reg = c;
                } else if (state === ATTR && /\s/.test(c)) {
                    if (reg.length)
                        res.push([
                            ATTR_KEY,
                            reg
                        ]);
                    res.push([ATTR_BREAK]);
                } else if (state === ATTR_KEY && /\s/.test(c)) {
                    res.push([
                        ATTR_KEY,
                        reg
                    ]);
                    reg = '';
                    state = ATTR_KEY_W;
                } else if (state === ATTR_KEY && c === '=') {
                    res.push([
                        ATTR_KEY,
                        reg
                    ], [ATTR_EQ]);
                    reg = '';
                    state = ATTR_VALUE_W;
                } else if (state === ATTR_KEY) {
                    reg += c;
                } else if ((state === ATTR_KEY_W || state === ATTR) && c === '=') {
                    res.push([ATTR_EQ]);
                    state = ATTR_VALUE_W;
                } else if ((state === ATTR_KEY_W || state === ATTR) && !/\s/.test(c)) {
                    res.push([ATTR_BREAK]);
                    if (/[\w-]/.test(c)) {
                        reg += c;
                        state = ATTR_KEY;
                    } else
                        state = ATTR;
                } else if (state === ATTR_VALUE_W && c === '"') {
                    state = ATTR_VALUE_DQ;
                } else if (state === ATTR_VALUE_W && c === '\'') {
                    state = ATTR_VALUE_SQ;
                } else if (state === ATTR_VALUE_DQ && c === '"') {
                    res.push([
                        ATTR_VALUE,
                        reg
                    ], [ATTR_BREAK]);
                    reg = '';
                    state = ATTR;
                } else if (state === ATTR_VALUE_SQ && c === '\'') {
                    res.push([
                        ATTR_VALUE,
                        reg
                    ], [ATTR_BREAK]);
                    reg = '';
                    state = ATTR;
                } else if (state === ATTR_VALUE_W && !/\s/.test(c)) {
                    state = ATTR_VALUE;
                    i--;
                } else if (state === ATTR_VALUE && /\s/.test(c)) {
                    res.push([
                        ATTR_VALUE,
                        reg
                    ], [ATTR_BREAK]);
                    reg = '';
                    state = ATTR;
                } else if (state === ATTR_VALUE || state === ATTR_VALUE_SQ || state === ATTR_VALUE_DQ) {
                    reg += c;
                }
            }
            if (state === TEXT && reg.length) {
                res.push([
                    TEXT,
                    reg
                ]);
                reg = '';
            } else if (state === ATTR_VALUE && reg.length) {
                res.push([
                    ATTR_VALUE,
                    reg
                ]);
                reg = '';
            } else if (state === ATTR_VALUE_DQ && reg.length) {
                res.push([
                    ATTR_VALUE,
                    reg
                ]);
                reg = '';
            } else if (state === ATTR_VALUE_SQ && reg.length) {
                res.push([
                    ATTR_VALUE,
                    reg
                ]);
                reg = '';
            } else if (state === ATTR_KEY) {
                res.push([
                    ATTR_KEY,
                    reg
                ]);
                reg = '';
            }
            return res;
        }
    };
    function strfn(x) {
        if (typeof x === 'function')
            return x;
        else if (typeof x === 'string')
            return x;
        else if (x && typeof x === 'object')
            return x;
        else
            return concat('', x);
    }
};
function quot(state) {
    return state === ATTR_VALUE_SQ || state === ATTR_VALUE_DQ;
}
var hasOwn = Object.prototype.hasOwnProperty;
function has(obj, key) {
    return hasOwn.call(obj, key);
}
var closeRE = RegExp('^(' + [
    'area',
    'base',
    'basefont',
    'bgsound',
    'br',
    'col',
    'command',
    'embed',
    'frame',
    'hr',
    'img',
    'input',
    'isindex',
    'keygen',
    'link',
    'meta',
    'param',
    'source',
    'track',
    'wbr',
    'animate',
    'animateTransform',
    'circle',
    'cursor',
    'desc',
    'ellipse',
    'feBlend',
    'feColorMatrix',
    'feComposite',
    'feConvolveMatrix',
    'feDiffuseLighting',
    'feDisplacementMap',
    'feDistantLight',
    'feFlood',
    'feFuncA',
    'feFuncB',
    'feFuncG',
    'feFuncR',
    'feGaussianBlur',
    'feImage',
    'feMergeNode',
    'feMorphology',
    'feOffset',
    'fePointLight',
    'feSpecularLighting',
    'feSpotLight',
    'feTile',
    'feTurbulence',
    'font-face-format',
    'font-face-name',
    'font-face-uri',
    'glyph',
    'glyphRef',
    'hkern',
    'image',
    'line',
    'missing-glyph',
    'mpath',
    'path',
    'polygon',
    'polyline',
    'rect',
    'set',
    'stop',
    'tref',
    'use',
    'view',
    'vkern'
].join('|') + ')(?:[.#][a-zA-Z0-9\x7F-\uFFFF_:-]+)*$');
function selfClosing(tag) {
    return closeRE.test(tag);
}


},{"20":20}],22:[function(require,module,exports){
module.exports = isFunction;
var toString = Object.prototype.toString;
function isFunction(fn) {
    var string = toString.call(fn);
    return string === '[object Function]' || typeof fn === 'function' && string !== '[object RegExp]' || typeof window !== 'undefined' && (fn === window.setTimeout || fn === window.alert || fn === window.confirm || fn === window.prompt);
}
;


},{}],23:[function(require,module,exports){
module.exports=[
  {
    "id": "aatrox",
    "key": "266",
    "name": "Aatrox",
    "title": "the Darkin Blade",
    "tags": [
      "Fighter",
      "Tank"
    ],
    "stats": {
      "hp": 537.8,
      "hpperlevel": 85,
      "mp": 105.6,
      "mpperlevel": 45,
      "movespeed": 345,
      "armor": 24.384,
      "armorperlevel": 3.8,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 150,
      "hpregen": 6.59,
      "hpregenperlevel": 0.5,
      "mpregen": 0,
      "mpregenperlevel": 0,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 60.376,
      "attackdamageperlevel": 3.2,
      "attackspeedoffset": -0.04,
      "attackspeedperlevel": 3
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Aatrox.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion0.png",
      "x": 0,
      "y": 0
    },
    "description": "Aatrox is a legendary warrior, one of only five that remain of an ancient race known as the Darkin. He wields his massive blade with grace and poise, slicing through legions in a style that is hypnotic to behold. With each foe felled, Aatrox's ..."
  },
  {
    "id": "ahri",
    "key": "103",
    "name": "Ahri",
    "title": "the Nine-Tailed Fox",
    "tags": [
      "Mage",
      "Assassin"
    ],
    "stats": {
      "hp": 514.4,
      "hpperlevel": 80,
      "mp": 334,
      "mpperlevel": 50,
      "movespeed": 330,
      "armor": 20.88,
      "armorperlevel": 3.5,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 550,
      "hpregen": 6.505,
      "hpregenperlevel": 0.6,
      "mpregen": 6,
      "mpregenperlevel": 0.8,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 53.04,
      "attackdamageperlevel": 3,
      "attackspeedoffset": -0.065,
      "attackspeedperlevel": 2
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Ahri.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion0.png",
      "x": 48,
      "y": 0
    },
    "description": "Unlike other foxes that roamed the woods of southern Ionia, Ahri had always felt a strange connection to the magical world around her; a connection that was somehow incomplete. Deep inside, she felt the skin she had been born into was an ill fit for ..."
  },
  {
    "id": "akali",
    "key": "84",
    "name": "Akali",
    "title": "the Fist of Shadow",
    "tags": [
      "Assassin"
    ],
    "stats": {
      "hp": 587.8,
      "hpperlevel": 85,
      "mp": 200,
      "mpperlevel": 0,
      "movespeed": 350,
      "armor": 26.38,
      "armorperlevel": 3.5,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 125,
      "hpregen": 8.34,
      "hpregenperlevel": 0.65,
      "mpregen": 50,
      "mpregenperlevel": 0,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 58.376,
      "attackdamageperlevel": 3.2,
      "attackspeedoffset": -0.1,
      "attackspeedperlevel": 3.1
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Akali.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion0.png",
      "x": 96,
      "y": 0
    },
    "description": "There exists an ancient order originating in the Ionian Isles dedicated to the preservation of balance. Order, chaos, light, darkness -- all things must exist in perfect harmony for such is the way of the universe. This order is known as the Kinkou ..."
  },
  {
    "id": "alistar",
    "key": "12",
    "name": "Alistar",
    "title": "the Minotaur",
    "tags": [
      "Tank",
      "Support"
    ],
    "stats": {
      "hp": 613.36,
      "hpperlevel": 106,
      "mp": 278.84,
      "mpperlevel": 38,
      "movespeed": 330,
      "armor": 24.38,
      "armorperlevel": 3.5,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 125,
      "hpregen": 8.675,
      "hpregenperlevel": 0.85,
      "mpregen": 8.5,
      "mpregenperlevel": 0.8,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 61.1116,
      "attackdamageperlevel": 3.62,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 2.125
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Alistar.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion0.png",
      "x": 144,
      "y": 0
    },
    "description": "As the mightiest warrior to ever emerge from the Minotaur tribes of the Great Barrier, Alistar defended his tribe from Valoran's many dangers; that is, until the coming of the Noxian army. Alistar was lured from his village by the machinations of ..."
  },
  {
    "id": "amumu",
    "key": "32",
    "name": "Amumu",
    "title": "the Sad Mummy",
    "tags": [
      "Tank",
      "Mage"
    ],
    "stats": {
      "hp": 613.12,
      "hpperlevel": 84,
      "mp": 287.2,
      "mpperlevel": 40,
      "movespeed": 335,
      "armor": 23.544,
      "armorperlevel": 3.8,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 125,
      "hpregen": 8.875,
      "hpregenperlevel": 0.85,
      "mpregen": 7.38,
      "mpregenperlevel": 0.525,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 53.384,
      "attackdamageperlevel": 3.8,
      "attackspeedoffset": -0.02,
      "attackspeedperlevel": 2.18
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Amumu.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion0.png",
      "x": 192,
      "y": 0
    },
    "description": "''Solitude can be lonelier than death.''<br><br>A lonely and melancholy soul from ancient Shurima, Amumu roams the world in search of a friend. Cursed by an ancient spell, he is doomed to remain alone forever, as his touch is death and his affection ..."
  },
  {
    "id": "anivia",
    "key": "34",
    "name": "Anivia",
    "title": "the Cryophoenix",
    "tags": [
      "Mage",
      "Support"
    ],
    "stats": {
      "hp": 467.6,
      "hpperlevel": 70,
      "mp": 396.04,
      "mpperlevel": 50,
      "movespeed": 325,
      "armor": 21.22,
      "armorperlevel": 4,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 600,
      "hpregen": 5.57,
      "hpregenperlevel": 0.55,
      "mpregen": 6,
      "mpregenperlevel": 0.8,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 51.376,
      "attackdamageperlevel": 3.2,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 1.68
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Anivia.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion0.png",
      "x": 240,
      "y": 0
    },
    "description": "Anivia is a being of the coldest winter, a mystical embodiment of ice magic, and an ancient protector of the Freljord. She commands all the power and fury of the land itself, calling the snow and bitter wind to defend her home from those who would ..."
  },
  {
    "id": "annie",
    "key": "1",
    "name": "Annie",
    "title": "the Dark Child",
    "tags": [
      "Mage"
    ],
    "stats": {
      "hp": 511.68,
      "hpperlevel": 76,
      "mp": 334,
      "mpperlevel": 50,
      "movespeed": 335,
      "armor": 19.22,
      "armorperlevel": 4,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 575,
      "hpregen": 5.42,
      "hpregenperlevel": 0.55,
      "mpregen": 6,
      "mpregenperlevel": 0.8,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 50.41,
      "attackdamageperlevel": 2.625,
      "attackspeedoffset": 0.08,
      "attackspeedperlevel": 1.36
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Annie.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion0.png",
      "x": 288,
      "y": 0
    },
    "description": "There have always been those within Noxus who did not agree with the evils perpetrated by the Noxian High Command. The High Command had just put down a coup attempt from the self-proclaimed Crown Prince Raschallion, and a crackdown on any form of ..."
  },
  {
    "id": "ashe",
    "key": "22",
    "name": "Ashe",
    "title": "the Frost Archer",
    "tags": [
      "Marksman",
      "Support"
    ],
    "stats": {
      "hp": 527.72,
      "hpperlevel": 79,
      "mp": 280,
      "mpperlevel": 32,
      "movespeed": 325,
      "armor": 21.212,
      "armorperlevel": 3.4,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 600,
      "hpregen": 5.42,
      "hpregenperlevel": 0.55,
      "mpregen": 6.97,
      "mpregenperlevel": 0.4,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 56.508,
      "attackdamageperlevel": 2.26,
      "attackspeedoffset": -0.05,
      "attackspeedperlevel": 3.33
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Ashe.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion0.png",
      "x": 336,
      "y": 0
    },
    "description": "With each arrow she fires from her ancient ice-enchanted bow, Ashe proves she is a master archer. She chooses each target carefully, waits for the right moment, and then strikes with power and precision. It is with this same vision and focus that she ..."
  },
  {
    "id": "aurelionsol",
    "key": "136",
    "name": "Aurelion Sol",
    "title": "The Star Forger",
    "tags": [
      "Mage",
      "Fighter"
    ],
    "stats": {
      "hp": 550,
      "hpperlevel": 80,
      "mp": 350,
      "mpperlevel": 50,
      "movespeed": 325,
      "armor": 19,
      "armorperlevel": 3.6,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 550,
      "hpregen": 6.5,
      "hpregenperlevel": 0.6,
      "mpregen": 6,
      "mpregenperlevel": 0.8,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 57,
      "attackdamageperlevel": 3.2,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 1.36
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/AurelionSol.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion0.png",
      "x": 384,
      "y": 0
    },
    "description": "Aurelion Sol once graced the vast emptiness of the cosmos with celestial wonders of his own devising. Now, he is forced to wield his awesome power at the behest of a space-faring empire that tricked him into servitude. Desiring a return to his ..."
  },
  {
    "id": "azir",
    "key": "268",
    "name": "Azir",
    "title": "the Emperor of the Sands",
    "tags": [
      "Mage",
      "Marksman"
    ],
    "stats": {
      "hp": 524.4,
      "hpperlevel": 80,
      "mp": 350.56,
      "mpperlevel": 42,
      "movespeed": 325,
      "armor": 19.04,
      "armorperlevel": 3,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 525,
      "hpregen": 6.92,
      "hpregenperlevel": 0.55,
      "mpregen": 6,
      "mpregenperlevel": 0.8,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 52,
      "attackdamageperlevel": 2.8,
      "attackspeedoffset": -0.02,
      "attackspeedperlevel": 1.5
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Azir.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion0.png",
      "x": 432,
      "y": 0
    },
    "description": "''Shurima was once the glory of Runeterra. I will make it so again.''<br><br>Azir was a mortal emperor of Shurima in a far distant age, a proud man who stood at the cusp of immortality. His hubris saw him betrayed and murdered at the moment of his ..."
  },
  {
    "id": "bard",
    "key": "432",
    "name": "Bard",
    "title": "the Wandering Caretaker",
    "tags": [
      "Support",
      "Mage"
    ],
    "stats": {
      "hp": 535,
      "hpperlevel": 89,
      "mp": 350,
      "mpperlevel": 50,
      "movespeed": 330,
      "armor": 25,
      "armorperlevel": 4,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 500,
      "hpregen": 5.4,
      "hpregenperlevel": 0.55,
      "mpregen": 6,
      "mpregenperlevel": 0.45,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 52,
      "attackdamageperlevel": 3,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 2
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Bard.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion0.png",
      "x": 0,
      "y": 48
    },
    "description": "Bard travels through realms beyond the imagination of mortal beings. Some of Valoran's greatest scholars have spent their lives trying to understand the mysteries he embodies. This enigmatic spirit has been given many names throughout the history of ..."
  },
  {
    "id": "blitzcrank",
    "key": "53",
    "name": "Blitzcrank",
    "title": "the Great Steam Golem",
    "tags": [
      "Tank",
      "Fighter"
    ],
    "stats": {
      "hp": 582.6,
      "hpperlevel": 95,
      "mp": 267.2,
      "mpperlevel": 40,
      "movespeed": 325,
      "armor": 24.38,
      "armorperlevel": 4,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 125,
      "hpregen": 8.51,
      "hpregenperlevel": 0.75,
      "mpregen": 8.5,
      "mpregenperlevel": 0.8,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 61.54,
      "attackdamageperlevel": 3.5,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 1.13
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Blitzcrank.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion0.png",
      "x": 48,
      "y": 48
    },
    "description": "Zaun is a place where both magic and science have gone awry, and the unchecked nature of experimentation has taken its toll. However, Zaun's lenient restrictions allow their researchers and inventors the leeway to push the bounds of science at an ..."
  },
  {
    "id": "brand",
    "key": "63",
    "name": "Brand",
    "title": "the Burning Vengeance",
    "tags": [
      "Mage"
    ],
    "stats": {
      "hp": 507.68,
      "hpperlevel": 76,
      "mp": 375.6,
      "mpperlevel": 42,
      "movespeed": 340,
      "armor": 21.88,
      "armorperlevel": 3.5,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 550,
      "hpregen": 5.42,
      "hpregenperlevel": 0.55,
      "mpregen": 8.005,
      "mpregenperlevel": 0.6,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 57.04,
      "attackdamageperlevel": 3,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 1.36
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Brand.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion0.png",
      "x": 96,
      "y": 48
    },
    "description": "In a faraway place known as Lokfar there was a seafaring marauder called Kegan Rodhe. As was his people's way, Kegan sailed far and wide with his fellows, stealing treasures from those unlucky enough to catch their attention. To some, he was a ..."
  },
  {
    "id": "braum",
    "key": "201",
    "name": "Braum",
    "title": "the Heart of the Freljord",
    "tags": [
      "Support",
      "Tank"
    ],
    "stats": {
      "hp": 576.16,
      "hpperlevel": 87,
      "mp": 310.6,
      "mpperlevel": 45,
      "movespeed": 335,
      "armor": 26.72,
      "armorperlevel": 4.5,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 125,
      "hpregen": 8.18,
      "hpregenperlevel": 1,
      "mpregen": 6,
      "mpregenperlevel": 0.8,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 55.376,
      "attackdamageperlevel": 3.2,
      "attackspeedoffset": -0.03,
      "attackspeedperlevel": 3.5
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Braum.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion0.png",
      "x": 144,
      "y": 48
    },
    "description": "''Would you like a bedtime story?''<br><br>''Grandma, I'm too old for that.''<br><br>''You're never too old to be told a story.''<br><br>The girl reluctantly crawls into bed and waits, knowing she won't win this battle. A bitter wind howls outside, ..."
  },
  {
    "id": "caitlyn",
    "key": "51",
    "name": "Caitlyn",
    "title": "the Sheriff of Piltover",
    "tags": [
      "Marksman"
    ],
    "stats": {
      "hp": 524.4,
      "hpperlevel": 80,
      "mp": 313.7,
      "mpperlevel": 35,
      "movespeed": 325,
      "armor": 22.88,
      "armorperlevel": 3.5,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 650,
      "hpregen": 5.67,
      "hpregenperlevel": 0.55,
      "mpregen": 7.4,
      "mpregenperlevel": 0.55,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 53.66,
      "attackdamageperlevel": 2.18,
      "attackspeedoffset": 0.1,
      "attackspeedperlevel": 4
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Caitlyn.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion0.png",
      "x": 192,
      "y": 48
    },
    "description": "''Go ahead, run. I'll give you a five minute head start.''<br><br>One of the reasons Piltover is known as the City of Progress is because it has an extraordinarily low crime rate. This hasn't always been the case; brigands and thieves of all sorts ..."
  },
  {
    "id": "cassiopeia",
    "key": "69",
    "name": "Cassiopeia",
    "title": "the Serpent's Embrace",
    "tags": [
      "Mage"
    ],
    "stats": {
      "hp": 525,
      "hpperlevel": 75,
      "mp": 375,
      "mpperlevel": 60,
      "movespeed": 328,
      "armor": 25,
      "armorperlevel": 3.5,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 550,
      "hpregen": 5.5,
      "hpregenperlevel": 0.5,
      "mpregen": 6,
      "mpregenperlevel": 0.8,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 53,
      "attackdamageperlevel": 3,
      "attackspeedoffset": -0.034,
      "attackspeedperlevel": 1.5
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Cassiopeia.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion0.png",
      "x": 240,
      "y": 48
    },
    "description": "Cassiopeia is a terrifying creature - half woman, half snake - whose slightest glance brings death. The youngest daughter of one of Noxus' most influential families, she was once a beautiful and cunning temptress capable of manipulating the hardest ..."
  },
  {
    "id": "chogath",
    "key": "31",
    "name": "Cho'Gath",
    "title": "the Terror of the Void",
    "tags": [
      "Tank",
      "Mage"
    ],
    "stats": {
      "hp": 574.4,
      "hpperlevel": 80,
      "mp": 272.2,
      "mpperlevel": 40,
      "movespeed": 345,
      "armor": 28.88,
      "armorperlevel": 3.5,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 125,
      "hpregen": 8.925,
      "hpregenperlevel": 0.85,
      "mpregen": 7.205,
      "mpregenperlevel": 0.45,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 61.156,
      "attackdamageperlevel": 4.2,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 1.44
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Chogath.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion0.png",
      "x": 288,
      "y": 48
    },
    "description": "There is a place between dimensions, between worlds. To some it is known as the Outside, to others it is the Unknown. To those that truly know, however, it is called the Void. Despite its name, the Void is not an empty place, but rather the home of ..."
  },
  {
    "id": "corki",
    "key": "42",
    "name": "Corki",
    "title": "the Daring Bombardier",
    "tags": [
      "Marksman"
    ],
    "stats": {
      "hp": 512.76,
      "hpperlevel": 82,
      "mp": 350.16,
      "mpperlevel": 34,
      "movespeed": 325,
      "armor": 23.38,
      "armorperlevel": 3.5,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 550,
      "hpregen": 5.42,
      "hpregenperlevel": 0.55,
      "mpregen": 7.42,
      "mpregenperlevel": 0.55,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 56,
      "attackdamageperlevel": 3.5,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 2.3
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Corki.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion0.png",
      "x": 336,
      "y": 48
    },
    "description": "When Heimerdinger and his yordle colleagues migrated to Piltover, they embraced science as a way of life, and they immediately made several groundbreaking contributions to the techmaturgical community. What yordles lack in stature, they make up for ..."
  },
  {
    "id": "darius",
    "key": "122",
    "name": "Darius",
    "title": "the Hand of Noxus",
    "tags": [
      "Fighter",
      "Tank"
    ],
    "stats": {
      "hp": 582.24,
      "hpperlevel": 100,
      "mp": 263,
      "mpperlevel": 37.5,
      "movespeed": 340,
      "armor": 30,
      "armorperlevel": 4,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 175,
      "hpregen": 9.845,
      "hpregenperlevel": 0.95,
      "mpregen": 6.585,
      "mpregenperlevel": 0.35,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 56,
      "attackdamageperlevel": 5,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 1
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Darius.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion0.png",
      "x": 384,
      "y": 48
    },
    "description": "There is no greater symbol of Noxian might than Darius, the nation's most feared and battle-hardened warrior. Orphaned at a young age, Darius had to fight to keep himself and his younger brother alive. By the time he joined the military, he had ..."
  },
  {
    "id": "diana",
    "key": "131",
    "name": "Diana",
    "title": "Scorn of the Moon",
    "tags": [
      "Fighter",
      "Mage"
    ],
    "stats": {
      "hp": 589.2,
      "hpperlevel": 90,
      "mp": 297.2,
      "mpperlevel": 40,
      "movespeed": 345,
      "armor": 26.048,
      "armorperlevel": 3.6,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 150,
      "hpregen": 7.425,
      "hpregenperlevel": 0.85,
      "mpregen": 6,
      "mpregenperlevel": 0.8,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 53.04,
      "attackdamageperlevel": 3,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 2.25
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Diana.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion0.png",
      "x": 432,
      "y": 48
    },
    "description": "''I am the light coursing in the soul of the moon.''<br><br>Bearing her crescent moonblade, Diana fights as a warrior of the Lunari, a faith all but quashed in the lands around Mount Targon. Clad in shimmering armor the color of winter snow at night, ..."
  },
  {
    "id": "draven",
    "key": "119",
    "name": "Draven",
    "title": "the Glorious Executioner",
    "tags": [
      "Marksman"
    ],
    "stats": {
      "hp": 557.76,
      "hpperlevel": 82,
      "mp": 360.56,
      "mpperlevel": 39,
      "movespeed": 330,
      "armor": 25.544,
      "armorperlevel": 3.3,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 550,
      "hpregen": 6.175,
      "hpregenperlevel": 0.7,
      "mpregen": 8.04,
      "mpregenperlevel": 0.65,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 55.8,
      "attackdamageperlevel": 2.91,
      "attackspeedoffset": -0.08,
      "attackspeedperlevel": 2.7
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Draven.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion0.png",
      "x": 0,
      "y": 96
    },
    "description": "Unlike his brother Darius, victory in battle was never enough for Draven. He craved recognition, acclaim, and glory. He first sought greatness in the Noxian military, but his flair for the dramatic went severely underappreciated. Thirsting for a ..."
  },
  {
    "id": "drmundo",
    "key": "36",
    "name": "Dr. Mundo",
    "title": "the Madman of Zaun",
    "tags": [
      "Fighter",
      "Tank"
    ],
    "stats": {
      "hp": 582.52,
      "hpperlevel": 89,
      "mp": 0,
      "mpperlevel": 0,
      "movespeed": 345,
      "armor": 26.88,
      "armorperlevel": 3.5,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 125,
      "hpregen": 7.76,
      "hpregenperlevel": 0.75,
      "mpregen": 0,
      "mpregenperlevel": 0,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 61.27,
      "attackdamageperlevel": 3,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 2.8
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/DrMundo.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion0.png",
      "x": 48,
      "y": 96
    },
    "description": "''Beware the Madman of Zaun. In his eyes, you are already dead''<br><br>It is said that the man now known as Dr. Mundo was born without any sort of conscience. Instead, he had an unquenchable desire to inflict pain through experimentation. By the time ..."
  },
  {
    "id": "ekko",
    "key": "245",
    "name": "Ekko",
    "title": "the Boy Who Shattered Time",
    "tags": [
      "Assassin",
      "Fighter"
    ],
    "stats": {
      "hp": 580,
      "hpperlevel": 80,
      "mp": 280,
      "mpperlevel": 50,
      "movespeed": 340,
      "armor": 27,
      "armorperlevel": 3,
      "spellblock": 32,
      "spellblockperlevel": 1.25,
      "attackrange": 125,
      "hpregen": 9,
      "hpregenperlevel": 0.9,
      "mpregen": 6,
      "mpregenperlevel": 0.8,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 55,
      "attackdamageperlevel": 3,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 3.3
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Ekko.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion0.png",
      "x": 96,
      "y": 96
    },
    "description": "A prodigy from the rough streets of Zaun, Ekko manipulates time to spin any situation to his advantage. Using his own invention, the Zero-Drive, he explores the branching possibilities of reality. As well as experimenting with multi-dimensional ..."
  },
  {
    "id": "elise",
    "key": "60",
    "name": "Elise",
    "title": "the Spider Queen",
    "tags": [
      "Mage",
      "Fighter"
    ],
    "stats": {
      "hp": 529.4,
      "hpperlevel": 80,
      "mp": 324,
      "mpperlevel": 50,
      "movespeed": 325,
      "armor": 22.128,
      "armorperlevel": 3.35,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 550,
      "hpregen": 5.705,
      "hpregenperlevel": 0.6,
      "mpregen": 6,
      "mpregenperlevel": 0.8,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 50.54,
      "attackdamageperlevel": 3,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 1.75
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Elise.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion0.png",
      "x": 144,
      "y": 96
    },
    "description": "''Beauty is power too, and can strike swifter than any sword.''<br><br>Elise is a deadly predator who dwells in a shuttered, lightless palace, deep in the Immortal Bastion of Noxus. Once she was mortal, the mistress of a once-powerful house, but the ..."
  },
  {
    "id": "evelynn",
    "key": "28",
    "name": "Evelynn",
    "title": "the Widowmaker",
    "tags": [
      "Assassin",
      "Mage"
    ],
    "stats": {
      "hp": 531.2,
      "hpperlevel": 90,
      "mp": 315.6,
      "mpperlevel": 42,
      "movespeed": 340,
      "armor": 26.5,
      "armorperlevel": 3.8,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 125,
      "hpregen": 9.82,
      "hpregenperlevel": 0.55,
      "mpregen": 8.105,
      "mpregenperlevel": 0.6,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 53.88,
      "attackdamageperlevel": 3.5,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 3.6
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Evelynn.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion0.png",
      "x": 192,
      "y": 96
    },
    "description": "Swift and lethal, Evelynn is one of the most deadly - and expensive - assassins in all of Runeterra. Able to merge with the shadows at will, she patiently stalks her prey, waiting for the right moment to strike. While Evelynn is clearly not entirely ..."
  },
  {
    "id": "ezreal",
    "key": "81",
    "name": "Ezreal",
    "title": "the Prodigal Explorer",
    "tags": [
      "Marksman",
      "Mage"
    ],
    "stats": {
      "hp": 484.4,
      "hpperlevel": 80,
      "mp": 360.6,
      "mpperlevel": 42,
      "movespeed": 325,
      "armor": 21.88,
      "armorperlevel": 3.5,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 550,
      "hpregen": 6.42,
      "hpregenperlevel": 0.55,
      "mpregen": 8.09,
      "mpregenperlevel": 0.65,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 55.66,
      "attackdamageperlevel": 2.41,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 2.8
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Ezreal.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion0.png",
      "x": 240,
      "y": 96
    },
    "description": "The intrepid young adventurer Ezreal has explored some of the most remote and abandoned locations on Runeterra. During an expedition to the buried ruins of ancient Shurima, he recovered an amulet of incredible mystical power. Likely constructed to be ..."
  },
  {
    "id": "fiddlesticks",
    "key": "9",
    "name": "Fiddlesticks",
    "title": "the Harbinger of Doom",
    "tags": [
      "Mage",
      "Support"
    ],
    "stats": {
      "hp": 524.4,
      "hpperlevel": 80,
      "mp": 400.12,
      "mpperlevel": 56,
      "movespeed": 335,
      "armor": 20.88,
      "armorperlevel": 3.5,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 480,
      "hpregen": 5.605,
      "hpregenperlevel": 0.6,
      "mpregen": 6,
      "mpregenperlevel": 0.8,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 48.36,
      "attackdamageperlevel": 2.625,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 2.11
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/FiddleSticks.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion0.png",
      "x": 288,
      "y": 96
    },
    "description": "For nearly twenty years, Fiddlesticks has stood alone in the easternmost summoning chamber of the Institute of War. Only the burning emerald light of his unearthly gaze pierces the musty darkness of his dust-covered home. It is here that the Harbinger ..."
  },
  {
    "id": "fiora",
    "key": "114",
    "name": "Fiora",
    "title": "the Grand Duelist",
    "tags": [
      "Fighter",
      "Assassin"
    ],
    "stats": {
      "hp": 550,
      "hpperlevel": 85,
      "mp": 300,
      "mpperlevel": 40,
      "movespeed": 345,
      "armor": 24,
      "armorperlevel": 3.5,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 150,
      "hpregen": 8.25,
      "hpregenperlevel": 0.55,
      "mpregen": 8,
      "mpregenperlevel": 0.7,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 60,
      "attackdamageperlevel": 3.3,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 3.2
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Fiora.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion0.png",
      "x": 336,
      "y": 96
    },
    "description": "''I have come to kill you for the sake of honor. And though you possess none, still you die.''<br>The most feared duelist in all Valoran, Fiora is as renowned for her brusque manner and cunning mind as she is for the speed of her bluesteel rapier. ..."
  },
  {
    "id": "fizz",
    "key": "105",
    "name": "Fizz",
    "title": "the Tidal Trickster",
    "tags": [
      "Assassin",
      "Fighter"
    ],
    "stats": {
      "hp": 558.48,
      "hpperlevel": 86,
      "mp": 317.2,
      "mpperlevel": 37,
      "movespeed": 335,
      "armor": 22.412,
      "armorperlevel": 3.4,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 175,
      "hpregen": 8.175,
      "hpregenperlevel": 0.7,
      "mpregen": 6,
      "mpregenperlevel": 0.8,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 58.04,
      "attackdamageperlevel": 3,
      "attackspeedoffset": -0.05,
      "attackspeedperlevel": 3.1
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Fizz.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion0.png",
      "x": 384,
      "y": 96
    },
    "description": "Centuries ago, an ancient water-dwelling race built a hidden city beneath a mountain in the sea. Though these creatures had their enemies, the city was an impenetrable fortress, and, in the safety it provided, they grew complacent. Fizz, however, ..."
  },
  {
    "id": "galio",
    "key": "3",
    "name": "Galio",
    "title": "the Sentinel's Sorrow",
    "tags": [
      "Tank",
      "Mage"
    ],
    "stats": {
      "hp": 577.8,
      "hpperlevel": 85,
      "mp": 369,
      "mpperlevel": 47,
      "movespeed": 335,
      "armor": 26.88,
      "armorperlevel": 3.5,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 125,
      "hpregen": 8.71,
      "hpregenperlevel": 0.75,
      "mpregen": 6,
      "mpregenperlevel": 0.8,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 61.97,
      "attackdamageperlevel": 3.375,
      "attackspeedoffset": -0.02,
      "attackspeedperlevel": 1.2
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Galio.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion0.png",
      "x": 432,
      "y": 96
    },
    "description": "''There is no such thing as redemption. Only penance.''<br><br>Long before the regulation of magic, mages experimented with the creation of artificial life. Now forbidden, instilling golems with reason was once not so uncommon a practice amongst the ..."
  },
  {
    "id": "gangplank",
    "key": "41",
    "name": "Gangplank",
    "title": "the Saltwater Scourge",
    "tags": [
      "Fighter"
    ],
    "stats": {
      "hp": 540,
      "hpperlevel": 82,
      "mp": 282,
      "mpperlevel": 40,
      "movespeed": 345,
      "armor": 26,
      "armorperlevel": 3,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 125,
      "hpregen": 6,
      "hpregenperlevel": 0.6,
      "mpregen": 7.5,
      "mpregenperlevel": 0.7,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 56,
      "attackdamageperlevel": 3,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 3.2
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Gangplank.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion1.png",
      "x": 0,
      "y": 0
    },
    "description": "''I was cutting throats and sinking Noxian war galleys when you were still pissing your britches, boy. You don't want to take me on.''<br><br>As unpredictable as he is brutal, the dethroned reaver king known as Gangplank is feared far and wide. Where ..."
  },
  {
    "id": "garen",
    "key": "86",
    "name": "Garen",
    "title": "The Might of Demacia",
    "tags": [
      "Fighter",
      "Tank"
    ],
    "stats": {
      "hp": 616.28,
      "hpperlevel": 84.25,
      "mp": 0,
      "mpperlevel": 0,
      "movespeed": 340,
      "armor": 27.536,
      "armorperlevel": 3,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 175,
      "hpregen": 7.84,
      "hpregenperlevel": 0.5,
      "mpregen": 0,
      "mpregenperlevel": 0,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 57.88,
      "attackdamageperlevel": 4.5,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 2.9
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Garen.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion1.png",
      "x": 48,
      "y": 0
    },
    "description": "Throughout Valoran, the resolve of Demacia's military is alternately celebrated or despised, but always respected. Their ''zero tolerance'' moral code is strictly upheld by civilians and soldiers alike. In combat, this means Demacian troops may not ..."
  },
  {
    "id": "gnar",
    "key": "150",
    "name": "Gnar",
    "title": "the Missing Link",
    "tags": [
      "Fighter",
      "Tank"
    ],
    "stats": {
      "hp": 540,
      "hpperlevel": 65,
      "mp": 100,
      "mpperlevel": 0,
      "movespeed": 325,
      "armor": 23,
      "armorperlevel": 2.5,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 175,
      "hpregen": 2.5,
      "hpregenperlevel": 0.5,
      "mpregen": 0,
      "mpregenperlevel": 0,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 51,
      "attackdamageperlevel": 3,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 6
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Gnar.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion1.png",
      "x": 96,
      "y": 0
    },
    "description": "The jungle does not forgive blindness. Every broken branch tells a story.<br><br>I've hunted every creature this jungle has to offer. I was certain there were no challenges left here, but now there is something new. Each track is the size of a ..."
  },
  {
    "id": "gragas",
    "key": "79",
    "name": "Gragas",
    "title": "the Rabble Rouser",
    "tags": [
      "Fighter",
      "Mage"
    ],
    "stats": {
      "hp": 583.52,
      "hpperlevel": 89,
      "mp": 400,
      "mpperlevel": 47,
      "movespeed": 330,
      "armor": 26.048,
      "armorperlevel": 3.6,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 125,
      "hpregen": 5.5,
      "hpregenperlevel": 0.5,
      "mpregen": 6,
      "mpregenperlevel": 0.8,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 61.38,
      "attackdamageperlevel": 3.5,
      "attackspeedoffset": -0.04,
      "attackspeedperlevel": 2.05
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Gragas.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion1.png",
      "x": 144,
      "y": 0
    },
    "description": "The only thing more important to Gragas than fighting is drinking. His unquenchable thirst for stronger ale has led him in search of the most potent and unconventional ingredients to toss in his still. Impulsive and unpredictable, this rowdy carouser ..."
  },
  {
    "id": "graves",
    "key": "104",
    "name": "Graves",
    "title": "the Outlaw",
    "tags": [
      "Marksman"
    ],
    "stats": {
      "hp": 551.12,
      "hpperlevel": 84,
      "mp": 322.2,
      "mpperlevel": 40,
      "movespeed": 340,
      "armor": 24.376,
      "armorperlevel": 3.4,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 425,
      "hpregen": 6.675,
      "hpregenperlevel": 0.7,
      "mpregen": 7.9,
      "mpregenperlevel": 0.7,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 60.83,
      "attackdamageperlevel": 2.41,
      "attackspeedoffset": 0.3,
      "attackspeedperlevel": 2.6
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Graves.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion1.png",
      "x": 192,
      "y": 0
    },
    "description": "Malcolm Graves is a wanted man in every realm, city and empire he has visited. Tough, strong-willed, and above all, relentless, through his life of crime he has amassed (then invariably lost) a small fortune."
  },
  {
    "id": "hecarim",
    "key": "120",
    "name": "Hecarim",
    "title": "the Shadow of War",
    "tags": [
      "Fighter",
      "Tank"
    ],
    "stats": {
      "hp": 580,
      "hpperlevel": 90,
      "mp": 277.2,
      "mpperlevel": 40,
      "movespeed": 345,
      "armor": 26.72,
      "armorperlevel": 4,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 175,
      "hpregen": 7,
      "hpregenperlevel": 0.75,
      "mpregen": 6.5,
      "mpregenperlevel": 0.6,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 58,
      "attackdamageperlevel": 3.2,
      "attackspeedoffset": -0.0672,
      "attackspeedperlevel": 2.5
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Hecarim.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion1.png",
      "x": 240,
      "y": 0
    },
    "description": "''Break their ranks and ride them down without mercy. Crush the living and feast on their terror.''<br><br>Hecarim is an armored colossus who charges from the Shadow Isles at the head of a deathly host of spectral horsemen to hunt the living. A ..."
  },
  {
    "id": "heimerdinger",
    "key": "74",
    "name": "Heimerdinger",
    "title": "the Revered Inventor",
    "tags": [
      "Mage",
      "Support"
    ],
    "stats": {
      "hp": 476,
      "hpperlevel": 75,
      "mp": 307.2,
      "mpperlevel": 40,
      "movespeed": 340,
      "armor": 19.04,
      "armorperlevel": 3,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 550,
      "hpregen": 11.005,
      "hpregenperlevel": 1.75,
      "mpregen": 6,
      "mpregenperlevel": 0.8,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 55.536,
      "attackdamageperlevel": 2.7,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 1.36
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Heimerdinger.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion1.png",
      "x": 288,
      "y": 0
    },
    "description": "From the Journal of Professor Cecil B. Heimerdinger<br><br>10.14<br><br>09:15<br><br>Current meteorological conditions in Bandle City seem optimal. Atmospheric pressure is ideal for today's experiments!<br><br>Running a fifth trial for my ..."
  },
  {
    "id": "illaoi",
    "key": "420",
    "name": "Illaoi",
    "title": "the Kraken Priestess",
    "tags": [
      "Fighter",
      "Tank"
    ],
    "stats": {
      "hp": 585.6,
      "hpperlevel": 95,
      "mp": 300,
      "mpperlevel": 40,
      "movespeed": 340,
      "armor": 26,
      "armorperlevel": 3.8,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 125,
      "hpregen": 9.5,
      "hpregenperlevel": 0.8,
      "mpregen": 7.5,
      "mpregenperlevel": 0.75,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 60,
      "attackdamageperlevel": 5,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 2.5
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Illaoi.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion1.png",
      "x": 336,
      "y": 0
    },
    "description": "''I'm not big on sermons. Broken bones teach better lessons.''<br>Illaoi's powerful physique is dwarfed only by her indomitable faith. As the prophet of the Great Kraken, she uses a huge, golden idol to rip her foes' spirits from their bodies and ..."
  },
  {
    "id": "irelia",
    "key": "39",
    "name": "Irelia",
    "title": "the Will of the Blades",
    "tags": [
      "Fighter",
      "Assassin"
    ],
    "stats": {
      "hp": 607.2,
      "hpperlevel": 90,
      "mp": 338.8,
      "mpperlevel": 32,
      "movespeed": 345,
      "armor": 25.3,
      "armorperlevel": 3.75,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 125,
      "hpregen": 8.59,
      "hpregenperlevel": 0.65,
      "mpregen": 8.1,
      "mpregenperlevel": 0.65,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 61.544,
      "attackdamageperlevel": 3.3,
      "attackspeedoffset": -0.06,
      "attackspeedperlevel": 3.2
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Irelia.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion1.png",
      "x": 384,
      "y": 0
    },
    "description": "''The sword flourishes, as though painting with blood.''<br><br>The Ionians have developed some of the most breathtaking and deadly martial arts in all of Runeterra - just one manifestation of their pursuit of enlightenment. The most remarkable blade ..."
  },
  {
    "id": "ivern",
    "key": "427",
    "name": "Ivern",
    "title": "the Green Father",
    "tags": [
      "Support",
      "Mage"
    ],
    "stats": {
      "hp": 580,
      "hpperlevel": 90,
      "mp": 450,
      "mpperlevel": 60,
      "movespeed": 330,
      "armor": 22,
      "armorperlevel": 3.5,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 125,
      "hpregen": 6.9,
      "hpregenperlevel": 0.85,
      "mpregen": 6,
      "mpregenperlevel": 0.75,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 50,
      "attackdamageperlevel": 3,
      "attackspeedoffset": -0.03,
      "attackspeedperlevel": 3.4
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Ivern.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion4.png",
      "x": 96,
      "y": 48
    },
    "description": "Ivern Bramblefoot, known to many as the Green Father, is a peculiar half man, half tree who roams Runeterra's forests, cultivating life everywhere he goes. He knows the secrets of the natural world, and holds deep friendships with all things that grow,..."
  },
  {
    "id": "janna",
    "key": "40",
    "name": "Janna",
    "title": "the Storm's Fury",
    "tags": [
      "Support",
      "Mage"
    ],
    "stats": {
      "hp": 487.04,
      "hpperlevel": 78,
      "mp": 409.52,
      "mpperlevel": 64,
      "movespeed": 335,
      "armor": 19.384,
      "armorperlevel": 3.8,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 475,
      "hpregen": 5.42,
      "hpregenperlevel": 0.55,
      "mpregen": 11.5,
      "mpregenperlevel": 0.4,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 51.956,
      "attackdamageperlevel": 2.95,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 2.61
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Janna.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion1.png",
      "x": 432,
      "y": 0
    },
    "description": "There are those sorcerers who give themselves over to the primal powers of nature, forgoing the learned practice of magic. Such a sorceress is Janna, who first learned magic as an orphan growing up amidst the chaos that is the city-state of Zaun. ..."
  },
  {
    "id": "jarvaniv",
    "key": "59",
    "name": "Jarvan IV",
    "title": "the Exemplar of Demacia",
    "tags": [
      "Tank",
      "Fighter"
    ],
    "stats": {
      "hp": 571.2,
      "hpperlevel": 90,
      "mp": 302.2,
      "mpperlevel": 40,
      "movespeed": 340,
      "armor": 29,
      "armorperlevel": 3.6,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 175,
      "hpregen": 8.175,
      "hpregenperlevel": 0.7,
      "mpregen": 6.755,
      "mpregenperlevel": 0.45,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 55.712,
      "attackdamageperlevel": 3.4,
      "attackspeedoffset": -0.05,
      "attackspeedperlevel": 2.5
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/JarvanIV.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion1.png",
      "x": 0,
      "y": 48
    },
    "description": "''There is only one truth, and you will find it at the point of my lance.''<br><br>As the royal family of Demacia for centuries, members of the Lightshield line have spent their lives waging war against any who opposed Demacian ethics. It is said that ..."
  },
  {
    "id": "jax",
    "key": "24",
    "name": "Jax",
    "title": "Grandmaster at Arms",
    "tags": [
      "Fighter",
      "Assassin"
    ],
    "stats": {
      "hp": 592.8,
      "hpperlevel": 85,
      "mp": 338.8,
      "mpperlevel": 32,
      "movespeed": 350,
      "armor": 27.04,
      "armorperlevel": 3,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 125,
      "hpregen": 8.37,
      "hpregenperlevel": 0.55,
      "mpregen": 7.575,
      "mpregenperlevel": 0.7,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 61.97,
      "attackdamageperlevel": 3.375,
      "attackspeedoffset": -0.02,
      "attackspeedperlevel": 3.4
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Jax.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion1.png",
      "x": 48,
      "y": 48
    },
    "description": "It is seldom the case where a champion is defined by his actions after joining the League of Legends rather than before. Such is the case with Jax, for whom the argument could be made that he is the most prolific tournament fighter currently at the ..."
  },
  {
    "id": "jayce",
    "key": "126",
    "name": "Jayce",
    "title": "the Defender of Tomorrow",
    "tags": [
      "Fighter",
      "Marksman"
    ],
    "stats": {
      "hp": 571.2,
      "hpperlevel": 90,
      "mp": 357.2,
      "mpperlevel": 37,
      "movespeed": 335,
      "armor": 22.38,
      "armorperlevel": 3.5,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 125,
      "hpregen": 7.34,
      "hpregenperlevel": 0.8,
      "mpregen": 6,
      "mpregenperlevel": 0.8,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 50.38,
      "attackdamageperlevel": 3.5,
      "attackspeedoffset": -0.05,
      "attackspeedperlevel": 3
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Jayce.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion1.png",
      "x": 96,
      "y": 48
    },
    "description": "Armed with wit, charm, and his signature transforming hammer, Jayce lives to protect his native Piltover. Long before his nation called him a hero, however, he was a promising young inventor. When Piltover commissioned him to study a rare arcane ..."
  },
  {
    "id": "jhin",
    "key": "202",
    "name": "Jhin",
    "title": "the Virtuoso",
    "tags": [
      "Marksman",
      "Assassin"
    ],
    "stats": {
      "hp": 540,
      "hpperlevel": 85,
      "mp": 300,
      "mpperlevel": 50,
      "movespeed": 330,
      "armor": 20,
      "armorperlevel": 3.5,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 550,
      "hpregen": 6,
      "hpregenperlevel": 0.55,
      "mpregen": 6,
      "mpregenperlevel": 0.8,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 53,
      "attackdamageperlevel": 4,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 0
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Jhin.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion1.png",
      "x": 144,
      "y": 48
    },
    "description": "''Art requires a certain...cruelty.''<br><br>Jhin is a meticulous criminal psychopath who believes murder is art. Once an Ionian prisoner, but freed by shadowy elements within Ionia's ruling council, the serial killer now works as their cabal's ..."
  },
  {
    "id": "jinx",
    "key": "222",
    "name": "Jinx",
    "title": "the Loose Cannon",
    "tags": [
      "Marksman"
    ],
    "stats": {
      "hp": 517.76,
      "hpperlevel": 82,
      "mp": 245.6,
      "mpperlevel": 45,
      "movespeed": 325,
      "armor": 22.88,
      "armorperlevel": 3.5,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 525,
      "hpregen": 5.84,
      "hpregenperlevel": 0.5,
      "mpregen": 6.68,
      "mpregenperlevel": 1,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 58.46,
      "attackdamageperlevel": 2.41,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 1
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Jinx.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion1.png",
      "x": 192,
      "y": 48
    },
    "description": "Jinx lives to wreak havoc without a thought for the consequences, leaving a trail of mayhem and panic in her wake. A manic and impulsive criminal, she despises nothing more than boredom, and gleefully brings her own volatile brand of pandemonium to ..."
  },
  {
    "id": "kalista",
    "key": "429",
    "name": "Kalista",
    "title": "the Spear of Vengeance",
    "tags": [
      "Marksman"
    ],
    "stats": {
      "hp": 517.76,
      "hpperlevel": 83,
      "mp": 231.8,
      "mpperlevel": 35,
      "movespeed": 325,
      "armor": 19.012,
      "armorperlevel": 3.5,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 550,
      "hpregen": 6,
      "hpregenperlevel": 0.55,
      "mpregen": 6.3,
      "mpregenperlevel": 0.4,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 63,
      "attackdamageperlevel": 2.9,
      "attackspeedoffset": -0.03,
      "attackspeedperlevel": 2.5
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Kalista.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion1.png",
      "x": 240,
      "y": 48
    },
    "description": "''When wronged, we seek justice. When hurt, we strike back. When betrayed, the Spear of Vengeance strikes!''<br><br>A specter of wrath and retribution, Kalista is the undying spirit of vengeance, an armored nightmare summoned from the Shadow Isles to ..."
  },
  {
    "id": "karma",
    "key": "43",
    "name": "Karma",
    "title": "the Enlightened One",
    "tags": [
      "Mage",
      "Support"
    ],
    "stats": {
      "hp": 522.44,
      "hpperlevel": 83,
      "mp": 374,
      "mpperlevel": 50,
      "movespeed": 335,
      "armor": 20.384,
      "armorperlevel": 3.8,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 525,
      "hpregen": 5.62,
      "hpregenperlevel": 0.55,
      "mpregen": 8.5,
      "mpregenperlevel": 0.8,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 53.544,
      "attackdamageperlevel": 3.3,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 2.3
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Karma.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion1.png",
      "x": 288,
      "y": 48
    },
    "description": "Karma is a woman of indomitable will and unbound spiritual power. She is the soul of Ionia made manifest and an inspiring presence on the battlefield, shielding her allies and turning back her foes. A strong leader torn between tradition and ..."
  },
  {
    "id": "karthus",
    "key": "30",
    "name": "Karthus",
    "title": "the Deathsinger",
    "tags": [
      "Mage"
    ],
    "stats": {
      "hp": 516,
      "hpperlevel": 75,
      "mp": 372.48,
      "mpperlevel": 61,
      "movespeed": 335,
      "armor": 20.88,
      "armorperlevel": 3.5,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 450,
      "hpregen": 6.42,
      "hpregenperlevel": 0.55,
      "mpregen": 6,
      "mpregenperlevel": 0.8,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 45.66,
      "attackdamageperlevel": 3.25,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 2.11
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Karthus.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion1.png",
      "x": 336,
      "y": 48
    },
    "description": "''Death is not the end of the journey, it is just the beginning...''<br><br>The harbinger of oblivion, Karthus is an undying spirit whose haunting songs are a prelude to the horror of his nightmarish appearance. The living fear the eternity of undeath,..."
  },
  {
    "id": "kassadin",
    "key": "38",
    "name": "Kassadin",
    "title": "the Void Walker",
    "tags": [
      "Assassin",
      "Mage"
    ],
    "stats": {
      "hp": 564.04,
      "hpperlevel": 78,
      "mp": 397.6,
      "mpperlevel": 67,
      "movespeed": 340,
      "armor": 23.376,
      "armorperlevel": 3.2,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 150,
      "hpregen": 7.79,
      "hpregenperlevel": 0.5,
      "mpregen": 6,
      "mpregenperlevel": 0.8,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 58.852,
      "attackdamageperlevel": 3.9,
      "attackspeedoffset": -0.023,
      "attackspeedperlevel": 3.7
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Kassadin.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion1.png",
      "x": 384,
      "y": 48
    },
    "description": "There is a place between dimensions and between worlds. To some it is known as the Outside, to others it is the Unknown. To most, however, it is called the Void. Despite its name, the Void is not an empty place, but rather the home of unspeakable ..."
  },
  {
    "id": "katarina",
    "key": "55",
    "name": "Katarina",
    "title": "the Sinister Blade",
    "tags": [
      "Assassin",
      "Mage"
    ],
    "stats": {
      "hp": 510,
      "hpperlevel": 83,
      "mp": 0,
      "mpperlevel": 0,
      "movespeed": 345,
      "armor": 26.88,
      "armorperlevel": 3.5,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 125,
      "hpregen": 4.5,
      "hpregenperlevel": 0.55,
      "mpregen": 0,
      "mpregenperlevel": 0,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 58,
      "attackdamageperlevel": 3.2,
      "attackspeedoffset": -0.05,
      "attackspeedperlevel": 2.74
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Katarina.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion1.png",
      "x": 432,
      "y": 48
    },
    "description": "Driven by an intense killer instinct, Katarina uses her talents as an assassin for the glory of Noxus, and the continued elevation of her family. While her fervor drives her to ever-greater feats, it can sometimes lead her astray.<br><br>From ..."
  },
  {
    "id": "kayle",
    "key": "10",
    "name": "Kayle",
    "title": "The Judicator",
    "tags": [
      "Fighter",
      "Support"
    ],
    "stats": {
      "hp": 574.24,
      "hpperlevel": 93,
      "mp": 322.2,
      "mpperlevel": 40,
      "movespeed": 335,
      "armor": 26.88,
      "armorperlevel": 3.5,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 125,
      "hpregen": 8.26,
      "hpregenperlevel": 0.75,
      "mpregen": 6,
      "mpregenperlevel": 0.8,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 51,
      "attackdamageperlevel": 2.8,
      "attackspeedoffset": -0.02,
      "attackspeedperlevel": 2.2
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Kayle.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion1.png",
      "x": 0,
      "y": 96
    },
    "description": "In a world far away where an ancient war still rages, Kayle was a great hero - the strongest of an immortal race committed to destroying evil wherever it could be found. For ten thousand years, Kayle fought tirelessly for her people, wielding her ..."
  },
  {
    "id": "kennen",
    "key": "85",
    "name": "Kennen",
    "title": "the Heart of the Tempest",
    "tags": [
      "Mage",
      "Marksman"
    ],
    "stats": {
      "hp": 535.72,
      "hpperlevel": 79,
      "mp": 200,
      "mpperlevel": 0,
      "movespeed": 335,
      "armor": 24.3,
      "armorperlevel": 3.75,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 550,
      "hpregen": 5.59,
      "hpregenperlevel": 0.65,
      "mpregen": 50,
      "mpregenperlevel": 0,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 50.544,
      "attackdamageperlevel": 3.3,
      "attackspeedoffset": -0.0947,
      "attackspeedperlevel": 3.4
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Kennen.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion1.png",
      "x": 48,
      "y": 96
    },
    "description": "There exists an ancient order originating in the Ionian Isles dedicated to the preservation of balance. Order, chaos, light, darkness -- all things must exist in perfect harmony for such is the way of the universe. This order is known as the Kinkou ..."
  },
  {
    "id": "khazix",
    "key": "121",
    "name": "Kha'Zix",
    "title": "the Voidreaver",
    "tags": [
      "Assassin",
      "Fighter"
    ],
    "stats": {
      "hp": 572.8,
      "hpperlevel": 85,
      "mp": 327.2,
      "mpperlevel": 40,
      "movespeed": 350,
      "armor": 27,
      "armorperlevel": 3,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 125,
      "hpregen": 7.51,
      "hpregenperlevel": 0.75,
      "mpregen": 7.59,
      "mpregenperlevel": 0.5,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 55.208,
      "attackdamageperlevel": 3.1,
      "attackspeedoffset": -0.065,
      "attackspeedperlevel": 2.7
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Khazix.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion1.png",
      "x": 96,
      "y": 96
    },
    "description": "A vicious Void predator, Kha'Zix infiltrated Valoran to devour the land's most promising creatures. With each kill he absorbs his prey's strength, evolving to grow more powerful. Kha'Zix hungers most to conquer and consume Rengar, the one beast he ..."
  },
  {
    "id": "kindred",
    "key": "203",
    "name": "Kindred",
    "title": "The Eternal Hunters",
    "tags": [
      "Marksman"
    ],
    "stats": {
      "hp": 540,
      "hpperlevel": 85,
      "mp": 300,
      "mpperlevel": 35,
      "movespeed": 325,
      "armor": 20,
      "armorperlevel": 3.5,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 500,
      "hpregen": 7,
      "hpregenperlevel": 0.55,
      "mpregen": 6.97,
      "mpregenperlevel": 0.4,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 54,
      "attackdamageperlevel": 1.7,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 2.5
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Kindred.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion1.png",
      "x": 144,
      "y": 96
    },
    "description": "''Tell me again, little Lamb, which things are ours to take?''<br>''All things, Dear Wolf.''<br>Separate, but never parted, Kindred represents the twin essences of death. Lamb's arrow offers a swift release for those who accept their fate. Wolf hunts ..."
  },
  {
    "id": "kled",
    "key": "240",
    "name": "Kled",
    "title": "the Cantankerous Cavalier",
    "tags": [
      "Fighter",
      "Tank"
    ],
    "stats": {
      "hp": 340,
      "hpperlevel": 70,
      "mp": 100,
      "mpperlevel": 0,
      "movespeed": 345,
      "armor": 26,
      "armorperlevel": 4,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 125,
      "hpregen": 6,
      "hpregenperlevel": 0.75,
      "mpregen": 0,
      "mpregenperlevel": 0,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 55,
      "attackdamageperlevel": 3,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 3.5
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Kled.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion4.png",
      "x": 48,
      "y": 48
    },
    "description": "''A sane man would run . . . but I ain't the runnin' kind!''<br><br>A warrior as fearless as he is ornery, Kled is a popular folk hero in Noxus. Embodying the furious bravado of his nation, he is an icon beloved by the empire's soldiers, distrusted by ..."
  },
  {
    "id": "kogmaw",
    "key": "96",
    "name": "Kog'Maw",
    "title": "the Mouth of the Abyss",
    "tags": [
      "Marksman",
      "Mage"
    ],
    "stats": {
      "hp": 517.76,
      "hpperlevel": 82,
      "mp": 322.2,
      "mpperlevel": 40,
      "movespeed": 325,
      "armor": 19.88,
      "armorperlevel": 3.5,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 500,
      "hpregen": 5.92,
      "hpregenperlevel": 0.55,
      "mpregen": 8.675,
      "mpregenperlevel": 0.7,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 57.46,
      "attackdamageperlevel": 2.41,
      "attackspeedoffset": -0.06,
      "attackspeedperlevel": 2.65
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/KogMaw.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion1.png",
      "x": 192,
      "y": 96
    },
    "description": "''If that's just hungry, I don't want to see angry.''<br><br>When the prophet Malzahar was reborn in Icathia, he was led there by an ominous voice which thereafter anchored itself to his psyche. From within, this voice bestowed upon him terrible ..."
  },
  {
    "id": "leblanc",
    "key": "7",
    "name": "LeBlanc",
    "title": "the Deceiver",
    "tags": [
      "Assassin",
      "Mage"
    ],
    "stats": {
      "hp": 516,
      "hpperlevel": 75,
      "mp": 334,
      "mpperlevel": 50,
      "movespeed": 335,
      "armor": 21.88,
      "armorperlevel": 3.5,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 525,
      "hpregen": 7.42,
      "hpregenperlevel": 0.55,
      "mpregen": 6,
      "mpregenperlevel": 0.8,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 54.88,
      "attackdamageperlevel": 3.5,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 1.4
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Leblanc.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion1.png",
      "x": 240,
      "y": 96
    },
    "description": "Every city has its dark side, even one whose reputation is already of a questionable hue. Noxus - though its name is already invoked with a mixture of reverence and revulsion - is no exception to this simple truth. Deep within the winding dungeons ..."
  },
  {
    "id": "leesin",
    "key": "64",
    "name": "Lee Sin",
    "title": "the Blind Monk",
    "tags": [
      "Fighter",
      "Assassin"
    ],
    "stats": {
      "hp": 570.8,
      "hpperlevel": 85,
      "mp": 200,
      "mpperlevel": 0,
      "movespeed": 350,
      "armor": 24.216,
      "armorperlevel": 3.7,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 125,
      "hpregen": 7.425,
      "hpregenperlevel": 0.7,
      "mpregen": 50,
      "mpregenperlevel": 0,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 61.176,
      "attackdamageperlevel": 3.2,
      "attackspeedoffset": -0.04,
      "attackspeedperlevel": 3
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/LeeSin.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion1.png",
      "x": 288,
      "y": 96
    },
    "description": "As a young teen, Lee Sin was intent on becoming a summoner. His will and dedication were unmatched by any of his peers, and his skill drew the attention of Reginald Ashram, the League's High Councilor at the time. While studying at the Arcanum Majoris,..."
  },
  {
    "id": "leona",
    "key": "89",
    "name": "Leona",
    "title": "the Radiant Dawn",
    "tags": [
      "Tank",
      "Support"
    ],
    "stats": {
      "hp": 576.16,
      "hpperlevel": 87,
      "mp": 302.2,
      "mpperlevel": 40,
      "movespeed": 335,
      "armor": 27.208,
      "armorperlevel": 3.6,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 125,
      "hpregen": 8.425,
      "hpregenperlevel": 0.85,
      "mpregen": 6,
      "mpregenperlevel": 0.8,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 60.04,
      "attackdamageperlevel": 3,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 2.9
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Leona.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion1.png",
      "x": 336,
      "y": 96
    },
    "description": "''If you would shine like a sun, first you must burn like one.''<br><br>Imbued with the fire of the sun, Leona is a warrior templar of the Solari who defends Mount Targon with her Zenith Blade and Shield of Daybreak. Her skin shimmers with starfire ..."
  },
  {
    "id": "lissandra",
    "key": "127",
    "name": "Lissandra",
    "title": "the Ice Witch",
    "tags": [
      "Mage"
    ],
    "stats": {
      "hp": 506.12,
      "hpperlevel": 75,
      "mp": 304,
      "mpperlevel": 50,
      "movespeed": 325,
      "armor": 20.216,
      "armorperlevel": 3.7,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 550,
      "hpregen": 6.92,
      "hpregenperlevel": 0.55,
      "mpregen": 5.67,
      "mpregenperlevel": 0.4,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 50.536,
      "attackdamageperlevel": 2.7,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 1.36
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Lissandra.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion1.png",
      "x": 384,
      "y": 96
    },
    "description": "Lissandra's magic twists the pure power of ice into something dark and terrible. With the force of her black ice, she does more than freeze - she impales and crushes those who oppose her. To the terrified denizens of the north, she is known only as ..."
  },
  {
    "id": "lucian",
    "key": "236",
    "name": "Lucian",
    "title": "the Purifier",
    "tags": [
      "Marksman"
    ],
    "stats": {
      "hp": 554.4,
      "hpperlevel": 80,
      "mp": 348.88,
      "mpperlevel": 38,
      "movespeed": 335,
      "armor": 24.04,
      "armorperlevel": 3,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 500,
      "hpregen": 6.19,
      "hpregenperlevel": 0.65,
      "mpregen": 8.175,
      "mpregenperlevel": 0.7,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 57.46,
      "attackdamageperlevel": 2.41,
      "attackspeedoffset": -0.02,
      "attackspeedperlevel": 3.3
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Lucian.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion1.png",
      "x": 432,
      "y": 96
    },
    "description": "Lucian wields relic weapons imbued with ancient power and stands a stalwart guardian against the undead. His cold conviction never wavers, even in the face of the maddening horrors he destroys beneath his hail of purifying fire. Lucian walks alone on ..."
  },
  {
    "id": "lulu",
    "key": "117",
    "name": "Lulu",
    "title": "the Fae Sorceress",
    "tags": [
      "Support",
      "Mage"
    ],
    "stats": {
      "hp": 552.76,
      "hpperlevel": 74,
      "mp": 350,
      "mpperlevel": 55,
      "movespeed": 330,
      "armor": 19.216,
      "armorperlevel": 3.7,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 550,
      "hpregen": 6.005,
      "hpregenperlevel": 0.6,
      "mpregen": 11,
      "mpregenperlevel": 0.6,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 46.368,
      "attackdamageperlevel": 2.6,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 2.25
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Lulu.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion2.png",
      "x": 0,
      "y": 0
    },
    "description": "Perhaps more than any other champion in the League, Lulu marches to the beat of her own drum. During her youth in Bandle City, she spent most of her time wandering alone in the forest or lost in a daydream. It wasn't that she was antisocial; the ..."
  },
  {
    "id": "lux",
    "key": "99",
    "name": "Lux",
    "title": "the Lady of Luminosity",
    "tags": [
      "Mage",
      "Support"
    ],
    "stats": {
      "hp": 477.72,
      "hpperlevel": 79,
      "mp": 384,
      "mpperlevel": 47,
      "movespeed": 330,
      "armor": 18.72,
      "armorperlevel": 4,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 550,
      "hpregen": 5.42,
      "hpregenperlevel": 0.55,
      "mpregen": 6,
      "mpregenperlevel": 0.8,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 53.544,
      "attackdamageperlevel": 3.3,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 1.36
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Lux.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion2.png",
      "x": 48,
      "y": 0
    },
    "description": "Born to the prestigious Crownguards, the paragon family of Demacian service, Luxanna was destined for greatness. She grew up as the family's only daughter, and she immediately took to the advanced education and lavish parties required of families as ..."
  },
  {
    "id": "malphite",
    "key": "54",
    "name": "Malphite",
    "title": "Shard of the Monolith",
    "tags": [
      "Tank",
      "Fighter"
    ],
    "stats": {
      "hp": 574.2,
      "hpperlevel": 90,
      "mp": 282.2,
      "mpperlevel": 40,
      "movespeed": 335,
      "armor": 28.3,
      "armorperlevel": 3.75,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 125,
      "hpregen": 7,
      "hpregenperlevel": 0.55,
      "mpregen": 7.32,
      "mpregenperlevel": 0.55,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 61.97,
      "attackdamageperlevel": 3.375,
      "attackspeedoffset": -0.02,
      "attackspeedperlevel": 3.4
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Malphite.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion2.png",
      "x": 96,
      "y": 0
    },
    "description": "There is a world of perfect harmony, where all are part of the whole. The Monolith is the essence of all creation, and its denizens are but singular pieces of it. It is beautiful in its symmetry, and in its almost complete lack of uncertainty. The ..."
  },
  {
    "id": "malzahar",
    "key": "90",
    "name": "Malzahar",
    "title": "the Prophet of the Void",
    "tags": [
      "Mage",
      "Assassin"
    ],
    "stats": {
      "hp": 525,
      "hpperlevel": 75,
      "mp": 300,
      "mpperlevel": 55,
      "movespeed": 335,
      "armor": 20,
      "armorperlevel": 3.5,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 500,
      "hpregen": 6,
      "hpregenperlevel": 0.6,
      "mpregen": 6,
      "mpregenperlevel": 0.8,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 55,
      "attackdamageperlevel": 3,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 1.5
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Malzahar.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion2.png",
      "x": 144,
      "y": 0
    },
    "description": "Many men have gone mad beneath the glare of the Shurima sun, but it was during the night's chilling embrace that Malzahar relinquished his sanity. Malzahar was born a seer, blessed with the gift of prophecy. His talent, though unrefined, promised to ..."
  },
  {
    "id": "maokai",
    "key": "57",
    "name": "Maokai",
    "title": "the Twisted Treant",
    "tags": [
      "Tank",
      "Mage"
    ],
    "stats": {
      "hp": 572.2,
      "hpperlevel": 90,
      "mp": 377.28,
      "mpperlevel": 43,
      "movespeed": 335,
      "armor": 28.72,
      "armorperlevel": 4,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 125,
      "hpregen": 7,
      "hpregenperlevel": 0.75,
      "mpregen": 7.205,
      "mpregenperlevel": 0.45,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 63.544,
      "attackdamageperlevel": 3.3,
      "attackspeedoffset": -0.1,
      "attackspeedperlevel": 2.125
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Maokai.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion2.png",
      "x": 192,
      "y": 0
    },
    "description": "''All around me are empty husks, soulless and unafraid... but I will bring them fear.''<br><br>Maokai is a rageful, towering treant who fights the unnatural horrors of the Shadow Isles. He was twisted into a force of vengeance after a magical ..."
  },
  {
    "id": "masteryi",
    "key": "11",
    "name": "Master Yi",
    "title": "the Wuju Bladesman",
    "tags": [
      "Assassin",
      "Fighter"
    ],
    "stats": {
      "hp": 598.56,
      "hpperlevel": 92,
      "mp": 250.56,
      "mpperlevel": 42,
      "movespeed": 355,
      "armor": 24.04,
      "armorperlevel": 3,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 125,
      "hpregen": 7.59,
      "hpregenperlevel": 0.65,
      "mpregen": 7.255,
      "mpregenperlevel": 0.45,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 60.04,
      "attackdamageperlevel": 3,
      "attackspeedoffset": -0.08,
      "attackspeedperlevel": 2
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/MasterYi.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion2.png",
      "x": 240,
      "y": 0
    },
    "description": "Through the ancient martial art of Wuju, Master Yi has tempered his body and sharpened his mind until thought and action have become one. Though he chooses to enter into violence as a last resort, the grace and speed with which he wields his blade ..."
  },
  {
    "id": "missfortune",
    "key": "21",
    "name": "Miss Fortune",
    "title": "the Bounty Hunter",
    "tags": [
      "Marksman"
    ],
    "stats": {
      "hp": 530,
      "hpperlevel": 85,
      "mp": 325.84,
      "mpperlevel": 35,
      "movespeed": 325,
      "armor": 24.04,
      "armorperlevel": 3,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 550,
      "hpregen": 6.19,
      "hpregenperlevel": 0.65,
      "mpregen": 8.04,
      "mpregenperlevel": 0.65,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 46,
      "attackdamageperlevel": 1,
      "attackspeedoffset": -0.04734,
      "attackspeedperlevel": 3
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/MissFortune.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion2.png",
      "x": 288,
      "y": 0
    },
    "description": "''The bigger the risk, the bigger the bounty.''<br><br>Beauty and danger: There are few who can match Miss Fortune in either. One of Bilgewater's most infamous bounty hunters, she built her legend upon a swathe of bullet-riddled corpses and captured ..."
  },
  {
    "id": "monkeyking",
    "key": "62",
    "name": "Wukong",
    "title": "the Monkey King",
    "tags": [
      "Fighter",
      "Tank"
    ],
    "stats": {
      "hp": 577.8,
      "hpperlevel": 85,
      "mp": 265.84,
      "mpperlevel": 38,
      "movespeed": 345,
      "armor": 24.88,
      "armorperlevel": 3.5,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 175,
      "hpregen": 6.19,
      "hpregenperlevel": 0.65,
      "mpregen": 8.04,
      "mpregenperlevel": 0.65,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 59.876,
      "attackdamageperlevel": 3.2,
      "attackspeedoffset": -0.05,
      "attackspeedperlevel": 3
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/MonkeyKing.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion2.png",
      "x": 336,
      "y": 0
    },
    "description": "During the chaos of the Rune Wars, an enormous runestone was lost deep within the Plague Jungles. It remained there, untouched for centuries, emanating a potent magic which infused nearby wildlife with sentience and vitality. A group of monkeys who ..."
  },
  {
    "id": "mordekaiser",
    "key": "82",
    "name": "Mordekaiser",
    "title": "the Iron Revenant",
    "tags": [
      "Fighter"
    ],
    "stats": {
      "hp": 525,
      "hpperlevel": 73,
      "mp": 0,
      "mpperlevel": 0,
      "movespeed": 325,
      "armor": 20,
      "armorperlevel": 3.75,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 175,
      "hpregen": 4,
      "hpregenperlevel": 0.3,
      "mpregen": 0,
      "mpregenperlevel": 0,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 61,
      "attackdamageperlevel": 5,
      "attackspeedoffset": 0.04,
      "attackspeedperlevel": 2.2
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Mordekaiser.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion2.png",
      "x": 384,
      "y": 0
    },
    "description": "''All things must die... and yet I live on.''<br><br>The baleful revenant Mordekaiser is among the most terrifying and hateful spirits haunting the Shadow Isles. He has existed for countless centuries, shielded from true death by necromantic sorcery ..."
  },
  {
    "id": "morgana",
    "key": "25",
    "name": "Morgana",
    "title": "Fallen Angel",
    "tags": [
      "Mage",
      "Support"
    ],
    "stats": {
      "hp": 547.48,
      "hpperlevel": 86,
      "mp": 340.8,
      "mpperlevel": 60,
      "movespeed": 335,
      "armor": 25.384,
      "armorperlevel": 3.8,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 450,
      "hpregen": 5.705,
      "hpregenperlevel": 0.6,
      "mpregen": 8.5,
      "mpregenperlevel": 0.8,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 55.46,
      "attackdamageperlevel": 3.5,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 1.53
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Morgana.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion2.png",
      "x": 432,
      "y": 0
    },
    "description": "There is a world far away populated by graceful and beautiful winged beings gifted with immortality, where an ancient conflict still rages. Like so many conflicts, this war split families. One side proclaimed themselves as beings of perfect order and ..."
  },
  {
    "id": "nami",
    "key": "267",
    "name": "Nami",
    "title": "the Tidecaller",
    "tags": [
      "Support",
      "Mage"
    ],
    "stats": {
      "hp": 489.32,
      "hpperlevel": 74,
      "mp": 377.24,
      "mpperlevel": 43,
      "movespeed": 335,
      "armor": 19.72,
      "armorperlevel": 4,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 550,
      "hpregen": 5.42,
      "hpregenperlevel": 0.55,
      "mpregen": 11.5,
      "mpregenperlevel": 0.4,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 51.208,
      "attackdamageperlevel": 3.1,
      "attackspeedoffset": -0.03,
      "attackspeedperlevel": 2.61
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Nami.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion2.png",
      "x": 0,
      "y": 48
    },
    "description": "Nami channels the primal energies of the ocean, harnessing its mystical restorative properties and commanding the raw power of the tides themselves. Though many doubted her, Nami had the bravery and determination to take on a dangerous quest when no ..."
  },
  {
    "id": "nasus",
    "key": "75",
    "name": "Nasus",
    "title": "the Curator of the Sands",
    "tags": [
      "Fighter",
      "Tank"
    ],
    "stats": {
      "hp": 561.2,
      "hpperlevel": 90,
      "mp": 325.6,
      "mpperlevel": 42,
      "movespeed": 350,
      "armor": 24.88,
      "armorperlevel": 3.5,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 125,
      "hpregen": 9.01,
      "hpregenperlevel": 0.9,
      "mpregen": 7.44,
      "mpregenperlevel": 0.5,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 59.18,
      "attackdamageperlevel": 3.5,
      "attackspeedoffset": -0.02,
      "attackspeedperlevel": 3.48
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Nasus.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion2.png",
      "x": 48,
      "y": 48
    },
    "description": "''What was fallen will be great again.''<br><br>Nasus is an imposing, jackal-headed Ascended being from ancient Shurima, a heroic figure regarded as a demigod by the people of the desert. Fiercely intelligent, he was a guardian of knowledge and ..."
  },
  {
    "id": "nautilus",
    "key": "111",
    "name": "Nautilus",
    "title": "the Titan of the Depths",
    "tags": [
      "Tank",
      "Fighter"
    ],
    "stats": {
      "hp": 576.48,
      "hpperlevel": 86,
      "mp": 334,
      "mpperlevel": 47,
      "movespeed": 325,
      "armor": 26.46,
      "armorperlevel": 3.75,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 175,
      "hpregen": 8.37,
      "hpregenperlevel": 0.55,
      "mpregen": 8.625,
      "mpregenperlevel": 0.7,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 57.544,
      "attackdamageperlevel": 3.3,
      "attackspeedoffset": 0.02,
      "attackspeedperlevel": 1
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Nautilus.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion2.png",
      "x": 96,
      "y": 48
    },
    "description": "Once, Nautilus was a sailor commissioned by the Institute of War to explore the uncharted reaches of the Guardian's Sea. This expedition took him deep into unknown waters where he and his crew found a vast section of black oozing liquid that none of ..."
  },
  {
    "id": "nidalee",
    "key": "76",
    "name": "Nidalee",
    "title": "the Bestial Huntress",
    "tags": [
      "Assassin",
      "Fighter"
    ],
    "stats": {
      "hp": 511.2,
      "hpperlevel": 80,
      "mp": 295.6,
      "mpperlevel": 45,
      "movespeed": 335,
      "armor": 22.88,
      "armorperlevel": 3.5,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 525,
      "hpregen": 6.005,
      "hpregenperlevel": 0.6,
      "mpregen": 6,
      "mpregenperlevel": 0.8,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 47.88,
      "attackdamageperlevel": 3.5,
      "attackspeedoffset": -0.02,
      "attackspeedperlevel": 3.22
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Nidalee.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion2.png",
      "x": 144,
      "y": 48
    },
    "description": "There are few dwellers, let alone champions, residing in the blasted and dangerous lands that lie south of the Great Barrier. Much of that world still bears the scars of past Runes Wars, especially the mysterious Kumungu Jungle. There are ..."
  },
  {
    "id": "nocturne",
    "key": "56",
    "name": "Nocturne",
    "title": "the Eternal Nightmare",
    "tags": [
      "Assassin",
      "Fighter"
    ],
    "stats": {
      "hp": 582.8,
      "hpperlevel": 85,
      "mp": 273.8,
      "mpperlevel": 35,
      "movespeed": 345,
      "armor": 26.88,
      "armorperlevel": 3.5,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 125,
      "hpregen": 8.26,
      "hpregenperlevel": 0.75,
      "mpregen": 6.755,
      "mpregenperlevel": 0.45,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 59.208,
      "attackdamageperlevel": 3.1,
      "attackspeedoffset": -0.065,
      "attackspeedperlevel": 2.7
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Nocturne.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion2.png",
      "x": 192,
      "y": 48
    },
    "description": "Before Nocturne, people believed that dreams were figments of their imagination, meaningless images that flashed through the mind when one slept. This belief was put to the test when a rash of sleep-related incidents started afflicting summoners of ..."
  },
  {
    "id": "nunu",
    "key": "20",
    "name": "Nunu",
    "title": "the Yeti Rider",
    "tags": [
      "Support",
      "Fighter"
    ],
    "stats": {
      "hp": 598.28,
      "hpperlevel": 90,
      "mp": 283.56,
      "mpperlevel": 42,
      "movespeed": 350,
      "armor": 26.38,
      "armorperlevel": 3.5,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 125,
      "hpregen": 8.39,
      "hpregenperlevel": 0.8,
      "mpregen": 7.44,
      "mpregenperlevel": 0.5,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 59,
      "attackdamageperlevel": 4,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 2.25
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Nunu.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion2.png",
      "x": 240,
      "y": 48
    },
    "description": "Sometimes bonds of friendship become stronger than even bonds of blood. When those bonds link a fearless boy to a fearsome Yeti, the bond becomes a force to be reckoned with. Given the responsibility of taming a terrifying beast, Nunu forged a ..."
  },
  {
    "id": "olaf",
    "key": "2",
    "name": "Olaf",
    "title": "the Berserker",
    "tags": [
      "Fighter",
      "Tank"
    ],
    "stats": {
      "hp": 597.24,
      "hpperlevel": 93,
      "mp": 315.6,
      "mpperlevel": 42,
      "movespeed": 350,
      "armor": 26.04,
      "armorperlevel": 3,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 125,
      "hpregen": 8.51,
      "hpregenperlevel": 0.9,
      "mpregen": 7.465,
      "mpregenperlevel": 0.575,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 59.98,
      "attackdamageperlevel": 3.5,
      "attackspeedoffset": -0.1,
      "attackspeedperlevel": 2.7
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Olaf.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion2.png",
      "x": 288,
      "y": 48
    },
    "description": "Most men would say that death is a thing to be feared; none of those men would be Olaf. The Berserker lives only for the roar of a battle cry and the clash of steel. Spurred on by his hunger for glory and the looming curse of a forgettable death, Olaf ..."
  },
  {
    "id": "orianna",
    "key": "61",
    "name": "Orianna",
    "title": "the Lady of Clockwork",
    "tags": [
      "Mage",
      "Support"
    ],
    "stats": {
      "hp": 517.72,
      "hpperlevel": 79,
      "mp": 334,
      "mpperlevel": 50,
      "movespeed": 325,
      "armor": 17.04,
      "armorperlevel": 3,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 525,
      "hpregen": 6.87,
      "hpregenperlevel": 0.55,
      "mpregen": 6,
      "mpregenperlevel": 0.8,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 40.368,
      "attackdamageperlevel": 2.6,
      "attackspeedoffset": -0.05,
      "attackspeedperlevel": 3.5
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Orianna.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion2.png",
      "x": 336,
      "y": 48
    },
    "description": "There once was a Piltovian man named Corin Reveck who had a daughter named Orianna, whom he loved more than anything else in the world. Though Orianna had incredible talent for dancing, she was deeply fascinated by the champions of the League of ..."
  },
  {
    "id": "pantheon",
    "key": "80",
    "name": "Pantheon",
    "title": "the Artisan of War",
    "tags": [
      "Fighter",
      "Assassin"
    ],
    "stats": {
      "hp": 579.16,
      "hpperlevel": 87,
      "mp": 317.12,
      "mpperlevel": 31,
      "movespeed": 355,
      "armor": 27.652,
      "armorperlevel": 3.9,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 150,
      "hpregen": 7.84,
      "hpregenperlevel": 0.65,
      "mpregen": 7.355,
      "mpregenperlevel": 0.45,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 55.572,
      "attackdamageperlevel": 2.9,
      "attackspeedoffset": -0.03,
      "attackspeedperlevel": 2.95
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Pantheon.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion2.png",
      "x": 384,
      "y": 48
    },
    "description": "''Bring forth one true champion, or a hundred more like you, and then we shall have a battle that will be spoken of until the end of time.''<br><br>The peerless warrior known as Pantheon is a nigh-unstoppable paragon of battle. He was born among the ..."
  },
  {
    "id": "poppy",
    "key": "78",
    "name": "Poppy",
    "title": "Keeper of the Hammer",
    "tags": [
      "Tank",
      "Fighter"
    ],
    "stats": {
      "hp": 540,
      "hpperlevel": 90,
      "mp": 280,
      "mpperlevel": 40,
      "movespeed": 345,
      "armor": 29,
      "armorperlevel": 3.5,
      "spellblock": 32,
      "spellblockperlevel": 1.25,
      "attackrange": 125,
      "hpregen": 8,
      "hpregenperlevel": 0.8,
      "mpregen": 7,
      "mpregenperlevel": 0.7,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 56,
      "attackdamageperlevel": 4,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 2.5
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Poppy.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion2.png",
      "x": 432,
      "y": 48
    },
    "description": "''I'm no hero. Just a yordle with a hammer.''<br><br>Runeterra has no shortage of valiant champions, but few are as tenacious as Poppy. Bearing a hammer twice the length of her body, this determined yordle has spent untold years searching for the ..."
  },
  {
    "id": "quinn",
    "key": "133",
    "name": "Quinn",
    "title": "Demacia's Wings",
    "tags": [
      "Marksman",
      "Fighter"
    ],
    "stats": {
      "hp": 532.8,
      "hpperlevel": 85,
      "mp": 268.8,
      "mpperlevel": 35,
      "movespeed": 335,
      "armor": 23.38,
      "armorperlevel": 3.5,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 525,
      "hpregen": 5.42,
      "hpregenperlevel": 0.55,
      "mpregen": 6.97,
      "mpregenperlevel": 0.4,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 54.46,
      "attackdamageperlevel": 2.41,
      "attackspeedoffset": -0.065,
      "attackspeedperlevel": 3.1
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Quinn.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion2.png",
      "x": 0,
      "y": 96
    },
    "description": "Quinn and Valor are an elite ranger team. With crossbow and claw, they undertake their nation's most dangerous missions deep within enemy territory, from swift reconnaissance to lethal strikes. The pair's unbreakable bond is deadly on the battlefield, ..."
  },
  {
    "id": "rammus",
    "key": "33",
    "name": "Rammus",
    "title": "the Armordillo",
    "tags": [
      "Tank",
      "Fighter"
    ],
    "stats": {
      "hp": 564.48,
      "hpperlevel": 86,
      "mp": 310.44,
      "mpperlevel": 33,
      "movespeed": 335,
      "armor": 31.384,
      "armorperlevel": 4.3,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 125,
      "hpregen": 7.92,
      "hpregenperlevel": 0.55,
      "mpregen": 7.84,
      "mpregenperlevel": 0.5,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 55.88,
      "attackdamageperlevel": 3.5,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 2.215
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Rammus.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion2.png",
      "x": 48,
      "y": 96
    },
    "description": "''OK.''<br><br>Idolized by many, dismissed by some, mystifying to all, the curious being, Rammus, is an enigma. Protected by a spiked shell, Rammus inspires increasingly disparate theories on his origin wherever he goes - from demigod, to sacred ..."
  },
  {
    "id": "reksai",
    "key": "421",
    "name": "Rek'Sai",
    "title": "the Void Burrower",
    "tags": [
      "Fighter"
    ],
    "stats": {
      "hp": 570,
      "hpperlevel": 90,
      "mp": 100,
      "mpperlevel": 0,
      "movespeed": 335,
      "armor": 24,
      "armorperlevel": 3.4,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 175,
      "hpregen": 7.34,
      "hpregenperlevel": 0.65,
      "mpregen": 0,
      "mpregenperlevel": 0,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 55.628,
      "attackdamageperlevel": 3.35,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 2
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/RekSai.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion2.png",
      "x": 96,
      "y": 96
    },
    "description": "The largest and fiercest of her species, Rek'Sai is a merciless predator that tunnels through the earth to ambush and devour her prey. Her insatiable hunger has laid waste to entire regions of the once-great Shuriman empire. Merchants, traders and ..."
  },
  {
    "id": "renekton",
    "key": "58",
    "name": "Renekton",
    "title": "the Butcher of the Sands",
    "tags": [
      "Fighter",
      "Tank"
    ],
    "stats": {
      "hp": 572.16,
      "hpperlevel": 87,
      "mp": 100,
      "mpperlevel": 0,
      "movespeed": 345,
      "armor": 25.584,
      "armorperlevel": 3.8,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 125,
      "hpregen": 7.96,
      "hpregenperlevel": 0.75,
      "mpregen": 0,
      "mpregenperlevel": 0,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 58.328,
      "attackdamageperlevel": 3.1,
      "attackspeedoffset": -0.06,
      "attackspeedperlevel": 2.65
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Renekton.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion2.png",
      "x": 144,
      "y": 96
    },
    "description": "''Blood and vengeance.''<br><br>Renekton is a terrifying, rage-fueled Ascended being from the scorched deserts of Shurima. Once, he was his empire's most esteemed warrior, leading the armies of Shurima to countless victories. However, after the ..."
  },
  {
    "id": "rengar",
    "key": "107",
    "name": "Rengar",
    "title": "the Pridestalker",
    "tags": [
      "Assassin",
      "Fighter"
    ],
    "stats": {
      "hp": 586.2,
      "hpperlevel": 90,
      "mp": 5,
      "mpperlevel": 0,
      "movespeed": 345,
      "armor": 25.88,
      "armorperlevel": 3.5,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 125,
      "hpregen": 4.27,
      "hpregenperlevel": 0.4,
      "mpregen": 0,
      "mpregenperlevel": 0,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 60.04,
      "attackdamageperlevel": 3,
      "attackspeedoffset": -0.08,
      "attackspeedperlevel": 2.85
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Rengar.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion2.png",
      "x": 192,
      "y": 96
    },
    "description": "On every wall of his den, the trophy hunter Rengar mounts the heads, horns, claws, and fangs of the most lethal creatures in Valoran. Though his collection is extensive, he remains unsatisfied, tirelessly seeking greater game. He takes time with every ..."
  },
  {
    "id": "riven",
    "key": "92",
    "name": "Riven",
    "title": "the Exile",
    "tags": [
      "Fighter",
      "Assassin"
    ],
    "stats": {
      "hp": 558.48,
      "hpperlevel": 86,
      "mp": 0,
      "mpperlevel": 0,
      "movespeed": 340,
      "armor": 24.376,
      "armorperlevel": 3.2,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 125,
      "hpregen": 5.34,
      "hpregenperlevel": 0.5,
      "mpregen": 0,
      "mpregenperlevel": 0,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 56.04,
      "attackdamageperlevel": 3,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 3.5
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Riven.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion2.png",
      "x": 240,
      "y": 96
    },
    "description": "''There is a place between war and murder in which our demons lurk.''<br><br>In Noxus, any citizen may rise to power regardless of race, gender, or social standing - strength is all that matters. It was with committed faith in this ideal that Riven ..."
  },
  {
    "id": "rumble",
    "key": "68",
    "name": "Rumble",
    "title": "the Mechanized Menace",
    "tags": [
      "Fighter",
      "Mage"
    ],
    "stats": {
      "hp": 584.4,
      "hpperlevel": 80,
      "mp": 100,
      "mpperlevel": 0,
      "movespeed": 345,
      "armor": 25.88,
      "armorperlevel": 3.5,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 125,
      "hpregen": 8.005,
      "hpregenperlevel": 0.6,
      "mpregen": 0,
      "mpregenperlevel": 0,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 61.036,
      "attackdamageperlevel": 3.2,
      "attackspeedoffset": -0.03,
      "attackspeedperlevel": 1.85
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Rumble.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion2.png",
      "x": 288,
      "y": 96
    },
    "description": "''Ugh, it's gonna take forever to scrape your face off my suit!''<br><br>Even amongst yordles, Rumble was always the runt of the litter. As such, he was used to being bullied. In order to survive, he had to be scrappier and more resourceful than his ..."
  },
  {
    "id": "ryze",
    "key": "13",
    "name": "Ryze",
    "title": "the Rune Mage",
    "tags": [
      "Mage",
      "Fighter"
    ],
    "stats": {
      "hp": 558.48,
      "hpperlevel": 86,
      "mp": 400,
      "mpperlevel": 50,
      "movespeed": 340,
      "armor": 21.552,
      "armorperlevel": 3,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 550,
      "hpregen": 7,
      "hpregenperlevel": 0.55,
      "mpregen": 6,
      "mpregenperlevel": 0.8,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 55.04,
      "attackdamageperlevel": 3,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 2.112
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Ryze.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion2.png",
      "x": 336,
      "y": 96
    },
    "description": "''Take care with this world. What is made can be unmade.''<br><br>Widely considered one of the most adept sorcerers on Runeterra, Ryze is an ancient, hard-bitten archmage with an impossibly heavy burden to bear. Armed with a boundless constitution and ..."
  },
  {
    "id": "sejuani",
    "key": "113",
    "name": "Sejuani",
    "title": "the Winter's Wrath",
    "tags": [
      "Tank",
      "Fighter"
    ],
    "stats": {
      "hp": 600,
      "hpperlevel": 95,
      "mp": 400,
      "mpperlevel": 40,
      "movespeed": 340,
      "armor": 29.54,
      "armorperlevel": 3,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 125,
      "hpregen": 8.675,
      "hpregenperlevel": 0.85,
      "mpregen": 7.205,
      "mpregenperlevel": 0.45,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 57.544,
      "attackdamageperlevel": 3.3,
      "attackspeedoffset": -0.0672,
      "attackspeedperlevel": 1.44
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Sejuani.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion2.png",
      "x": 384,
      "y": 96
    },
    "description": "Sejuani was weaned on hardship and reared on barbarity. Where others succumbed to the harshness of the Freljord, she was tempered by it until pain became power, hunger an encouragement, and frost an ally in culling the weak. Through her ordeals, she ..."
  },
  {
    "id": "shaco",
    "key": "35",
    "name": "Shaco",
    "title": "the Demon Jester",
    "tags": [
      "Assassin"
    ],
    "stats": {
      "hp": 582.12,
      "hpperlevel": 84,
      "mp": 297.2,
      "mpperlevel": 40,
      "movespeed": 350,
      "armor": 24.88,
      "armorperlevel": 3.5,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 125,
      "hpregen": 8.37,
      "hpregenperlevel": 0.55,
      "mpregen": 7.155,
      "mpregenperlevel": 0.45,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 57.58,
      "attackdamageperlevel": 3.5,
      "attackspeedoffset": -0.1,
      "attackspeedperlevel": 3
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Shaco.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion2.png",
      "x": 432,
      "y": 96
    },
    "description": "Most would say that death isn't funny. It isn't, unless you're Shaco - then it's hysterical. He is Valoran's first fully functioning homicidal comic; he jests until someone dies, and then he laughs. The figure that has come to be known as the Demon ..."
  },
  {
    "id": "shen",
    "key": "98",
    "name": "Shen",
    "title": "the Eye of Twilight",
    "tags": [
      "Tank",
      "Melee"
    ],
    "stats": {
      "hp": 540,
      "hpperlevel": 73,
      "mp": 400,
      "mpperlevel": 0,
      "movespeed": 340,
      "armor": 25,
      "armorperlevel": 2.6,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 125,
      "hpregen": 8.5,
      "hpregenperlevel": 0.75,
      "mpregen": 50,
      "mpregenperlevel": 0,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 60,
      "attackdamageperlevel": 3,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 2
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Shen.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion3.png",
      "x": 0,
      "y": 0
    },
    "description": "''The Eye is blind to fear, to hate, to love - to all things that would sway equilibrium.''<br><br>Leader of a secret clan of mystic warriors, Shen serves as the Eye of Twilight, entrusted to enforce equilibrium in the world. Longing to remain free ..."
  },
  {
    "id": "shyvana",
    "key": "102",
    "name": "Shyvana",
    "title": "the Half-Dragon",
    "tags": [
      "Fighter",
      "Tank"
    ],
    "stats": {
      "hp": 594.6,
      "hpperlevel": 95,
      "mp": 100,
      "mpperlevel": 0,
      "movespeed": 350,
      "armor": 27.628,
      "armorperlevel": 3.35,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 125,
      "hpregen": 8.59,
      "hpregenperlevel": 0.8,
      "mpregen": 0,
      "mpregenperlevel": 0,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 60.712,
      "attackdamageperlevel": 3.4,
      "attackspeedoffset": -0.05,
      "attackspeedperlevel": 2.5
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Shyvana.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion3.png",
      "x": 48,
      "y": 0
    },
    "description": "A half-breed born from the union between dragon and human, Shyvana searched all her life for belonging. Persecution forged her into a brutal warrior, and those who dare stand against Shyvana face the fiery beast lurking just beneath her skin...."
  },
  {
    "id": "singed",
    "key": "27",
    "name": "Singed",
    "title": "the Mad Chemist",
    "tags": [
      "Tank",
      "Fighter"
    ],
    "stats": {
      "hp": 542.76,
      "hpperlevel": 82,
      "mp": 290.6,
      "mpperlevel": 45,
      "movespeed": 345,
      "armor": 27.88,
      "armorperlevel": 3.5,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 125,
      "hpregen": 8.02,
      "hpregenperlevel": 0.55,
      "mpregen": 7.52,
      "mpregenperlevel": 0.55,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 62.32,
      "attackdamageperlevel": 3.375,
      "attackspeedoffset": 0.02,
      "attackspeedperlevel": 1.81
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Singed.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion3.png",
      "x": 96,
      "y": 0
    },
    "description": "Singed descended from a long line of Zaun's revered chemists. Even in his youth, his talent for concocting potions far outstripped that of his peers, and he quickly distinguished himself from his less extraordinary chemist compatriots. It came as no ..."
  },
  {
    "id": "sion",
    "key": "14",
    "name": "Sion",
    "title": "The Undead Juggernaut",
    "tags": [
      "Tank",
      "Fighter"
    ],
    "stats": {
      "hp": 542.64,
      "hpperlevel": 73,
      "mp": 325.6,
      "mpperlevel": 42,
      "movespeed": 345,
      "armor": 23.04,
      "armorperlevel": 3,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 175,
      "hpregen": 10.18,
      "hpregenperlevel": 0.8,
      "mpregen": 8.005,
      "mpregenperlevel": 0.6,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 59.72,
      "attackdamageperlevel": 4,
      "attackspeedoffset": -0.08,
      "attackspeedperlevel": 1.3
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Sion.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion3.png",
      "x": 144,
      "y": 0
    },
    "description": "BLOOD.<br><br>SMELL IT.<br><br>WANT. ACHING. NEED!<br><br>CLOSE NOW. THEY COME.<br><br>NO CHAINS? FREE! KILL!<br><br>IN REACH. YES! DIE! DIE!<br><br>Gone. Too quick. No fight. More. I want... more.<br><br>A voice? Unfamiliar. I see him. The Grand ..."
  },
  {
    "id": "sivir",
    "key": "15",
    "name": "Sivir",
    "title": "the Battle Mistress",
    "tags": [
      "Marksman"
    ],
    "stats": {
      "hp": 515.76,
      "hpperlevel": 82,
      "mp": 284,
      "mpperlevel": 50,
      "movespeed": 335,
      "armor": 22.21,
      "armorperlevel": 3.25,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 500,
      "hpregen": 5.17,
      "hpregenperlevel": 0.55,
      "mpregen": 8.01,
      "mpregenperlevel": 0.9,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 57.46,
      "attackdamageperlevel": 2.41,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 1.6
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Sivir.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion3.png",
      "x": 192,
      "y": 0
    },
    "description": "''I don't care what face is on your coin, as long as it pays.''<br><br>Sivir is a renowned fortune hunter and mercenary captain who plies her trade in the deserts of Shurima. Armed with her legendary jeweled crossblade, she has fought and won ..."
  },
  {
    "id": "skarner",
    "key": "72",
    "name": "Skarner",
    "title": "the Crystal Vanguard",
    "tags": [
      "Fighter",
      "Tank"
    ],
    "stats": {
      "hp": 601.28,
      "hpperlevel": 90,
      "mp": 272.2,
      "mpperlevel": 40,
      "movespeed": 335,
      "armor": 29.384,
      "armorperlevel": 3.8,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 125,
      "hpregen": 8.925,
      "hpregenperlevel": 0.85,
      "mpregen": 7.205,
      "mpregenperlevel": 0.45,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 57.156,
      "attackdamageperlevel": 4.5,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 2.1
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Skarner.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion3.png",
      "x": 240,
      "y": 0
    },
    "description": "''We are one. We cannot be shattered.''<br><br>Skarner is an immense crystalline scorpion from a hidden valley in Shurima. Part of the ancient Brackern race, Skarner and his kin are known for their great wisdom and deep connection to the land, as ..."
  },
  {
    "id": "sona",
    "key": "37",
    "name": "Sona",
    "title": "Maven of the Strings",
    "tags": [
      "Support",
      "Mage"
    ],
    "stats": {
      "hp": 482.36,
      "hpperlevel": 77,
      "mp": 340.6,
      "mpperlevel": 45,
      "movespeed": 325,
      "armor": 20.544,
      "armorperlevel": 3.3,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 550,
      "hpregen": 5.42,
      "hpregenperlevel": 0.55,
      "mpregen": 11.5,
      "mpregenperlevel": 0.4,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 50.04,
      "attackdamageperlevel": 3,
      "attackspeedoffset": -0.03,
      "attackspeedperlevel": 2.3
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Sona.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion3.png",
      "x": 288,
      "y": 0
    },
    "description": "Sona has no memories of her true parents. As an infant, she was found abandoned on the doorstep of an Ionian adoption house, nestled atop an ancient instrument in an exquisite case of unknown origins. She was an unusually well-behaved child, always ..."
  },
  {
    "id": "soraka",
    "key": "16",
    "name": "Soraka",
    "title": "the Starchild",
    "tags": [
      "Support",
      "Mage"
    ],
    "stats": {
      "hp": 529.04,
      "hpperlevel": 78,
      "mp": 350.8,
      "mpperlevel": 60,
      "movespeed": 325,
      "armor": 23.384,
      "armorperlevel": 3.8,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 550,
      "hpregen": 2.5,
      "hpregenperlevel": 0.5,
      "mpregen": 11.5,
      "mpregenperlevel": 0.4,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 50.04,
      "attackdamageperlevel": 3,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 2.14
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Soraka.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion3.png",
      "x": 336,
      "y": 0
    },
    "description": "A healer gifted with the magic of the stars, Soraka holds all living creatures close to her heart. She was once a celestial being, but she sacrificed her immortality and entered the world of mortals. So long as evil threatens life in Valoran, Soraka ..."
  },
  {
    "id": "swain",
    "key": "50",
    "name": "Swain",
    "title": "the Master Tactician",
    "tags": [
      "Mage",
      "Fighter"
    ],
    "stats": {
      "hp": 516.04,
      "hpperlevel": 90,
      "mp": 374,
      "mpperlevel": 47,
      "movespeed": 335,
      "armor": 22.72,
      "armorperlevel": 4,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 500,
      "hpregen": 7.84,
      "hpregenperlevel": 0.65,
      "mpregen": 6,
      "mpregenperlevel": 0.8,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 52.04,
      "attackdamageperlevel": 3,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 2.11
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Swain.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion3.png",
      "x": 384,
      "y": 0
    },
    "description": "The earliest account of Swain's existence comes from a Noxian infirmary doctor's notes. According to them, Swain limped into the ward without cry or complaint; his right leg was snapped in half, with bone protruding from the skin. A small, scowling ..."
  },
  {
    "id": "syndra",
    "key": "134",
    "name": "Syndra",
    "title": "the Dark Sovereign",
    "tags": [
      "Mage",
      "Support"
    ],
    "stats": {
      "hp": 511.04,
      "hpperlevel": 78,
      "mp": 384,
      "mpperlevel": 60,
      "movespeed": 330,
      "armor": 24.712,
      "armorperlevel": 3.4,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 550,
      "hpregen": 6.505,
      "hpregenperlevel": 0.6,
      "mpregen": 6,
      "mpregenperlevel": 0.8,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 53.872,
      "attackdamageperlevel": 2.9,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 2
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Syndra.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion3.png",
      "x": 432,
      "y": 0
    },
    "description": "Born with immense magical potential, Syndra loves nothing more than exercising the incredible power at her command. With each passing day, her mastery of magical force grows more potent and devastating. Refusing any notion of balance or restraint, ..."
  },
  {
    "id": "tahmkench",
    "key": "223",
    "name": "Tahm Kench",
    "title": "the River King",
    "tags": [
      "Support",
      "Tank"
    ],
    "stats": {
      "hp": 610,
      "hpperlevel": 95,
      "mp": 325,
      "mpperlevel": 40,
      "movespeed": 335,
      "armor": 27,
      "armorperlevel": 3.5,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 175,
      "hpregen": 6.5,
      "hpregenperlevel": 0.55,
      "mpregen": 8,
      "mpregenperlevel": 1,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 56,
      "attackdamageperlevel": 3.2,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 2.5
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/TahmKench.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion3.png",
      "x": 0,
      "y": 48
    },
    "description": "''The whole world's a river, and I'm its king.''<br>Tahm Kench travels Runeterra's waterways, feeding his insatiable appetite with the misery of the unsuspecting. The singularly charming gourmand savors every moment of his victims' suffering.  A deal ..."
  },
  {
    "id": "taliyah",
    "key": "163",
    "name": "Taliyah",
    "title": "the Stoneweaver",
    "tags": [
      "Mage",
      "Support"
    ],
    "stats": {
      "hp": 520,
      "hpperlevel": 75,
      "mp": 340,
      "mpperlevel": 60,
      "movespeed": 325,
      "armor": 20,
      "armorperlevel": 3,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 525,
      "hpregen": 7,
      "hpregenperlevel": 0.7,
      "mpregen": 7,
      "mpregenperlevel": 0.85,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 56,
      "attackdamageperlevel": 3.3,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 1.36
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Taliyah.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion3.png",
      "x": 48,
      "y": 48
    },
    "description": "Taliyah is a nomadic mage from Shurima who weaves stone with energetic enthusiasm and raw determination. Torn between teenage wonder and adult responsibility, she has crossed nearly all of Valoran on a journey to learn the true nature of her growing ..."
  },
  {
    "id": "talon",
    "key": "91",
    "name": "Talon",
    "title": "the Blade's Shadow",
    "tags": [
      "Assassin",
      "Fighter"
    ],
    "stats": {
      "hp": 582.8,
      "hpperlevel": 85,
      "mp": 377.2,
      "mpperlevel": 37,
      "movespeed": 350,
      "armor": 26.88,
      "armorperlevel": 3.5,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 125,
      "hpregen": 8.51,
      "hpregenperlevel": 0.75,
      "mpregen": 7.59,
      "mpregenperlevel": 0.5,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 55.208,
      "attackdamageperlevel": 3.1,
      "attackspeedoffset": -0.065,
      "attackspeedperlevel": 2.7
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Talon.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion3.png",
      "x": 96,
      "y": 48
    },
    "description": "''The three deadliest blademasters in all of Valoran are bound to the house of Du Couteau: my father, myself, and Talon. Challenge us, if you dare.''<br>-- Katarina Du Couteau<br><br>Talon's earliest memories are the darkness of Noxus' underground ..."
  },
  {
    "id": "taric",
    "key": "44",
    "name": "Taric",
    "title": "the Shield of Valoran",
    "tags": [
      "Support",
      "Fighter"
    ],
    "stats": {
      "hp": 575,
      "hpperlevel": 90,
      "mp": 300,
      "mpperlevel": 60,
      "movespeed": 340,
      "armor": 25,
      "armorperlevel": 3.4,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 150,
      "hpregen": 6,
      "hpregenperlevel": 0.5,
      "mpregen": 5,
      "mpregenperlevel": 1,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 55,
      "attackdamageperlevel": 3.5,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 2
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Taric.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion3.png",
      "x": 144,
      "y": 48
    },
    "description": "''The best weapons are beautiful.''<br><br>Taric is the Aspect of the Protector, wielding incredible power as Runeterra's guardian of life, love, and beauty. Shamed by a dereliction of duty and exiled from his homeland Demacia, Taric ascended Mount ..."
  },
  {
    "id": "teemo",
    "key": "17",
    "name": "Teemo",
    "title": "the Swift Scout",
    "tags": [
      "Marksman",
      "Assassin"
    ],
    "stats": {
      "hp": 515.76,
      "hpperlevel": 82,
      "mp": 267.2,
      "mpperlevel": 40,
      "movespeed": 330,
      "armor": 24.3,
      "armorperlevel": 3.75,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 500,
      "hpregen": 5.74,
      "hpregenperlevel": 0.65,
      "mpregen": 7.205,
      "mpregenperlevel": 0.45,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 49.54,
      "attackdamageperlevel": 3,
      "attackspeedoffset": -0.0947,
      "attackspeedperlevel": 3.38
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Teemo.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion3.png",
      "x": 192,
      "y": 48
    },
    "description": "Teemo is a legend among his yordle brothers and sisters in Bandle City. As far as yordles are concerned, there is something just slightly off about him. While Teemo enjoys the companionship of other yordles, he also insists on frequent solo missions ..."
  },
  {
    "id": "thresh",
    "key": "412",
    "name": "Thresh",
    "title": "the Chain Warden",
    "tags": [
      "Support",
      "Fighter"
    ],
    "stats": {
      "hp": 560.52,
      "hpperlevel": 93,
      "mp": 273.92,
      "mpperlevel": 44,
      "movespeed": 335,
      "armor": 16,
      "armorperlevel": 0,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 450,
      "hpregen": 6.92,
      "hpregenperlevel": 0.55,
      "mpregen": 6,
      "mpregenperlevel": 0.8,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 47.696,
      "attackdamageperlevel": 2.2,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 3.5
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Thresh.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion3.png",
      "x": 240,
      "y": 48
    },
    "description": "''The mind is a wondrous thing to tear apart.''<br><br>Sadistic and cunning, Thresh is a restless spirit who prides himself on tormenting mortals and breaking them with slow, excruciating inventiveness. His victims suffer far beyond the point of death,..."
  },
  {
    "id": "tristana",
    "key": "18",
    "name": "Tristana",
    "title": "the Yordle Gunner",
    "tags": [
      "Marksman",
      "Assassin"
    ],
    "stats": {
      "hp": 542.76,
      "hpperlevel": 82,
      "mp": 246.76,
      "mpperlevel": 32,
      "movespeed": 325,
      "armor": 22,
      "armorperlevel": 3,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 550,
      "hpregen": 6.19,
      "hpregenperlevel": 0.65,
      "mpregen": 7.205,
      "mpregenperlevel": 0.45,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 56.96,
      "attackdamageperlevel": 2.41,
      "attackspeedoffset": -0.04734,
      "attackspeedperlevel": 1.5
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Tristana.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion3.png",
      "x": 288,
      "y": 48
    },
    "description": "Greatness comes in all shapes and sizes, as proven by this diminutive, cannon-wielding yordle. In a world fraught with turmoil, Tristana refuses to back down from any challenge. She represents the pinnacle of martial proficiency, unwavering courage, ..."
  },
  {
    "id": "trundle",
    "key": "48",
    "name": "Trundle",
    "title": "the Troll King",
    "tags": [
      "Fighter",
      "Tank"
    ],
    "stats": {
      "hp": 616.28,
      "hpperlevel": 96,
      "mp": 281.6,
      "mpperlevel": 45,
      "movespeed": 350,
      "armor": 27.536,
      "armorperlevel": 2.7,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 175,
      "hpregen": 6,
      "hpregenperlevel": 0.75,
      "mpregen": 7.505,
      "mpregenperlevel": 0.6,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 60.04,
      "attackdamageperlevel": 3,
      "attackspeedoffset": -0.0672,
      "attackspeedperlevel": 2.9
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Trundle.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion3.png",
      "x": 336,
      "y": 48
    },
    "description": "Trundle is a hulking and devious troll with a mischievous streak. There is nothing he can't beat into submission and bend to his will, not even the ice itself. With his massive, frozen club, he chills his enemies to the core and runs them through with ..."
  },
  {
    "id": "tryndamere",
    "key": "23",
    "name": "Tryndamere",
    "title": "the Barbarian King",
    "tags": [
      "Fighter",
      "Assassin"
    ],
    "stats": {
      "hp": 625.64,
      "hpperlevel": 98,
      "mp": 100,
      "mpperlevel": 0,
      "movespeed": 345,
      "armor": 24.108,
      "armorperlevel": 3.1,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 125,
      "hpregen": 8.51,
      "hpregenperlevel": 0.9,
      "mpregen": 0,
      "mpregenperlevel": 0,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 61.376,
      "attackdamageperlevel": 3.2,
      "attackspeedoffset": -0.0672,
      "attackspeedperlevel": 2.9
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Tryndamere.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion3.png",
      "x": 384,
      "y": 48
    },
    "description": "Fueled by his unbridled fury and rage, Tryndamere cuts his way through the tundra, mastering the art of battle by challenging the Freljord's greatest warriors. The wrathful barbarian seeks revenge on the one who decimated his clan and strikes down all ..."
  },
  {
    "id": "twistedfate",
    "key": "4",
    "name": "Twisted Fate",
    "title": "the Card Master",
    "tags": [
      "Mage"
    ],
    "stats": {
      "hp": 521.76,
      "hpperlevel": 82,
      "mp": 265.84,
      "mpperlevel": 38,
      "movespeed": 330,
      "armor": 20.542,
      "armorperlevel": 3.15,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 525,
      "hpregen": 5.505,
      "hpregenperlevel": 0.6,
      "mpregen": 6,
      "mpregenperlevel": 0.8,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 49.954,
      "attackdamageperlevel": 3.3,
      "attackspeedoffset": -0.04,
      "attackspeedperlevel": 3.22
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/TwistedFate.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion3.png",
      "x": 432,
      "y": 48
    },
    "description": "Twisted Fate is an infamous card sharp and swindler who has gambled and charmed his way across much of the known world, earning the enmity and admiration of the rich and foolish alike. He rarely takes things seriously, greeting each day with a mocking ..."
  },
  {
    "id": "twitch",
    "key": "29",
    "name": "Twitch",
    "title": "the Plague Rat",
    "tags": [
      "Marksman",
      "Assassin"
    ],
    "stats": {
      "hp": 525.08,
      "hpperlevel": 81,
      "mp": 287.2,
      "mpperlevel": 40,
      "movespeed": 330,
      "armor": 23.04,
      "armorperlevel": 3,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 550,
      "hpregen": 6.005,
      "hpregenperlevel": 0.6,
      "mpregen": 7.255,
      "mpregenperlevel": 0.45,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 55.46,
      "attackdamageperlevel": 2.41,
      "attackspeedoffset": -0.08,
      "attackspeedperlevel": 3.38
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Twitch.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion3.png",
      "x": 0,
      "y": 96
    },
    "description": "H.I.V.E. Incident Report<br>Code Violation: Industrial Homicide<br>Casefile Status: Unsolved<br>Investigating Agent: Rol, P.<br><br>Team responded to report of suspicious character, criminal activity; proceeded to Sump Works, Sector 90TZ. Sector 90TZ ..."
  },
  {
    "id": "udyr",
    "key": "77",
    "name": "Udyr",
    "title": "the Spirit Walker",
    "tags": [
      "Fighter",
      "Tank"
    ],
    "stats": {
      "hp": 593.32,
      "hpperlevel": 99,
      "mp": 270.4,
      "mpperlevel": 30,
      "movespeed": 345,
      "armor": 25.47,
      "armorperlevel": 4,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 125,
      "hpregen": 6,
      "hpregenperlevel": 0.75,
      "mpregen": 7.505,
      "mpregenperlevel": 0.45,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 58.286,
      "attackdamageperlevel": 3.2,
      "attackspeedoffset": -0.05,
      "attackspeedperlevel": 2.67
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Udyr.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion3.png",
      "x": 48,
      "y": 96
    },
    "description": "Udyr is more than a man; he is a vessel for the untamed power of four primal animal spirits. When tapping into the spirits' bestial natures, Udyr can harness their unique strengths: the tiger grants him speed and ferocity, the turtle resilience, the ..."
  },
  {
    "id": "urgot",
    "key": "6",
    "name": "Urgot",
    "title": "the Headsman's Pride",
    "tags": [
      "Marksman",
      "Fighter"
    ],
    "stats": {
      "hp": 586.52,
      "hpperlevel": 89,
      "mp": 312.4,
      "mpperlevel": 55,
      "movespeed": 335,
      "armor": 24.544,
      "armorperlevel": 3.3,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 425,
      "hpregen": 6.505,
      "hpregenperlevel": 0.6,
      "mpregen": 8.59,
      "mpregenperlevel": 0.65,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 54.05,
      "attackdamageperlevel": 3.6,
      "attackspeedoffset": -0.03,
      "attackspeedperlevel": 2.9
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Urgot.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion3.png",
      "x": 96,
      "y": 96
    },
    "description": "There are warriors who become great for their strength, cunning, or skill with arms. Others simply refuse to die. Urgot, once a great soldier of Noxus, may constitute a case in support of the latter. Prone to diving headlong into enemy battle lines, ..."
  },
  {
    "id": "varus",
    "key": "110",
    "name": "Varus",
    "title": "the Arrow of Retribution",
    "tags": [
      "Marksman",
      "Mage"
    ],
    "stats": {
      "hp": 537.76,
      "hpperlevel": 82,
      "mp": 360.48,
      "mpperlevel": 33,
      "movespeed": 330,
      "armor": 23.212,
      "armorperlevel": 3.4,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 575,
      "hpregen": 5.42,
      "hpregenperlevel": 0.55,
      "mpregen": 7.34,
      "mpregenperlevel": 0.8,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 54.66,
      "attackdamageperlevel": 2.41,
      "attackspeedoffset": -0.05,
      "attackspeedperlevel": 3
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Varus.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion3.png",
      "x": 144,
      "y": 96
    },
    "description": "''The life of an arrow is fleeting, built of nothing but direction and intent.''<br><br>For his incomparable skill with the bow and his unquestioned sense of honor, Varus was chosen to be the warden of a sacred Ionian temple. The temple was built to ..."
  },
  {
    "id": "vayne",
    "key": "67",
    "name": "Vayne",
    "title": "the Night Hunter",
    "tags": [
      "Marksman",
      "Assassin"
    ],
    "stats": {
      "hp": 498.44,
      "hpperlevel": 83,
      "mp": 231.8,
      "mpperlevel": 35,
      "movespeed": 330,
      "armor": 19.012,
      "armorperlevel": 3.4,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 550,
      "hpregen": 5.42,
      "hpregenperlevel": 0.55,
      "mpregen": 6.97,
      "mpregenperlevel": 0.4,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 55.88,
      "attackdamageperlevel": 1.66,
      "attackspeedoffset": -0.05,
      "attackspeedperlevel": 4
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Vayne.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion3.png",
      "x": 192,
      "y": 96
    },
    "description": "The world is not always as civilized as people might think. There are still those who would follow the blackest paths of magic and become corrupted by the darker powers that flow through Runeterra. Shauna Vayne knows this fact well.<br><br>As a young ..."
  },
  {
    "id": "veigar",
    "key": "45",
    "name": "Veigar",
    "title": "the Tiny Master of Evil",
    "tags": [
      "Mage"
    ],
    "stats": {
      "hp": 492.76,
      "hpperlevel": 82,
      "mp": 392.4,
      "mpperlevel": 52,
      "movespeed": 340,
      "armor": 22.55,
      "armorperlevel": 3.75,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 525,
      "hpregen": 5.42,
      "hpregenperlevel": 0.55,
      "mpregen": 6,
      "mpregenperlevel": 0.8,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 50.71,
      "attackdamageperlevel": 2.625,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 2.24
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Veigar.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion3.png",
      "x": 240,
      "y": 96
    },
    "description": "To most, thoughts of yordles do not conjure images to be feared. The easygoing half-pint race, though fierce, is often regarded with some degree of joviality. Their high-pitched voices and naturally cute forms inspire something of a protective ..."
  },
  {
    "id": "velkoz",
    "key": "161",
    "name": "Vel'Koz",
    "title": "the Eye of the Void",
    "tags": [
      "Mage"
    ],
    "stats": {
      "hp": 507.68,
      "hpperlevel": 76,
      "mp": 375.6,
      "mpperlevel": 42,
      "movespeed": 340,
      "armor": 21.88,
      "armorperlevel": 3.5,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 525,
      "hpregen": 5.42,
      "hpregenperlevel": 0.55,
      "mpregen": 6,
      "mpregenperlevel": 0.8,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 54.9379,
      "attackdamageperlevel": 3.14159,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 1.36
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Velkoz.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion3.png",
      "x": 288,
      "y": 96
    },
    "description": "I pass into the sudden glare. Blink. Blink, blink, blink. My eyes adjust and evaluate the landscape before me.<br><br>There's a scurrying. I look down to find a small, white creature standing on its hind legs, sniffing at my body. It intrigues me...."
  },
  {
    "id": "vi",
    "key": "254",
    "name": "Vi",
    "title": "the Piltover Enforcer",
    "tags": [
      "Fighter",
      "Assassin"
    ],
    "stats": {
      "hp": 582.8,
      "hpperlevel": 85,
      "mp": 295.6,
      "mpperlevel": 45,
      "movespeed": 345,
      "armor": 25.88,
      "armorperlevel": 3.5,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 125,
      "hpregen": 9.01,
      "hpregenperlevel": 0.9,
      "mpregen": 8.09,
      "mpregenperlevel": 0.65,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 55.88,
      "attackdamageperlevel": 3.5,
      "attackspeedoffset": -0.03,
      "attackspeedperlevel": 2.5
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Vi.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion3.png",
      "x": 336,
      "y": 96
    },
    "description": "To Vi, every problem is just another brick wall to punch through with her gigantic hextech gauntlets. Though she grew up on the wrong side of the law, Vi now uses her criminal know-how to serve Piltover's police force. Vi's brash attitude, abrasive ..."
  },
  {
    "id": "viktor",
    "key": "112",
    "name": "Viktor",
    "title": "the Machine Herald",
    "tags": [
      "Mage"
    ],
    "stats": {
      "hp": 516.04,
      "hpperlevel": 78,
      "mp": 324,
      "mpperlevel": 50,
      "movespeed": 335,
      "armor": 22.72,
      "armorperlevel": 4,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 525,
      "hpregen": 7.84,
      "hpregenperlevel": 0.65,
      "mpregen": 6,
      "mpregenperlevel": 0.8,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 52.04,
      "attackdamageperlevel": 3,
      "attackspeedoffset": -0.05,
      "attackspeedperlevel": 2.11
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Viktor.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion3.png",
      "x": 384,
      "y": 96
    },
    "description": "Early in life, Viktor discovered his passion for science and invention, particularly in the field of mechanical automation. He attended Zaun's prestigious College of Techmaturgy and led the team that constructed Blitzcrank - a scientific breakthrough ..."
  },
  {
    "id": "vladimir",
    "key": "8",
    "name": "Vladimir",
    "title": "the Crimson Reaper",
    "tags": [
      "Mage",
      "Tank"
    ],
    "stats": {
      "hp": 525,
      "hpperlevel": 84,
      "mp": 2,
      "mpperlevel": 0,
      "movespeed": 330,
      "armor": 23,
      "armorperlevel": 3.3,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 450,
      "hpregen": 7.005,
      "hpregenperlevel": 0.6,
      "mpregen": 0,
      "mpregenperlevel": 0,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 52,
      "attackdamageperlevel": 3,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 2
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Vladimir.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion3.png",
      "x": 432,
      "y": 96
    },
    "description": "There is a temple hidden in the mountains between Noxus and the Tempest Flats, where the secrets of an ancient and terrifying sorcery are kept. The area surrounding the temple is littered with the exsanguinated corpses of those who have mistakenly ..."
  },
  {
    "id": "volibear",
    "key": "106",
    "name": "Volibear",
    "title": "the Thunder's Roar",
    "tags": [
      "Fighter",
      "Tank"
    ],
    "stats": {
      "hp": 584.48,
      "hpperlevel": 86,
      "mp": 270.4,
      "mpperlevel": 30,
      "movespeed": 345,
      "armor": 26.38,
      "armorperlevel": 3.5,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 125,
      "hpregen": 8.09,
      "hpregenperlevel": 0.65,
      "mpregen": 8.09,
      "mpregenperlevel": 0.65,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 59.544,
      "attackdamageperlevel": 3.3,
      "attackspeedoffset": -0.05,
      "attackspeedperlevel": 2.67
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Volibear.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion4.png",
      "x": 0,
      "y": 0
    },
    "description": "The unforgiving northern reaches of the Freljord are home to the Ursine, a fierce and warlike race that has endured the barren tundra for thousands of years. Their leader is a furious adversary who commands the force of lightning to strike fear within ..."
  },
  {
    "id": "warwick",
    "key": "19",
    "name": "Warwick",
    "title": "the Blood Hunter",
    "tags": [
      "Fighter",
      "Tank"
    ],
    "stats": {
      "hp": 592.64,
      "hpperlevel": 98,
      "mp": 240.4,
      "mpperlevel": 30,
      "movespeed": 345,
      "armor": 25.88,
      "armorperlevel": 3.5,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 125,
      "hpregen": 8.39,
      "hpregenperlevel": 0.8,
      "mpregen": 8.105,
      "mpregenperlevel": 0.6,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 62.43,
      "attackdamageperlevel": 3.375,
      "attackspeedoffset": -0.08,
      "attackspeedperlevel": 2.88
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Warwick.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion4.png",
      "x": 48,
      "y": 0
    },
    "description": "Warwick was once a man revered for his ability to track down human specimens for the darkest types of scientific research. When his ambitions exceeded his physical limits, he drank a dangerous elixir to transform himself into an unstoppable manhunter. ..."
  },
  {
    "id": "xerath",
    "key": "101",
    "name": "Xerath",
    "title": "the Magus Ascendant",
    "tags": [
      "Mage",
      "Assassin"
    ],
    "stats": {
      "hp": 514.4,
      "hpperlevel": 80,
      "mp": 366.96,
      "mpperlevel": 44,
      "movespeed": 340,
      "armor": 21.88,
      "armorperlevel": 3.5,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 525,
      "hpregen": 5.42,
      "hpregenperlevel": 0.55,
      "mpregen": 6,
      "mpregenperlevel": 0.8,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 54.7,
      "attackdamageperlevel": 3,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 1.36
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Xerath.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion4.png",
      "x": 96,
      "y": 0
    },
    "description": "''A lifetime as a slave has prepared me for eternity as your master.''<br><br>Xerath is an Ascended Magus of ancient Shurima, a being of arcane energy writhing in the broken shards of a magical sarcophagus. For millennia, he was trapped beneath the ..."
  },
  {
    "id": "xinzhao",
    "key": "5",
    "name": "Xin Zhao",
    "title": "the Seneschal of Demacia",
    "tags": [
      "Fighter",
      "Assassin"
    ],
    "stats": {
      "hp": 600,
      "hpperlevel": 92,
      "mp": 273.8,
      "mpperlevel": 35,
      "movespeed": 345,
      "armor": 25.88,
      "armorperlevel": 3.5,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 175,
      "hpregen": 8.175,
      "hpregenperlevel": 0.7,
      "mpregen": 7.255,
      "mpregenperlevel": 0.45,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 57.544,
      "attackdamageperlevel": 3.3,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 2.6
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/XinZhao.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion4.png",
      "x": 144,
      "y": 0
    },
    "description": "''Death is inevitable, one can only avoid defeat.''<br><br>Whenever Jarvan III, the king of Demacia, delivers one of his rallying speeches from the glinting marble balcony atop the Royal Palace, Xin Zhao is at his side. Coined the Seneschal of Demacia,..."
  },
  {
    "id": "yasuo",
    "key": "157",
    "name": "Yasuo",
    "title": "the Unforgiven",
    "tags": [
      "Fighter",
      "Assassin"
    ],
    "stats": {
      "hp": 517.76,
      "hpperlevel": 82,
      "mp": 100,
      "mpperlevel": 0,
      "movespeed": 345,
      "armor": 24.712,
      "armorperlevel": 3.4,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 175,
      "hpregen": 6.51,
      "hpregenperlevel": 0.9,
      "mpregen": 0,
      "mpregenperlevel": 0,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 55.376,
      "attackdamageperlevel": 3.2,
      "attackspeedoffset": -0.067,
      "attackspeedperlevel": 2.5
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Yasuo.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion4.png",
      "x": 192,
      "y": 0
    },
    "description": "Yasuo is a man of resolve, an agile swordsman who wields the wind itself to cut down his foes. This once-proud warrior has been disgraced by a false accusation and forced into a desperate fight for survival. With the world turned against him, he will ..."
  },
  {
    "id": "yorick",
    "key": "83",
    "name": "Yorick",
    "title": "Shepherd of Souls",
    "tags": [
      "Fighter",
      "Tank"
    ],
    "stats": {
      "hp": 580,
      "hpperlevel": 100,
      "mp": 300,
      "mpperlevel": 40,
      "movespeed": 340,
      "armor": 30,
      "armorperlevel": 4,
      "spellblock": 32,
      "spellblockperlevel": 1.25,
      "attackrange": 175,
      "hpregen": 8,
      "hpregenperlevel": 0.8,
      "mpregen": 7.5,
      "mpregenperlevel": 0.75,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 57,
      "attackdamageperlevel": 5,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 2
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Yorick.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion4.png",
      "x": 240,
      "y": 0
    },
    "description": "''These isles… How they scream.''<br>The last survivor of a long-forgotten religious order, Yorick is both blessed and cursed with power over the dead. Trapped on the Shadow Isles, his only companions are the rotting corpses and shrieking spirits that ..."
  },
  {
    "id": "zac",
    "key": "154",
    "name": "Zac",
    "title": "the Secret Weapon",
    "tags": [
      "Tank",
      "Fighter"
    ],
    "stats": {
      "hp": 614.6,
      "hpperlevel": 95,
      "mp": 0,
      "mpperlevel": 0,
      "movespeed": 340,
      "armor": 23.88,
      "armorperlevel": 3.5,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 175,
      "hpregen": 7.92,
      "hpregenperlevel": 0.55,
      "mpregen": 0,
      "mpregenperlevel": 0,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 59.67,
      "attackdamageperlevel": 3.375,
      "attackspeedoffset": -0.02,
      "attackspeedperlevel": 1.6
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Zac.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion4.png",
      "x": 288,
      "y": 0
    },
    "description": "Zac is the product of a Zaun experiment to manufacture a hexchem-engineered supersoldier - the Zaun Amorphous Combatant. Combining brute strength with limitless flexibility, he is a versatile juggernaut: a creative fighter who bounces over obstacles ..."
  },
  {
    "id": "zed",
    "key": "238",
    "name": "Zed",
    "title": "the Master of Shadows",
    "tags": [
      "Assassin",
      "Fighter"
    ],
    "stats": {
      "hp": 579.4,
      "hpperlevel": 80,
      "mp": 200,
      "mpperlevel": 0,
      "movespeed": 345,
      "armor": 26.88,
      "armorperlevel": 3.5,
      "spellblock": 32.1,
      "spellblockperlevel": 1.25,
      "attackrange": 125,
      "hpregen": 7.09,
      "hpregenperlevel": 0.65,
      "mpregen": 50,
      "mpregenperlevel": 0,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 54.712,
      "attackdamageperlevel": 3.4,
      "attackspeedoffset": -0.03,
      "attackspeedperlevel": 2.1
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Zed.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion4.png",
      "x": 336,
      "y": 0
    },
    "description": "Zed is the first ninja in 200 years to unlock the ancient, forbidden ways. He defied his clan and master, casting off the balance and discipline that had shackled him all his life. Zed now offers power to those who embrace knowledge of the shadows, ..."
  },
  {
    "id": "ziggs",
    "key": "115",
    "name": "Ziggs",
    "title": "the Hexplosives Expert",
    "tags": [
      "Mage"
    ],
    "stats": {
      "hp": 524.4,
      "hpperlevel": 80,
      "mp": 384,
      "mpperlevel": 47,
      "movespeed": 325,
      "armor": 21.544,
      "armorperlevel": 3.3,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 550,
      "hpregen": 6.255,
      "hpregenperlevel": 0.6,
      "mpregen": 6,
      "mpregenperlevel": 0.8,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 54.208,
      "attackdamageperlevel": 3.1,
      "attackspeedoffset": -0.04734,
      "attackspeedperlevel": 2
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Ziggs.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion4.png",
      "x": 384,
      "y": 0
    },
    "description": "Ziggs was born with a talent for tinkering, but his chaotic, hyperactive nature was unusual among yordle scientists. Aspiring to be a revered inventor like Heimerdinger, he rattled through ambitious projects with manic zeal, emboldened by both his ..."
  },
  {
    "id": "zilean",
    "key": "26",
    "name": "Zilean",
    "title": "the Chronokeeper",
    "tags": [
      "Support",
      "Mage"
    ],
    "stats": {
      "hp": 499.28,
      "hpperlevel": 77,
      "mp": 360.8,
      "mpperlevel": 60,
      "movespeed": 335,
      "armor": 19.134,
      "armorperlevel": 3.8,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 550,
      "hpregen": 5.44,
      "hpregenperlevel": 0.5,
      "mpregen": 8.5,
      "mpregenperlevel": 0.8,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 51.64,
      "attackdamageperlevel": 3,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 2.13
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Zilean.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion4.png",
      "x": 432,
      "y": 0
    },
    "description": "In the wastelands of Urtistan, there was once a great city. It perished long ago in a terrible Rune War, like most of the lands below the Great Barrier. Nevertheless, one man survived: a sorcerer named Zilean. Being obsessed with time, it was only ..."
  },
  {
    "id": "zyra",
    "key": "143",
    "name": "Zyra",
    "title": "Rise of the Thorns",
    "tags": [
      "Mage",
      "Support"
    ],
    "stats": {
      "hp": 499.32,
      "hpperlevel": 74,
      "mp": 334,
      "mpperlevel": 50,
      "movespeed": 340,
      "armor": 20.04,
      "armorperlevel": 3,
      "spellblock": 30,
      "spellblockperlevel": 0,
      "attackrange": 575,
      "hpregen": 5.69,
      "hpregenperlevel": 0.5,
      "mpregen": 8.5,
      "mpregenperlevel": 0.8,
      "crit": 0,
      "critperlevel": 0,
      "attackdamage": 53.376,
      "attackdamageperlevel": 3.2,
      "attackspeedoffset": 0,
      "attackspeedperlevel": 2.11
    },
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/champion/Zyra.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/champion4.png",
      "x": 0,
      "y": 48
    },
    "description": "Longing to take control of her fate, the ancient, dying plant Zyra transferred her consciousness into a human body for a second chance at life. Centuries ago, she and her kind dominated the Kumungu Jungle, using thorns and vines to consume any animal ..."
  }
]
},{}],24:[function(require,module,exports){
module.exports=[
  {
    "id": "barrier",
    "name": "Barrier",
    "description": "Shields your champion from 115-455 damage (depending on champion level) for 2 seconds.",
    "tooltip": "Temporarily shields {{ f1 }} damage from your champion for 2 seconds.",
    "cooldown": 180,
    "key": "21",
    "summonerLevel": 4,
    "maxammo": "-1",
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/spell/SummonerBarrier.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/spell0.png",
      "x": 0,
      "y": 0
    }
  },
  {
    "id": "boost",
    "name": "Cleanse",
    "description": "Removes all disables and summoner spell debuffs affecting your champion and lowers the duration of incoming disables by 65% for 3 seconds.",
    "tooltip": "Removes all disables and summoner spell debuffs affecting your champion and reduces the duration of disables by 65% for the next {{ f1 }} seconds.",
    "cooldown": 210,
    "key": "1",
    "summonerLevel": 6,
    "maxammo": "-1",
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/spell/SummonerBoost.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/spell0.png",
      "x": 48,
      "y": 0
    }
  },
  {
    "id": "dot",
    "name": "Ignite",
    "description": "Ignites target enemy champion, dealing 70-410 true damage (depending on champion level) over 5 seconds, grants you vision of the target, and reduces healing effects on them for the duration.",
    "tooltip": "Ignite deals <span class=\"colorFEFCFF\">{{ f1 }}</span> true damage to target enemy champion over 5 seconds, grants you vision of the target and applies Grievous Wounds for the duration.<br><br><i>(Grievous Wounds reduces healing effects by 40%. This vision does not reveal stealthed enemies.)</i>",
    "cooldown": 210,
    "key": "14",
    "summonerLevel": 10,
    "maxammo": "-1",
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/spell/SummonerDot.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/spell0.png",
      "x": 144,
      "y": 0
    }
  },
  {
    "id": "exhaust",
    "name": "Exhaust",
    "description": "Exhausts target enemy champion, reducing their Movement Speed and Attack Speed by 30%, their Armor and Magic Resist by 10, and their damage dealt by 40% for 2.5 seconds.",
    "tooltip": "Exhausts target enemy champion, reducing their Movement Speed and Attack Speed by {{ f3 }}%, their Armor and Magic Resist by {{ f4 }}, and their damage dealt by {{ f2 }}% for 2.5 seconds.",
    "cooldown": 210,
    "key": "3",
    "summonerLevel": 4,
    "maxammo": "-1",
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/spell/SummonerExhaust.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/spell0.png",
      "x": 192,
      "y": 0
    }
  },
  {
    "id": "flash",
    "name": "Flash",
    "description": "Teleports your champion a short distance toward your cursor's location.",
    "tooltip": "Teleports your champion a short distance toward your cursor's location.",
    "cooldown": 300,
    "key": "4",
    "summonerLevel": 8,
    "maxammo": "-1",
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/spell/SummonerFlash.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/spell0.png",
      "x": 240,
      "y": 0
    }
  },
  {
    "id": "haste",
    "name": "Ghost",
    "description": "Your champion can move through units and has 28-45% (depending on champion level) increased Movement Speed for 10 seconds.",
    "tooltip": "Your champion can move through units and has {{ f1 }}% increased Movement Speed for 10 seconds.",
    "cooldown": 180,
    "key": "6",
    "summonerLevel": 1,
    "maxammo": "-1",
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/spell/SummonerHaste.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/spell0.png",
      "x": 288,
      "y": 0
    }
  },
  {
    "id": "heal",
    "name": "Heal",
    "description": "Restores 90-345 Health (depending on champion level) and grants 30% Movement Speed for 1 second to you and target allied champion. This healing is halved for units recently affected by Summoner Heal.",
    "tooltip": "Restores {{ f1 }} Health and grants 30% Movement Speed for 1 second to your champion and target allied champion. This healing is halved for units recently affected by Summoner Heal.<br><br><span class=\"colorFFFF00\">If this spell cannot find a target, it will cast on the most wounded allied champion in range.</span>",
    "cooldown": 240,
    "key": "7",
    "summonerLevel": 1,
    "maxammo": "-1",
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/spell/SummonerHeal.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/spell0.png",
      "x": 336,
      "y": 0
    }
  },
  {
    "id": "mana",
    "name": "Clarity",
    "description": "Restores 50% of your champion's maximum Mana. Also restores allies for 25% of their maximum Mana.",
    "tooltip": "Restores {{ f1 }}% maximum Mana to your Champion and {{ f2 }}% to nearby allies.",
    "cooldown": 240,
    "key": "13",
    "summonerLevel": 1,
    "maxammo": "-1",
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/spell/SummonerMana.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/spell0.png",
      "x": 384,
      "y": 0
    }
  },
  {
    "id": "pororecall",
    "name": "To the King!",
    "description": "Quickly travel to the Poro King's side.",
    "tooltip": "<span class=\"colorFFE076\">Passive:</span> Hitting an enemy champion with a Poro gives your team a Poro Mark. Upon reaching 10 Poro Marks, your team summons the Poro King to fight alongside them. While the Poro King is active, no Poro Marks can be scored by either team.<br><br><span class=\"colorFFE076\">Active:</span> Quickly dash to King Poro's side. Can only be cast while the Poro King is summoned for your team. <br><br><i><span class=\"colorFDD017\">''Poros tug the heartstrings. The rest of you just comes along for the ride.''</span></i>",
    "cooldown": 10,
    "key": "30",
    "summonerLevel": 1,
    "maxammo": "-1",
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/spell/SummonerPoroRecall.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/spell0.png",
      "x": 432,
      "y": 0
    }
  },
  {
    "id": "porothrow",
    "name": "Poro Toss",
    "description": "Toss a Poro at your enemies. If it hits, you can quickly travel to your target as a follow up.",
    "tooltip": "Toss a Poro a long distance, dealing {{ f2 }} true damage to the first enemy unit hit. This ability can be recast for 3 seconds if it hits an enemy to dash to the target hit. Dashing to the target will reduce the cooldown of Poro Toss by 5 seconds.<br><br>Poros are not blocked by spell shields or wind walls because they are animals, not spells!<br><br><i><span class=\"colorFDD017\">''Poros are a model for Runeterran aerodynamics.''</span></i>",
    "cooldown": 20,
    "key": "31",
    "summonerLevel": 1,
    "maxammo": "-1",
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/spell/SummonerPoroThrow.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/spell0.png",
      "x": 0,
      "y": 48
    }
  },
  {
    "id": "smite",
    "name": "Smite",
    "description": "Deals 390-1000 true damage (depending on champion level) to target epic or large monster or enemy minion.",
    "tooltip": "Deals <span class=\"colorFEFCFF\">{{ f1 }}</span> true damage to target epic or large monster or enemy minion.<br><br>Smite regains a charge every {{ f3 }} seconds, up to a maximum of 2 charges.<br><br><i>Smiting Large Monsters instantly harvests additional bonuses based on the Monster. Mouse over large jungle monsters to see potential bonus rewards.</i>",
    "cooldown": 75,
    "key": "11",
    "summonerLevel": 10,
    "maxammo": "2",
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/spell/SummonerSmite.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/spell0.png",
      "x": 48,
      "y": 48
    }
  },
  {
    "id": "snowball",
    "name": "Mark",
    "description": "Throw a snowball in a straight line at your enemies. If it hits an enemy, they become marked and your champion can quickly travel to the marked target as a follow up.",
    "tooltip": "Throw a snowball a long distance, dealing {{ f1 }} true damage to the first enemy unit hit. If it hits an enemy, this ability can be recast for {{ f2 }} seconds to Dash to the tagged unit, dealing an additional {{ f5 }} true damage. Dashing to the target will reduce the cooldown of Mark by {{ f3 }}%.<br><br><span class=\"colorFFFF00\">Mark projectiles are not stopped by spell shields or projectile mitigation.</span>",
    "cooldown": 80,
    "key": "32",
    "summonerLevel": 1,
    "maxammo": "-1",
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/spell/SummonerSnowball.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/spell0.png",
      "x": 96,
      "y": 48
    }
  },
  {
    "id": "teleport",
    "name": "Teleport",
    "description": "After channeling for 4.5 seconds, teleports your champion to target allied structure, minion, or ward.",
    "tooltip": "After channeling for {{ f1 }} seconds, your champion teleports to target allied structure, minion, or ward.<br><br>You may reactivate Teleport to cancel it, placing it on a {{ f3 }} second cooldown.",
    "cooldown": 300,
    "key": "12",
    "summonerLevel": 6,
    "maxammo": "-1",
    "icon": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/spell/SummonerTeleport.png",
    "sprite": {
      "url": "http://ddragon.leagueoflegends.com/cdn/6.21.1/img/sprite/spell0.png",
      "x": 144,
      "y": 48
    }
  }
]
},{}],25:[function(require,module,exports){
var proto = Element.prototype;
var vendor = proto.matchesSelector || proto.webkitMatchesSelector || proto.mozMatchesSelector || proto.msMatchesSelector || proto.oMatchesSelector;
module.exports = match;
function match(el, selector) {
    if (vendor)
        return vendor.call(el, selector);
    var nodes = el.parentNode.querySelectorAll(selector);
    for (var i = 0; i < nodes.length; ++i) {
        if (nodes[i] == el)
            return true;
    }
    return false;
}


},{}],26:[function(require,module,exports){
'use strict';
var range;
var doc = typeof document !== 'undefined' && document;
var testEl = doc ? doc.body || doc.createElement('div') : {};
var NS_XHTML = 'http://www.w3.org/1999/xhtml';
var ELEMENT_NODE = 1;
var TEXT_NODE = 3;
var COMMENT_NODE = 8;
var hasAttributeNS;
if (testEl.hasAttributeNS) {
    hasAttributeNS = function (el, namespaceURI, name) {
        return el.hasAttributeNS(namespaceURI, name);
    };
} else if (testEl.hasAttribute) {
    hasAttributeNS = function (el, namespaceURI, name) {
        return el.hasAttribute(name);
    };
} else {
    hasAttributeNS = function (el, namespaceURI, name) {
        return !!el.getAttributeNode(name);
    };
}
function toElement(str) {
    if (!range && doc.createRange) {
        range = doc.createRange();
        range.selectNode(doc.body);
    }
    var fragment;
    if (range && range.createContextualFragment) {
        fragment = range.createContextualFragment(str);
    } else {
        fragment = doc.createElement('body');
        fragment.innerHTML = str;
    }
    return fragment.childNodes[0];
}
function syncBooleanAttrProp(fromEl, toEl, name) {
    if (fromEl[name] !== toEl[name]) {
        fromEl[name] = toEl[name];
        if (fromEl[name]) {
            fromEl.setAttribute(name, '');
        } else {
            fromEl.removeAttribute(name, '');
        }
    }
}
var specialElHandlers = {
    OPTION: function (fromEl, toEl) {
        syncBooleanAttrProp(fromEl, toEl, 'selected');
    },
    INPUT: function (fromEl, toEl) {
        syncBooleanAttrProp(fromEl, toEl, 'checked');
        syncBooleanAttrProp(fromEl, toEl, 'disabled');
        if (fromEl.value !== toEl.value) {
            fromEl.value = toEl.value;
        }
        if (!hasAttributeNS(toEl, null, 'value')) {
            fromEl.removeAttribute('value');
        }
    },
    TEXTAREA: function (fromEl, toEl) {
        var newValue = toEl.value;
        if (fromEl.value !== newValue) {
            fromEl.value = newValue;
        }
        if (fromEl.firstChild) {
            fromEl.firstChild.nodeValue = newValue;
        }
    }
};
function noop() {
}
function compareNodeNames(fromEl, toEl) {
    var fromNodeName = fromEl.nodeName;
    var toNodeName = toEl.nodeName;
    if (fromNodeName === toNodeName) {
        return true;
    }
    if (toEl.actualize && fromNodeName.charCodeAt(0) < 91 && toNodeName.charCodeAt(0) > 90) {
        return fromNodeName === toNodeName.toUpperCase();
    } else {
        return false;
    }
}
function createElementNS(name, namespaceURI) {
    return !namespaceURI || namespaceURI === NS_XHTML ? doc.createElement(name) : doc.createElementNS(namespaceURI, name);
}
function morphAttrs(fromNode, toNode) {
    if (toNode.assignAttributes) {
        toNode.assignAttributes(fromNode);
    } else {
        var attrs = toNode.attributes;
        var i;
        var attr;
        var attrName;
        var attrNamespaceURI;
        var attrValue;
        var fromValue;
        for (i = attrs.length - 1; i >= 0; --i) {
            attr = attrs[i];
            attrName = attr.name;
            attrNamespaceURI = attr.namespaceURI;
            attrValue = attr.value;
            if (attrNamespaceURI) {
                attrName = attr.localName || attrName;
                fromValue = fromNode.getAttributeNS(attrNamespaceURI, attrName);
                if (fromValue !== attrValue) {
                    fromNode.setAttributeNS(attrNamespaceURI, attrName, attrValue);
                }
            } else {
                fromValue = fromNode.getAttribute(attrName);
                if (fromValue !== attrValue) {
                    fromNode.setAttribute(attrName, attrValue);
                }
            }
        }
        attrs = fromNode.attributes;
        for (i = attrs.length - 1; i >= 0; --i) {
            attr = attrs[i];
            if (attr.specified !== false) {
                attrName = attr.name;
                attrNamespaceURI = attr.namespaceURI;
                if (attrNamespaceURI) {
                    attrName = attr.localName || attrName;
                    if (!hasAttributeNS(toNode, attrNamespaceURI, attrName)) {
                        fromNode.removeAttributeNS(attrNamespaceURI, attrName);
                    }
                } else {
                    if (!hasAttributeNS(toNode, null, attrName)) {
                        fromNode.removeAttribute(attrName);
                    }
                }
            }
        }
    }
}
function moveChildren(fromEl, toEl) {
    var curChild = fromEl.firstChild;
    while (curChild) {
        var nextChild = curChild.nextSibling;
        toEl.appendChild(curChild);
        curChild = nextChild;
    }
    return toEl;
}
function defaultGetNodeKey(node) {
    return node.id;
}
function morphdom(fromNode, toNode, options) {
    if (!options) {
        options = {};
    }
    if (typeof toNode === 'string') {
        if (fromNode.nodeName === '#document' || fromNode.nodeName === 'HTML') {
            var toNodeHtml = toNode;
            toNode = doc.createElement('html');
            toNode.innerHTML = toNodeHtml;
        } else {
            toNode = toElement(toNode);
        }
    }
    var getNodeKey = options.getNodeKey || defaultGetNodeKey;
    var onBeforeNodeAdded = options.onBeforeNodeAdded || noop;
    var onNodeAdded = options.onNodeAdded || noop;
    var onBeforeElUpdated = options.onBeforeElUpdated || noop;
    var onElUpdated = options.onElUpdated || noop;
    var onBeforeNodeDiscarded = options.onBeforeNodeDiscarded || noop;
    var onNodeDiscarded = options.onNodeDiscarded || noop;
    var onBeforeElChildrenUpdated = options.onBeforeElChildrenUpdated || noop;
    var childrenOnly = options.childrenOnly === true;
    var fromNodesLookup = {};
    var keyedRemovalList;
    function addKeyedRemoval(key) {
        if (keyedRemovalList) {
            keyedRemovalList.push(key);
        } else {
            keyedRemovalList = [key];
        }
    }
    function walkDiscardedChildNodes(node, skipKeyedNodes) {
        if (node.nodeType === ELEMENT_NODE) {
            var curChild = node.firstChild;
            while (curChild) {
                var key = undefined;
                if (skipKeyedNodes && (key = getNodeKey(curChild))) {
                    addKeyedRemoval(key);
                } else {
                    onNodeDiscarded(curChild);
                    if (curChild.firstChild) {
                        walkDiscardedChildNodes(curChild, skipKeyedNodes);
                    }
                }
                curChild = curChild.nextSibling;
            }
        }
    }
    function removeNode(node, parentNode, skipKeyedNodes) {
        if (onBeforeNodeDiscarded(node) === false) {
            return;
        }
        if (parentNode) {
            parentNode.removeChild(node);
        }
        onNodeDiscarded(node);
        walkDiscardedChildNodes(node, skipKeyedNodes);
    }
    function indexTree(node) {
        if (node.nodeType === ELEMENT_NODE) {
            var curChild = node.firstChild;
            while (curChild) {
                var key = getNodeKey(curChild);
                if (key) {
                    fromNodesLookup[key] = curChild;
                }
                indexTree(curChild);
                curChild = curChild.nextSibling;
            }
        }
    }
    indexTree(fromNode);
    function handleNodeAdded(el) {
        onNodeAdded(el);
        var curChild = el.firstChild;
        while (curChild) {
            var nextSibling = curChild.nextSibling;
            var key = getNodeKey(curChild);
            if (key) {
                var unmatchedFromEl = fromNodesLookup[key];
                if (unmatchedFromEl && compareNodeNames(curChild, unmatchedFromEl)) {
                    curChild.parentNode.replaceChild(unmatchedFromEl, curChild);
                    morphEl(unmatchedFromEl, curChild);
                }
            }
            handleNodeAdded(curChild);
            curChild = nextSibling;
        }
    }
    function morphEl(fromEl, toEl, childrenOnly) {
        var toElKey = getNodeKey(toEl);
        var curFromNodeKey;
        if (toElKey) {
            delete fromNodesLookup[toElKey];
        }
        if (toNode.isSameNode && toNode.isSameNode(fromNode)) {
            return;
        }
        if (!childrenOnly) {
            if (onBeforeElUpdated(fromEl, toEl) === false) {
                return;
            }
            morphAttrs(fromEl, toEl);
            onElUpdated(fromEl);
            if (onBeforeElChildrenUpdated(fromEl, toEl) === false) {
                return;
            }
        }
        if (fromEl.nodeName !== 'TEXTAREA') {
            var curToNodeChild = toEl.firstChild;
            var curFromNodeChild = fromEl.firstChild;
            var curToNodeKey;
            var fromNextSibling;
            var toNextSibling;
            var matchingFromEl;
            outer:
                while (curToNodeChild) {
                    toNextSibling = curToNodeChild.nextSibling;
                    curToNodeKey = getNodeKey(curToNodeChild);
                    while (curFromNodeChild) {
                        fromNextSibling = curFromNodeChild.nextSibling;
                        if (curToNodeChild.isSameNode && curToNodeChild.isSameNode(curFromNodeChild)) {
                            curToNodeChild = toNextSibling;
                            curFromNodeChild = fromNextSibling;
                            continue outer;
                        }
                        curFromNodeKey = getNodeKey(curFromNodeChild);
                        var curFromNodeType = curFromNodeChild.nodeType;
                        var isCompatible = undefined;
                        if (curFromNodeType === curToNodeChild.nodeType) {
                            if (curFromNodeType === ELEMENT_NODE) {
                                if (curToNodeKey) {
                                    if (curToNodeKey !== curFromNodeKey) {
                                        if (matchingFromEl = fromNodesLookup[curToNodeKey]) {
                                            if (curFromNodeChild.nextSibling === matchingFromEl) {
                                                isCompatible = false;
                                            } else {
                                                fromEl.insertBefore(matchingFromEl, curFromNodeChild);
                                                if (curFromNodeKey) {
                                                    addKeyedRemoval(curFromNodeKey);
                                                } else {
                                                    removeNode(curFromNodeChild, fromEl, true);
                                                }
                                                fromNextSibling = curFromNodeChild.nextSibling;
                                                curFromNodeChild = matchingFromEl;
                                            }
                                        } else {
                                            isCompatible = false;
                                        }
                                    }
                                } else if (curFromNodeKey) {
                                    isCompatible = false;
                                }
                                isCompatible = isCompatible !== false && compareNodeNames(curFromNodeChild, curToNodeChild);
                                if (isCompatible) {
                                    morphEl(curFromNodeChild, curToNodeChild);
                                }
                            } else if (curFromNodeType === TEXT_NODE || curFromNodeType == COMMENT_NODE) {
                                isCompatible = true;
                                curFromNodeChild.nodeValue = curToNodeChild.nodeValue;
                            }
                        }
                        if (isCompatible) {
                            curToNodeChild = toNextSibling;
                            curFromNodeChild = fromNextSibling;
                            continue outer;
                        }
                        if (curFromNodeKey) {
                            addKeyedRemoval(curFromNodeKey);
                        } else {
                            removeNode(curFromNodeChild, fromEl, true);
                        }
                        curFromNodeChild = fromNextSibling;
                    }
                    if (curToNodeKey && (matchingFromEl = fromNodesLookup[curToNodeKey]) && compareNodeNames(matchingFromEl, curToNodeChild)) {
                        fromEl.appendChild(matchingFromEl);
                        morphEl(matchingFromEl, curToNodeChild);
                    } else {
                        var onBeforeNodeAddedResult = onBeforeNodeAdded(curToNodeChild);
                        if (onBeforeNodeAddedResult !== false) {
                            if (onBeforeNodeAddedResult) {
                                curToNodeChild = onBeforeNodeAddedResult;
                            }
                            if (curToNodeChild.actualize) {
                                curToNodeChild = curToNodeChild.actualize(fromEl.ownerDocument || doc);
                            }
                            fromEl.appendChild(curToNodeChild);
                            handleNodeAdded(curToNodeChild);
                        }
                    }
                    curToNodeChild = toNextSibling;
                    curFromNodeChild = fromNextSibling;
                }
            while (curFromNodeChild) {
                fromNextSibling = curFromNodeChild.nextSibling;
                if (curFromNodeKey = getNodeKey(curFromNodeChild)) {
                    addKeyedRemoval(curFromNodeKey);
                } else {
                    removeNode(curFromNodeChild, fromEl, true);
                }
                curFromNodeChild = fromNextSibling;
            }
        }
        var specialElHandler = specialElHandlers[fromEl.nodeName];
        if (specialElHandler) {
            specialElHandler(fromEl, toEl);
        }
    }
    var morphedNode = fromNode;
    var morphedNodeType = morphedNode.nodeType;
    var toNodeType = toNode.nodeType;
    if (!childrenOnly) {
        if (morphedNodeType === ELEMENT_NODE) {
            if (toNodeType === ELEMENT_NODE) {
                if (!compareNodeNames(fromNode, toNode)) {
                    onNodeDiscarded(fromNode);
                    morphedNode = moveChildren(fromNode, createElementNS(toNode.nodeName, toNode.namespaceURI));
                }
            } else {
                morphedNode = toNode;
            }
        } else if (morphedNodeType === TEXT_NODE || morphedNodeType === COMMENT_NODE) {
            if (toNodeType === morphedNodeType) {
                morphedNode.nodeValue = toNode.nodeValue;
                return morphedNode;
            } else {
                morphedNode = toNode;
            }
        }
    }
    if (morphedNode === toNode) {
        onNodeDiscarded(fromNode);
    } else {
        morphEl(morphedNode, toNode, childrenOnly);
        if (keyedRemovalList) {
            for (var i = 0, len = keyedRemovalList.length; i < len; i++) {
                var elToRemove = fromNodesLookup[keyedRemovalList[i]];
                if (elToRemove) {
                    removeNode(elToRemove, elToRemove.parentNode, false);
                }
            }
        }
    }
    if (!childrenOnly && morphedNode !== fromNode && fromNode.parentNode) {
        if (morphedNode.actualize) {
            morphedNode = morphedNode.actualize(fromNode.ownerDocument || doc);
        }
        fromNode.parentNode.replaceChild(morphedNode, fromNode);
    }
    return morphedNode;
}
module.exports = morphdom;


},{}],27:[function(require,module,exports){
const window = require(18);
module.exports = nanoraf;
function nanoraf(render, raf) {
    if (!raf) {
        raf = window.requestAnimationFrame;
    }
    var inRenderingTransaction = false;
    var redrawScheduled = false;
    var currentState = null;
    return function frame(state, prev) {
        if (currentState === null && !redrawScheduled) {
            redrawScheduled = true;
            raf(function redraw() {
                redrawScheduled = false;
                if (!currentState)
                    return;
                inRenderingTransaction = true;
                render(currentState, prev);
                inRenderingTransaction = false;
                currentState = null;
            });
        }
        currentState = state;
    };
}


},{"18":18}],28:[function(require,module,exports){
var document = require(17);
var window = require(18);
var watch = Object.create(null);
var KEY_ID = 'onloadid' + (new Date() % 9000000).toString(36);
var KEY_ATTR = 'data-' + KEY_ID;
var INDEX = 0;
if (window && window.MutationObserver) {
    var observer = new MutationObserver(function (mutations) {
        if (Object.keys(watch).length < 1)
            return;
        for (var i = 0; i < mutations.length; i++) {
            if (mutations[i].attributeName === KEY_ATTR) {
                eachAttr(mutations[i], turnon, turnoff);
                continue;
            }
            eachMutation(mutations[i].removedNodes, turnoff);
            eachMutation(mutations[i].addedNodes, turnon);
        }
    });
    observer.observe(document.body, {
        childList: true,
        subtree: true,
        attributes: true,
        attributeOldValue: true,
        attributeFilter: [KEY_ATTR]
    });
}
module.exports = function onload(el, on, off, caller) {
    on = on || function () {
    };
    off = off || function () {
    };
    el.setAttribute(KEY_ATTR, 'o' + INDEX);
    watch['o' + INDEX] = [
        on,
        off,
        0,
        caller || onload.caller
    ];
    INDEX += 1;
    return el;
};
function turnon(index, el) {
    if (watch[index][0] && watch[index][2] === 0) {
        watch[index][0](el);
        watch[index][2] = 1;
    }
}
function turnoff(index, el) {
    if (watch[index][1] && watch[index][2] === 1) {
        watch[index][1](el);
        watch[index][2] = 0;
    }
}
function eachAttr(mutation, on, off) {
    var newValue = mutation.target.getAttribute(KEY_ATTR);
    if (sameOrigin(mutation.oldValue, newValue)) {
        watch[newValue] = watch[mutation.oldValue];
        return;
    }
    if (watch[mutation.oldValue]) {
        off(mutation.oldValue, mutation.target);
    }
    if (watch[newValue]) {
        on(newValue, mutation.target);
    }
}
function sameOrigin(oldValue, newValue) {
    if (!oldValue || !newValue)
        return false;
    return watch[oldValue][3] === watch[newValue][3];
}
function eachMutation(nodes, fn) {
    var keys = Object.keys(watch);
    for (var i = 0; i < nodes.length; i++) {
        if (nodes[i] && nodes[i].getAttribute && nodes[i].getAttribute(KEY_ATTR)) {
            var onloadid = nodes[i].getAttribute(KEY_ATTR);
            keys.forEach(function (k) {
                if (onloadid === k) {
                    fn(k, nodes[i]);
                }
            });
        }
        if (nodes[i].childNodes.length > 0) {
            eachMutation(nodes[i].childNodes, fn);
        }
    }
}


},{"17":17,"18":18}],29:[function(require,module,exports){
'use strict';
var repeat = require(33);
module.exports = function padLeft(str, num, ch) {
    str = str.toString();
    if (typeof num === 'undefined') {
        return str;
    }
    if (ch === 0) {
        ch = '0';
    } else if (ch) {
        ch = ch.toString();
    } else {
        ch = ' ';
    }
    return repeat(ch, num - str.length) + str;
};


},{"33":33}],30:[function(require,module,exports){
'use strict';
var repeat = require(33);
module.exports = function padLeft(val, num, str) {
    var padding = '';
    var diff = num - val.length;
    if (diff <= 5 && !str) {
        padding = '00000';
    } else if (diff <= 25 && !str) {
        padding = '000000000000000000000000000';
    } else {
        return val + repeat(str || '0', diff);
    }
    return val + padding.slice(0, diff);
};


},{"33":33}],31:[function(require,module,exports){
var trim = require(39), forEach = require(16), isArray = function (arg) {
        return Object.prototype.toString.call(arg) === '[object Array]';
    };
module.exports = function (headers) {
    if (!headers)
        return {};
    var result = {};
    forEach(trim(headers).split('\n'), function (row) {
        var index = row.indexOf(':'), key = trim(row.slice(0, index)).toLowerCase(), value = trim(row.slice(index + 1));
        if (typeof result[key] === 'undefined') {
            result[key] = value;
        } else if (isArray(result[key])) {
            result[key].push(value);
        } else {
            result[key] = [
                result[key],
                value
            ];
        }
    });
    return result;
};


},{"16":16,"39":39}],32:[function(require,module,exports){
module.exports = match;
function match(route) {
    return route.trim().replace(/[\?|#].*$/, '').replace(/^(?:https?\:)\/\//, '').replace(/^.*?(\/.*)/, '$1').replace(/\/$/, '');
}


},{}],33:[function(require,module,exports){
'use strict';
var res = '';
var cache;
module.exports = repeat;
function repeat(str, num) {
    if (typeof str !== 'string') {
        throw new TypeError('expected a string');
    }
    if (num === 1)
        return str;
    if (num === 2)
        return str + str;
    var max = str.length * num;
    if (cache !== str || typeof cache === 'undefined') {
        cache = str;
        res = '';
    } else if (res.length >= max) {
        return res.substr(0, max);
    }
    while (max > res.length && num > 1) {
        if (num & 1) {
            res += str;
        }
        num >>= 1;
        str += str;
    }
    res += str;
    res = res.substr(0, max);
    return res;
}


},{}],34:[function(require,module,exports){
const window = require(18);
module.exports = hash;
function hash(cb) {
    window.onhashchange = function (e) {
        cb(window.location.hash);
    };
}


},{"18":18}],35:[function(require,module,exports){
const document = require(17);
const window = require(18);
module.exports = history;
function history(cb) {
    window.onpopstate = function () {
        cb(document.location.href);
    };
}


},{"17":17,"18":18}],36:[function(require,module,exports){
const window = require(18);
module.exports = href;
function href(cb) {
    window.onclick = function (e) {
        const node = function traverse(node) {
            if (!node)
                return;
            if (node.localName !== 'a')
                return traverse(node.parentNode);
            if (node.href === undefined)
                return traverse(node.parentNode);
            if (window.location.host !== node.host)
                return traverse(node.parentNode);
            return node;
        }(e.target);
        if (!node)
            return;
        e.preventDefault();
        const href = node.href.replace(/#$/, '');
        cb(href);
        window.history.pushState({}, null, href);
    };
}


},{"18":18}],37:[function(require,module,exports){
const pathname = require(32);
const wayfarer = require(41);
module.exports = sheetRouter;
function sheetRouter(dft, createTree, createRoute) {
    createRoute = createRoute ? createRoute(_createRoute) : _createRoute;
    if (!createTree) {
        createTree = dft;
        dft = '';
    }
    const router = wayfarer(dft);
    const tree = createTree(createRoute);
    (function walk(tree, route) {
        if (Array.isArray(tree[0])) {
            tree.forEach(function (node) {
                walk(node, route);
            });
        } else if (tree[1]) {
            const innerRoute = tree[0] ? route.concat(tree[0]).join('/') : route.length ? route.join('/') : tree[0];
            router.on(innerRoute, tree[1]);
            walk(tree[2], route.concat(tree[0]));
        } else if (Array.isArray(tree[2])) {
            walk(tree[2], route.concat(tree[0]));
        } else {
            const nwRoute = tree[0] ? route.concat(tree[0]).join('/') : route.length ? route.join('/') : tree[0];
            router.on(nwRoute, tree[2]);
        }
    }(tree, []));
    return function match(route) {
        const args = [].slice.call(arguments);
        args[0] = pathname(args[0]);
        return router.apply(null, args);
    };
}
function _createRoute(route, inline, child) {
    if (!child) {
        child = inline;
        inline = null;
    }
    route = route.replace(/^\//, '');
    return [
        route,
        inline,
        child
    ];
}


},{"32":32,"41":41}],38:[function(require,module,exports){
(function (global){
'use strict';
(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        define([], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory();
    } else {
        root.store = factory();
    }
}(this, function () {
    var store = {}, win = typeof window != 'undefined' ? window : global, doc = win.document, localStorageName = 'localStorage', scriptTag = 'script', storage;
    store.disabled = false;
    store.version = '1.3.20';
    store.set = function (key, value) {
    };
    store.get = function (key, defaultVal) {
    };
    store.has = function (key) {
        return store.get(key) !== undefined;
    };
    store.remove = function (key) {
    };
    store.clear = function () {
    };
    store.transact = function (key, defaultVal, transactionFn) {
        if (transactionFn == null) {
            transactionFn = defaultVal;
            defaultVal = null;
        }
        if (defaultVal == null) {
            defaultVal = {};
        }
        var val = store.get(key, defaultVal);
        transactionFn(val);
        store.set(key, val);
    };
    store.getAll = function () {
    };
    store.forEach = function () {
    };
    store.serialize = function (value) {
        return JSON.stringify(value);
    };
    store.deserialize = function (value) {
        if (typeof value != 'string') {
            return undefined;
        }
        try {
            return JSON.parse(value);
        } catch (e) {
            return value || undefined;
        }
    };
    function isLocalStorageNameSupported() {
        try {
            return localStorageName in win && win[localStorageName];
        } catch (err) {
            return false;
        }
    }
    if (isLocalStorageNameSupported()) {
        storage = win[localStorageName];
        store.set = function (key, val) {
            if (val === undefined) {
                return store.remove(key);
            }
            storage.setItem(key, store.serialize(val));
            return val;
        };
        store.get = function (key, defaultVal) {
            var val = store.deserialize(storage.getItem(key));
            return val === undefined ? defaultVal : val;
        };
        store.remove = function (key) {
            storage.removeItem(key);
        };
        store.clear = function () {
            storage.clear();
        };
        store.getAll = function () {
            var ret = {};
            store.forEach(function (key, val) {
                ret[key] = val;
            });
            return ret;
        };
        store.forEach = function (callback) {
            for (var i = 0; i < storage.length; i++) {
                var key = storage.key(i);
                callback(key, store.get(key));
            }
        };
    } else if (doc && doc.documentElement.addBehavior) {
        var storageOwner, storageContainer;
        try {
            storageContainer = new ActiveXObject('htmlfile');
            storageContainer.open();
            storageContainer.write('<' + scriptTag + '>document.w=window</' + scriptTag + '><iframe src="/favicon.ico"></iframe>');
            storageContainer.close();
            storageOwner = storageContainer.w.frames[0].document;
            storage = storageOwner.createElement('div');
        } catch (e) {
            storage = doc.createElement('div');
            storageOwner = doc.body;
        }
        var withIEStorage = function (storeFunction) {
            return function () {
                var args = Array.prototype.slice.call(arguments, 0);
                args.unshift(storage);
                storageOwner.appendChild(storage);
                storage.addBehavior('#default#userData');
                storage.load(localStorageName);
                var result = storeFunction.apply(store, args);
                storageOwner.removeChild(storage);
                return result;
            };
        };
        var forbiddenCharsRegex = new RegExp('[!"#$%&\'()*+,/\\\\:;<=>?@[\\]^`{|}~]', 'g');
        var ieKeyFix = function (key) {
            return key.replace(/^d/, '___$&').replace(forbiddenCharsRegex, '___');
        };
        store.set = withIEStorage(function (storage, key, val) {
            key = ieKeyFix(key);
            if (val === undefined) {
                return store.remove(key);
            }
            storage.setAttribute(key, store.serialize(val));
            storage.save(localStorageName);
            return val;
        });
        store.get = withIEStorage(function (storage, key, defaultVal) {
            key = ieKeyFix(key);
            var val = store.deserialize(storage.getAttribute(key));
            return val === undefined ? defaultVal : val;
        });
        store.remove = withIEStorage(function (storage, key) {
            key = ieKeyFix(key);
            storage.removeAttribute(key);
            storage.save(localStorageName);
        });
        store.clear = withIEStorage(function (storage) {
            var attributes = storage.XMLDocument.documentElement.attributes;
            storage.load(localStorageName);
            for (var i = attributes.length - 1; i >= 0; i--) {
                storage.removeAttribute(attributes[i].name);
            }
            storage.save(localStorageName);
        });
        store.getAll = function (storage) {
            var ret = {};
            store.forEach(function (key, val) {
                ret[key] = val;
            });
            return ret;
        };
        store.forEach = withIEStorage(function (storage, callback) {
            var attributes = storage.XMLDocument.documentElement.attributes;
            for (var i = 0, attr; attr = attributes[i]; ++i) {
                callback(attr.name, store.deserialize(storage.getAttribute(attr.name)));
            }
        });
    }
    try {
        var testKey = '__storejs__';
        store.set(testKey, testKey);
        if (store.get(testKey) != testKey) {
            store.disabled = true;
        }
        store.remove(testKey);
    } catch (e) {
        store.disabled = true;
    }
    store.enabled = !store.disabled;
    return store;
}));


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],39:[function(require,module,exports){
exports = module.exports = trim;
function trim(str) {
    return str.replace(/^\s*|\s*$/g, '');
}
exports.left = function (str) {
    return str.replace(/^\s*/, '');
};
exports.right = function (str) {
    return str.replace(/\s*$/, '');
};


},{}],40:[function(require,module,exports){
'use strict';
module.exports = function (prefix, suffix) {
    var id = 0;
    prefix = prefix || '';
    suffix = suffix || '';
    return function () {
        return prefix + id++ + suffix;
    };
};


},{}],41:[function(require,module,exports){
const trie = require(42);
module.exports = Wayfarer;
function Wayfarer(dft) {
    if (!(this instanceof Wayfarer))
        return new Wayfarer(dft);
    const _default = (dft || '').replace(/^\//, '');
    const _trie = trie();
    emit._trie = _trie;
    emit.emit = emit;
    emit.on = on;
    emit._wayfarer = true;
    return emit;
    function on(route, cb) {
        route = route || '/';
        if (cb && cb._wayfarer && cb._trie) {
            _trie.mount(route, cb._trie.trie);
        } else {
            const node = _trie.create(route);
            node.cb = cb;
        }
        return emit;
    }
    function emit(route) {
        const args = new Array(arguments.length);
        for (var i = 1; i < args.length; i++) {
            args[i] = arguments[i];
        }
        const node = _trie.match(route);
        if (node && node.cb) {
            args[0] = node.params;
            return node.cb.apply(null, args);
        }
        const dft = _trie.match(_default);
        if (dft && dft.cb) {
            args[0] = dft.params;
            return dft.cb.apply(null, args);
        }
        throw new Error('route \'' + route + '\' did not match');
    }
}


},{"42":42}],42:[function(require,module,exports){
const mutate = require(45);
const xtend = require(44);
module.exports = Trie;
function Trie() {
    if (!(this instanceof Trie))
        return new Trie();
    this.trie = { nodes: {} };
}
Trie.prototype.create = function (route) {
    const routes = route.replace(/^\//, '').split('/');
    return function createNode(index, trie, routes) {
        const route = routes[index];
        if (route === undefined)
            return trie;
        var node = null;
        if (/^:/.test(route)) {
            if (!trie.nodes['$$']) {
                node = { nodes: {} };
                trie.nodes['$$'] = node;
            } else {
                node = trie.nodes['$$'];
            }
            trie.name = route.replace(/^:/, '');
        } else if (!trie.nodes[route]) {
            node = { nodes: {} };
            trie.nodes[route] = node;
        } else {
            node = trie.nodes[route];
        }
        return createNode(index + 1, node, routes);
    }(0, this.trie, routes);
};
Trie.prototype.match = function (route) {
    const routes = route.replace(/^\//, '').split('/');
    const params = {};
    var node = function search(index, trie) {
        if (trie === undefined)
            return undefined;
        const route = routes[index];
        if (route === undefined)
            return trie;
        if (trie.nodes[route]) {
            return search(index + 1, trie.nodes[route]);
        } else if (trie.name) {
            params[trie.name] = route;
            return search(index + 1, trie.nodes['$$']);
        } else {
            return search(index + 1);
        }
    }(0, this.trie);
    if (!node)
        return undefined;
    node = xtend(node);
    node.params = params;
    return node;
};
Trie.prototype.mount = function (route, trie) {
    const split = route.replace(/^\//, '').split('/');
    var node = null;
    var key = null;
    if (split.length === 1) {
        key = split[0];
        node = this.create(key);
    } else {
        const headArr = split.splice(0, split.length - 1);
        const head = headArr.join('/');
        key = split[0];
        node = this.create(head);
    }
    mutate(node.nodes, trie.nodes);
    if (trie.name)
        node.name = trie.name;
    if (node.nodes['']) {
        Object.keys(node.nodes['']).forEach(function (key) {
            if (key === 'nodes')
                return;
            node[key] = node.nodes[''][key];
        });
        mutate(node.nodes, node.nodes[''].nodes);
        delete node.nodes[''].nodes;
    }
};


},{"44":44,"45":45}],43:[function(require,module,exports){
'use strict';
var window = require(18);
var isFunction = require(22);
var parseHeaders = require(31);
var xtend = require(44);
module.exports = createXHR;
createXHR.XMLHttpRequest = window.XMLHttpRequest || noop;
createXHR.XDomainRequest = 'withCredentials' in new createXHR.XMLHttpRequest() ? createXHR.XMLHttpRequest : window.XDomainRequest;
forEachArray([
    'get',
    'put',
    'post',
    'patch',
    'head',
    'delete'
], function (method) {
    createXHR[method === 'delete' ? 'del' : method] = function (uri, options, callback) {
        options = initParams(uri, options, callback);
        options.method = method.toUpperCase();
        return _createXHR(options);
    };
});
function forEachArray(array, iterator) {
    for (var i = 0; i < array.length; i++) {
        iterator(array[i]);
    }
}
function isEmpty(obj) {
    for (var i in obj) {
        if (obj.hasOwnProperty(i))
            return false;
    }
    return true;
}
function initParams(uri, options, callback) {
    var params = uri;
    if (isFunction(options)) {
        callback = options;
        if (typeof uri === 'string') {
            params = { uri: uri };
        }
    } else {
        params = xtend(options, { uri: uri });
    }
    params.callback = callback;
    return params;
}
function createXHR(uri, options, callback) {
    options = initParams(uri, options, callback);
    return _createXHR(options);
}
function _createXHR(options) {
    if (typeof options.callback === 'undefined') {
        throw new Error('callback argument missing');
    }
    var called = false;
    var callback = function cbOnce(err, response, body) {
        if (!called) {
            called = true;
            options.callback(err, response, body);
        }
    };
    function readystatechange() {
        if (xhr.readyState === 4) {
            loadFunc();
        }
    }
    function getBody() {
        var body = undefined;
        if (xhr.response) {
            body = xhr.response;
        } else {
            body = xhr.responseText || getXml(xhr);
        }
        if (isJson) {
            try {
                body = JSON.parse(body);
            } catch (e) {
            }
        }
        return body;
    }
    var failureResponse = {
        body: undefined,
        headers: {},
        statusCode: 0,
        method: method,
        url: uri,
        rawRequest: xhr
    };
    function errorFunc(evt) {
        clearTimeout(timeoutTimer);
        if (!(evt instanceof Error)) {
            evt = new Error('' + (evt || 'Unknown XMLHttpRequest Error'));
        }
        evt.statusCode = 0;
        return callback(evt, failureResponse);
    }
    function loadFunc() {
        if (aborted)
            return;
        var status;
        clearTimeout(timeoutTimer);
        if (options.useXDR && xhr.status === undefined) {
            status = 200;
        } else {
            status = xhr.status === 1223 ? 204 : xhr.status;
        }
        var response = failureResponse;
        var err = null;
        if (status !== 0) {
            response = {
                body: getBody(),
                statusCode: status,
                method: method,
                headers: {},
                url: uri,
                rawRequest: xhr
            };
            if (xhr.getAllResponseHeaders) {
                response.headers = parseHeaders(xhr.getAllResponseHeaders());
            }
        } else {
            err = new Error('Internal XMLHttpRequest Error');
        }
        return callback(err, response, response.body);
    }
    var xhr = options.xhr || null;
    if (!xhr) {
        if (options.cors || options.useXDR) {
            xhr = new createXHR.XDomainRequest();
        } else {
            xhr = new createXHR.XMLHttpRequest();
        }
    }
    var key;
    var aborted;
    var uri = xhr.url = options.uri || options.url;
    var method = xhr.method = options.method || 'GET';
    var body = options.body || options.data || null;
    var headers = xhr.headers = options.headers || {};
    var sync = !!options.sync;
    var isJson = false;
    var timeoutTimer;
    if ('json' in options) {
        isJson = true;
        headers['accept'] || headers['Accept'] || (headers['Accept'] = 'application/json');
        if (method !== 'GET' && method !== 'HEAD') {
            headers['content-type'] || headers['Content-Type'] || (headers['Content-Type'] = 'application/json');
            body = JSON.stringify(options.json);
        }
    }
    xhr.onreadystatechange = readystatechange;
    xhr.onload = loadFunc;
    xhr.onerror = errorFunc;
    xhr.onprogress = function () {
    };
    xhr.ontimeout = errorFunc;
    xhr.open(method, uri, !sync, options.username, options.password);
    if (!sync) {
        xhr.withCredentials = !!options.withCredentials;
    }
    if (!sync && options.timeout > 0) {
        timeoutTimer = setTimeout(function () {
            aborted = true;
            xhr.abort('timeout');
            var e = new Error('XMLHttpRequest timeout');
            e.code = 'ETIMEDOUT';
            errorFunc(e);
        }, options.timeout);
    }
    if (xhr.setRequestHeader) {
        for (key in headers) {
            if (headers.hasOwnProperty(key)) {
                xhr.setRequestHeader(key, headers[key]);
            }
        }
    } else if (options.headers && !isEmpty(options.headers)) {
        throw new Error('Headers cannot be set on an XDomainRequest object');
    }
    if ('responseType' in options) {
        xhr.responseType = options.responseType;
    }
    if ('beforeSend' in options && typeof options.beforeSend === 'function') {
        options.beforeSend(xhr);
    }
    xhr.send(body);
    return xhr;
}
function getXml(xhr) {
    if (xhr.responseType === 'document') {
        return xhr.responseXML;
    }
    var firefoxBugTakenEffect = xhr.status === 204 && xhr.responseXML && xhr.responseXML.documentElement.nodeName === 'parsererror';
    if (xhr.responseType === '' && !firefoxBugTakenEffect) {
        return xhr.responseXML;
    }
    return null;
}
function noop() {
}


},{"18":18,"22":22,"31":31,"44":44}],44:[function(require,module,exports){
module.exports = extend;
var hasOwnProperty = Object.prototype.hasOwnProperty;
function extend() {
    var target = {};
    for (var i = 0; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
                target[key] = source[key];
            }
        }
    }
    return target;
}


},{}],45:[function(require,module,exports){
module.exports = extend;
var hasOwnProperty = Object.prototype.hasOwnProperty;
function extend(target) {
    for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
                target[key] = source[key];
            }
        }
    }
    return target;
}


},{}],46:[function(require,module,exports){
var bel = require(4);
var morphdom = require(26);
var defaultEvents = require(47);
module.exports = bel;
module.exports.update = function (fromNode, toNode, opts) {
    if (!opts)
        opts = {};
    if (opts.events !== false) {
        if (!opts.onBeforeElUpdated)
            opts.onBeforeElUpdated = copier;
    }
    return morphdom(fromNode, toNode, opts);
    function copier(f, t) {
        var events = opts.events || defaultEvents;
        for (var i = 0; i < events.length; i++) {
            var ev = events[i];
            if (t[ev]) {
                f[ev] = t[ev];
            } else if (f[ev]) {
                f[ev] = undefined;
            }
        }
        if (f.nodeName === 'INPUT' && f.type !== 'file' || f.nodeName === 'SELECT') {
            if (t.getAttribute('value') === null)
                t.value = f.value;
        } else if (f.nodeName === 'TEXTAREA') {
            if (t.getAttribute('value') === null)
                f.value = t.value;
        }
    }
};


},{"26":26,"4":4,"47":47}],47:[function(require,module,exports){
module.exports = [
    'onclick',
    'ondblclick',
    'onmousedown',
    'onmouseup',
    'onmouseover',
    'onmousemove',
    'onmouseout',
    'ondragstart',
    'ondrag',
    'ondragenter',
    'ondragleave',
    'ondragover',
    'ondrop',
    'ondragend',
    'onkeydown',
    'onkeypress',
    'onkeyup',
    'onunload',
    'onabort',
    'onerror',
    'onresize',
    'onscroll',
    'onselect',
    'onchange',
    'onsubmit',
    'onreset',
    'onfocus',
    'onblur',
    'oninput',
    'oncontextmenu',
    'onfocusin',
    'onfocusout'
];


},{}],48:[function(require,module,exports){
'use strict';
var _choo = require(8);
var _choo2 = _interopRequireDefault(_choo);
var _fastclick = require(15);
var _fastclick2 = _interopRequireDefault(_fastclick);
var _chooLog = require(6);
var _chooLog2 = _interopRequireDefault(_chooLog);
var _store = require(38);
var _store2 = _interopRequireDefault(_store);
var _api = require(50);
var _api2 = _interopRequireDefault(_api);
var _app = require(51);
var _app2 = _interopRequireDefault(_app);
var _game = require(52);
var _game2 = _interopRequireDefault(_game);
var _welcome = require(54);
var _welcome2 = _interopRequireDefault(_welcome);
var _ingame = require(53);
var _ingame2 = _interopRequireDefault(_ingame);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}
window.onerror = function (message, file, line) {
    mixpanel.track('js:err', {
        message: message,
        file: file,
        line: line
    });
};
if (null == _store2.default.get('app:summoner')) {
    _store2.default.set('app:summoner', '');
}
if (null == _store2.default.get('app:region')) {
    _store2.default.set('app:region', 'EUW');
}
var app = (0, _choo2.default)();
app.use((0, _chooLog2.default)());
app.use({
    wrapInitialState: function wrapInitialState(models) {
        var app = models.app;
        app.summoner = _store2.default.get('app:summoner');
        app.region = _store2.default.get('app:region');
        return models;
    }
});
app.model(_api2.default);
app.model(_app2.default);
app.model(_game2.default);
app.router(function (route) {
    return [
        route('/', _welcome2.default),
        route('/ingame', _ingame2.default)
    ];
});
var start = function start(uuid) {
    mixpanel.identify(uuid);
    mixpanel.people.increment('sessions');
    var tree = app.start();
    document.body.appendChild(tree);
    document.body.classList.add('-ready');
    (0, _fastclick2.default)(document.body);
};
if (window.cordova) {
    document.addEventListener('deviceready', function () {
        start(device.uuid);
        plugins.insomnia.keepAwake();
        document.addEventListener('backbutton', function () {
            history.back();
        });
    });
} else {
    start(-1);
}


},{"15":15,"38":38,"50":50,"51":51,"52":52,"53":53,"54":54,"6":6,"8":8}],49:[function(require,module,exports){
'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
exports.default = renderIf;
function renderIf(condition, state, renderer) {
    return condition ? renderer(state) : '';
}


},{}],50:[function(require,module,exports){
'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
var _lolChampions = require(23);
var _lolChampions2 = _interopRequireDefault(_lolChampions);
var _arrayFind = require(1);
var _arrayFind2 = _interopRequireDefault(_arrayFind);
var _lolSpells = require(24);
var _lolSpells2 = _interopRequireDefault(_lolSpells);
var _store = require(38);
var _store2 = _interopRequireDefault(_store);
var _uniqueid = require(40);
var _uniqueid2 = _interopRequireDefault(_uniqueid);
var _xhr = require(43);
var _xhr2 = _interopRequireDefault(_xhr);
var _xtend = require(44);
var _xtend2 = _interopRequireDefault(_xtend);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}
var proxyUrl = 'https://wt-ngryman-gmail_com-0.run.webtask.io/riot-proxy';
var endpoint = function endpoint(name) {
    var region = _store2.default.get('app:region');
    switch (name) {
    case 'summoner':
        return '/api/lol/' + region + '/v1.4/summoner/by-name';
    case 'ennemies':
        return '/observer-mode/rest/consumer/getSpectatorGameInfo/' + region + '1';
    }
};
var error = function error(message, url, status, done) {
    done({
        message: message,
        url: url,
        status: status
    });
};
var uid = (0, _uniqueid2.default)();
exports.default = {
    namespace: 'api',
    effects: {
        request: function request(url, state, send, done) {
            var region = _store2.default.get('app:region');
            return (0, _xhr2.default)(proxyUrl + '?url=' + url + '&region=' + region, { json: true }, function (err, res, body) {
                if (null == body.status) {
                    done(null, body);
                } else {
                    done(body.status.status_code);
                }
            });
        },
        summoner: function summoner(name, state, send, done) {
            var summoner = _store2.default.get('api:summoner');
            if (null != summoner && summoner.name === name)
                return done(null, summoner);
            var url = endpoint('summoner') + '/' + name;
            send('api:request', url, function (err, body) {
                if (err > 400)
                    return error('Unknown summoner', url, err, done);
                var summoner = body[name.toLowerCase().replace(/ /g, '')];
                if (!summoner)
                    return error('No summoner found', url, err, done);
                _store2.default.set('api:summoner', summoner);
                done(null, summoner);
            });
        },
        game: function game(summoner, state, send, done) {
            var url = endpoint('ennemies') + '/' + summoner.id;
            send('api:request', url, function (err, body) {
                if (err > 400)
                    return error('No live game found', url, err, done);
                if ('CLASSIC' !== body.gameMode || 'MATCHED_GAME' !== body.gameType)
                    return error('Game mode not supported', url, err, done);
                var gameId = body.gameId, participants = body.participants;
                var summonerTeam = (0, _arrayFind2.default)(participants, function (participant) {
                    return summoner.name === participant.summonerName;
                }).teamId;
                var ennemies = participants.filter(function (participant) {
                    return participant.teamId !== summonerTeam;
                }).map(function (participant) {
                    return {
                        name: participant.summonerName,
                        champion: createChampion(participant.championId),
                        spells: [
                            createSpell(participant.spell1Id),
                            createSpell(participant.spell2Id)
                        ]
                    };
                });
                done(null, {
                    gameId: gameId,
                    ennemies: ennemies
                });
            });
        }
    }
};
function createChampion(id) {
    return (0, _arrayFind2.default)(_lolChampions2.default, function (c) {
        return c.key === String(id);
    });
}
function createSpell(id) {
    var spell = (0, _arrayFind2.default)(_lolSpells2.default, function (s) {
        return s.key === String(id);
    });
    return (0, _xtend2.default)({}, spell, {
        uid: uid(),
        state: 'available',
        cooldown: 0,
        refCooldown: spell.cooldown
    });
}


},{"1":1,"23":23,"24":24,"38":38,"40":40,"43":43,"44":44}],51:[function(require,module,exports){
'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
var _store = require(38);
var _store2 = _interopRequireDefault(_store);
var _xtend = require(44);
var _xtend2 = _interopRequireDefault(_xtend);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}
var errTimeoutId = void 0;
exports.default = {
    namespace: 'app',
    state: {
        title: '<em>No</em> Flash',
        tagline: 'Track summoner spells',
        loading: false,
        error: '',
        summoner: _store2.default.get('app:summoner'),
        region: _store2.default.get('app:region')
    },
    effects: {
        summoner: function summoner(_summoner, state, send, done) {
            _store2.default.set('app:summoner', _summoner);
            send('app:set', { summoner: _summoner }, done);
        },
        region: function region(_region, state, send, done) {
            _store2.default.set('app:region', _region);
            send('app:set', { region: _region }, done);
        },
        loading: function loading(data, state, send, done) {
            send('app:set', {
                error: '',
                loading: true
            }, done);
        },
        error: function error(data, state, send, done) {
            send('app:set', {
                error: data.err.message,
                loading: false
            }, done);
            mixpanel.track('app:error', data.err);
            clearTimeout(errTimeoutId);
            errTimeoutId = setTimeout(function () {
                send('app:set', {
                    error: '',
                    loading: false
                }, done);
            }, 3000);
        },
        clear: function clear(data, state, send, done) {
            send('app:set', {
                error: '',
                loading: false
            }, done);
        }
    },
    reducers: {
        set: function set(data, state) {
            return (0, _xtend2.default)(state, data);
        }
    }
};


},{"38":38,"44":44}],52:[function(require,module,exports){
'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
var _xtend = require(44);
var _xtend2 = _interopRequireDefault(_xtend);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}
var spellAudio = new Audio('sounds/spell.ogg');
var numCooldowns = 0;
exports.default = {
    namespace: 'game',
    state: {
        gameId: 0,
        ennemies: []
    },
    effects: {
        fetch: function fetch(name, state, send, done) {
            send('app:loading', function () {
                send('api:summoner', name, function (err, summoner) {
                    if (err)
                        return send('app:error', { err: err }, done);
                    mixpanel.people.set('$first_name', summoner.name);
                    send('api:game', summoner, function (err, game) {
                        if (err)
                            return send('app:error', { err: err }, done);
                        send('game:set', game, function () {
                            send('app:clear', function () {
                                mixpanel.people.increment('gamesPlayed');
                                mixpanel.people.union('gamesId', game.gameId);
                                mixpanel.track('game:init', { gameId: game.gameId });
                                send('location:setLocation', { location: '/ingame' }, done);
                                history.pushState({}, null, '/ingame');
                            });
                        });
                    });
                });
            });
        },
        cooldown: function cooldown(spell, state, send, done) {
            if ('cooldown' !== spell.state) {
                numCooldowns++;
                send('game:startCooldown', spell.uid, done);
            } else {
                send('game:decrementCooldown', {
                    uid: spell.uid,
                    amount: 10
                }, done);
            }
        }
    },
    reducers: {
        set: function set(game, state) {
            return game;
        },
        startCooldown: function startCooldown(uid, state) {
            return {
                ennemies: state.ennemies.map(function (ennemy) {
                    return (0, _xtend2.default)(ennemy, {
                        spells: ennemy.spells.map(function (spell) {
                            if (spell.uid === uid) {
                                mixpanel.track('game:cooldown:start', {
                                    gameId: state.gameId,
                                    spell: spell.id
                                });
                                return (0, _xtend2.default)({}, spell, {
                                    state: 'cooldown',
                                    cooldown: spell.refCooldown - 1
                                });
                            } else {
                                return spell;
                            }
                        })
                    });
                })
            };
        },
        decrementCooldown: function decrementCooldown(data, state) {
            return {
                ennemies: state.ennemies.map(function (ennemy) {
                    return (0, _xtend2.default)(ennemy, {
                        spells: ennemy.spells.map(function (spell) {
                            if ('cooldown' !== spell.state)
                                return spell;
                            if (data.uid && spell.uid !== data.uid)
                                return spell;
                            if (data.amount > 1) {
                                mixpanel.track('game:cooldown:decrement', {
                                    gameId: state.gameId,
                                    spell: spell.id
                                });
                            }
                            var newSpell = (0, _xtend2.default)({}, spell, { cooldown: spell.cooldown - data.amount });
                            if (newSpell.cooldown <= 0) {
                                newSpell.cooldown = 0;
                                newSpell.state = 'available';
                                numCooldowns--;
                                spellAudio.play();
                            }
                            return newSpell;
                        })
                    });
                })
            };
        },
        toggleFocus: function toggleFocus(data, state) {
            return {
                ennemies: state.ennemies.map(function (ennemy) {
                    if (ennemy.name === data.name) {
                        var focused = !ennemy.focused;
                        mixpanel.track('game:focus', {
                            gameId: state.gameId,
                            focused: focused
                        });
                        return (0, _xtend2.default)({}, ennemy, { focused: focused });
                    } else {
                        return ennemy;
                    }
                })
            };
        }
    },
    subscriptions: {
        tick: function tick(send, done) {
            setInterval(function () {
                if (0 !== numCooldowns) {
                    send('game:decrementCooldown', { amount: 1 }, done);
                }
            }, 1000);
        }
    }
};


},{"44":44}],53:[function(require,module,exports){
'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
var _templateObject = _taggedTemplateLiteral([
    '\n  <main class="ingame-page">\n    ',
    '\n  </main>\n'
], [
    '\n  <main class="ingame-page">\n    ',
    '\n  </main>\n'
]);
var _html = require(7);
var _html2 = _interopRequireDefault(_html);
var _ennemyList = require(56);
var _ennemyList2 = _interopRequireDefault(_ennemyList);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}
function _taggedTemplateLiteral(strings, raw) {
    return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } }));
}
exports.default = function (state, prev, send) {
    return (0, _html2.default)(_templateObject, (0, _ennemyList2.default)(state.game, prev, send));
};


},{"56":56,"7":7}],54:[function(require,module,exports){
'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
var _templateObject = _taggedTemplateLiteral([
        '\n  <option ',
        '>',
        '</option>\n'
    ], [
        '\n  <option ',
        '>',
        '</option>\n'
    ]), _templateObject2 = _taggedTemplateLiteral([
        '\n  <div class="error-pane">',
        '</div>\n'
    ], [
        '\n  <div class="error-pane">',
        '</div>\n'
    ]), _templateObject3 = _taggedTemplateLiteral([
        '\n  <main class="welcome-page">\n    <div class="welcome-header">\n      <svg class="logo" width="96px" height="141px">\n        <use xlink:href="#icon-logo">\n      </svg>\n      <h1 class="title">noflash</h1>\n    </div>\n    <form class="welcome-form ',
        '"\n      onsubmit=',
        '}>\n      <fieldset class="fieldset">\n        <input\n          class="input"\n          value=',
        '\n          placeholder="Summoner name"\n          ',
        '\n          oninput=',
        ' />\n        <select class="regions" onchange=',
        '>\n          ',
        '\n        </select>\n      </fieldset>\n      <button class="submit">Start</button>\n    </form>\n    ',
        '\n  </main>\n'
    ], [
        '\n  <main class="welcome-page">\n    <div class="welcome-header">\n      <svg class="logo" width="96px" height="141px">\n        <use xlink:href="#icon-logo">\n      </svg>\n      <h1 class="title">noflash</h1>\n    </div>\n    <form class="welcome-form ',
        '"\n      onsubmit=',
        '}>\n      <fieldset class="fieldset">\n        <input\n          class="input"\n          value=',
        '\n          placeholder="Summoner name"\n          ',
        '\n          oninput=',
        ' />\n        <select class="regions" onchange=',
        '>\n          ',
        '\n        </select>\n      </fieldset>\n      <button class="submit">Start</button>\n    </form>\n    ',
        '\n  </main>\n'
    ]);
var _html = require(7);
var _html2 = _interopRequireDefault(_html);
var _classnames2 = require(9);
var _classnames3 = _interopRequireDefault(_classnames2);
var _renderIf = require(49);
var _renderIf2 = _interopRequireDefault(_renderIf);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}
function _taggedTemplateLiteral(strings, raw) {
    return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } }));
}
function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
var regions = [
    'BR',
    'EUNE',
    'EUW',
    'JP',
    'KR',
    'LAN',
    'LAS',
    'NA',
    'OCE',
    'PBE',
    'RU',
    'TR'
];
var handleSubmit = function handleSubmit(e, state, send) {
    e.preventDefault();
    if (state.app.summoner) {
        send('game:fetch', state.app.summoner);
    } else {
        send('app:error', { err: new Error('Empty summoner name') });
    }
};
var handleInput = function handleInput(e, state, send) {
    send('app:summoner', e.target.value);
};
var handleChange = function handleChange(e, state, send) {
    send('app:region', e.target.value);
};
var classVariants = function classVariants(state) {
    return (0, _classnames3.default)(_defineProperty({}, '-loading', state.app.loading));
};
var renderRegion = function renderRegion(region, state) {
    return (0, _html2.default)(_templateObject, region === state.app.region ? 'selected' : '', region);
};
var renderError = function renderError(error) {
    return (0, _html2.default)(_templateObject2, error);
};
exports.default = function (state, prev, send) {
    return (0, _html2.default)(_templateObject3, classVariants(state), function (e) {
        return handleSubmit(e, state, send);
    }, state.app.summoner, state.app.loading ? 'disabled' : '', function (e) {
        return handleInput(e, state, send);
    }, function (e) {
        return handleChange(e, state, send);
    }, regions.map(function (region) {
        return renderRegion(region, state);
    }), (0, _renderIf2.default)(state.app.error, state.app.error, renderError));
};


},{"49":49,"7":7,"9":9}],55:[function(require,module,exports){
'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
var _templateObject = _taggedTemplateLiteral([
    '\n  <li class="ennemy-item ',
    '"\n    onclick=',
    '>\n    <div class="ennemy-meta">\n      <h2 class="champion">',
    '</h2>\n    </div>\n    ',
    '\n  </li>\n'
], [
    '\n  <li class="ennemy-item ',
    '"\n    onclick=',
    '>\n    <div class="ennemy-meta">\n      <h2 class="champion">',
    '</h2>\n    </div>\n    ',
    '\n  </li>\n'
]);
var _html = require(7);
var _html2 = _interopRequireDefault(_html);
var _classnames2 = require(9);
var _classnames3 = _interopRequireDefault(_classnames2);
var _closest = require(10);
var _closest2 = _interopRequireDefault(_closest);
var _spellList = require(58);
var _spellList2 = _interopRequireDefault(_spellList);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}
function _taggedTemplateLiteral(strings, raw) {
    return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } }));
}
function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
var handleClick = function handleClick(e, ennemy, send) {
    if (null == (0, _closest2.default)(e.target, '.spell-item', true)) {
        send('game:toggleFocus', ennemy);
    }
};
var classVariants = function classVariants(ennemy) {
    return (0, _classnames3.default)(_defineProperty({}, '-focused', ennemy.focused));
};
exports.default = function (ennemy, prev, send) {
    return (0, _html2.default)(_templateObject, classVariants(ennemy), function (e) {
        return handleClick(e, ennemy, send);
    }, ennemy.champion.name, (0, _spellList2.default)(ennemy, prev, send));
};


},{"10":10,"58":58,"7":7,"9":9}],56:[function(require,module,exports){
'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
var _templateObject = _taggedTemplateLiteral([
    '\n  <ul class="ennemy-list">\n    ',
    '\n  </ul>\n'
], [
    '\n  <ul class="ennemy-list">\n    ',
    '\n  </ul>\n'
]);
var _html = require(7);
var _html2 = _interopRequireDefault(_html);
var _closest = require(10);
var _closest2 = _interopRequireDefault(_closest);
var _ennemyItem = require(55);
var _ennemyItem2 = _interopRequireDefault(_ennemyItem);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}
function _taggedTemplateLiteral(strings, raw) {
    return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } }));
}
var dragInfo = void 0;
var indexOf = function indexOf(el) {
    return Array.prototype.indexOf.call(el.parentNode.childNodes, el);
};
var handleDragStart = function handleDragStart(e) {
    var list = (0, _closest2.default)(e.target, '.ennemy-list');
    list.addEventListener('mousemove', handleDragMove);
    list.addEventListener('mouseup', handleDragEnd);
    var listItem = (0, _closest2.default)(e.target, '.ennemy-item', true);
    dragInfo = {
        dragging: false,
        start: e.clientY,
        index: indexOf(listItem),
        list: list,
        listItem: listItem
    };
};
var handleDragMove = function handleDragMove(e) {
    var _dragInfo = dragInfo, list = _dragInfo.list, listItem = _dragInfo.listItem;
    if (!dragInfo.dragging && Math.abs(e.clientY - dragInfo.start) > 10) {
        listItem.classList.add('-dragging');
        dragInfo.dragging = true;
    }
    if (dragInfo.dragging) {
        var hoverEl = document.elementFromPoint(e.clientX, e.clientY);
        var hoverItem = (0, _closest2.default)(e.target, '.ennemy-item', true);
        if (null != hoverItem) {
            var destIndex = indexOf(hoverItem);
            var destItem = hoverItem.nextElementSibling;
            if (destIndex !== dragInfo.index) {
                list.insertBefore(listItem, destItem);
                dragInfo.index = destIndex;
            }
        }
    }
};
var handleDragEnd = function handleDragEnd(e) {
    var _dragInfo2 = dragInfo, list = _dragInfo2.list, listItem = _dragInfo2.listItem;
    listItem.classList.remove('-dragging');
    listItem.style.transform = '';
    list.removeEventListener('mousemove', handleDragMove);
    list.removeEventListener('mouseup', handleDragEnd);
};
exports.default = function (game, prev, send) {
    return (0, _html2.default)(_templateObject, game.ennemies.map(function (ennemy) {
        return (0, _ennemyItem2.default)(ennemy, prev, send);
    }));
};


},{"10":10,"55":55,"7":7}],57:[function(require,module,exports){
'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
var _templateObject = _taggedTemplateLiteral([
        '\n    <g transform=',
        '\n      stroke-linecap="round"\n      vector-effect="non-scaling-stroke">\n      <circle class="progress-bg" cx="0" cy="0" r="50" />\n      <path class="progress" d=',
        '></path>\n    </g>\n  '
    ], [
        '\n    <g transform=',
        '\n      stroke-linecap="round"\n      vector-effect="non-scaling-stroke">\n      <circle class="progress-bg" cx="0" cy="0" r="50" />\n      <path class="progress" d=',
        '></path>\n    </g>\n  '
    ]), _templateObject2 = _taggedTemplateLiteral([
        '\n  <svg class="cooldown"\n    viewBox="-5 -5 110 110">\n    ',
        '\n  </svg>\n'
    ], [
        '\n  <svg class="cooldown"\n    viewBox="-5 -5 110 110">\n    ',
        '\n  </svg>\n'
    ]), _templateObject3 = _taggedTemplateLiteral([
        '\n  <li\n    class="spell-item ',
        '"\n    onclick=',
        '>\n    ',
        '\n    <svg class="icon">\n      <use xlink:href="#svg-',
        '">\n    </svg>\n  </li>\n'
    ], [
        '\n  <li\n    class="spell-item ',
        '"\n    onclick=',
        '>\n    ',
        '\n    <svg class="icon">\n      <use xlink:href="#svg-',
        '">\n    </svg>\n  </li>\n'
    ]);
var _html = require(7);
var _html2 = _interopRequireDefault(_html);
var _classnames2 = require(9);
var _classnames3 = _interopRequireDefault(_classnames2);
var _renderIf = require(49);
var _renderIf2 = _interopRequireDefault(_renderIf);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}
function _taggedTemplateLiteral(strings, raw) {
    return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } }));
}
function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
var handleClick = function handleClick(e, spell, send) {
    send('game:cooldown', spell);
};
var classVariants = function classVariants(spell) {
    var _classnames;
    return (0, _classnames3.default)((_classnames = {}, _defineProperty(_classnames, '-' + spell.id, true), _defineProperty(_classnames, '-' + spell.state, true), _defineProperty(_classnames, '-time60', spell.cooldown <= 60 && spell.cooldown > 30), _defineProperty(_classnames, '-time30', spell.cooldown <= 30 && spell.cooldown > 0), _classnames));
};
var drawCooldownPie = function drawCooldownPie(spell) {
    var r = 50;
    var t = 1 - spell.cooldown / spell.refCooldown;
    var a = t * Math.PI * 2;
    var m = a > Math.PI ? 1 : 0;
    var x = Math.sin(a) * r;
    var y = Math.cos(a) * -r;
    return (0, _html2.default)(_templateObject, 'translate(' + r + ', ' + r + ')', 'M 0 ' + -r + ' A ' + r + ' ' + r + ' 1 ' + m + ' 1 ' + x + ' ' + y);
};
var renderCooldown = function renderCooldown(spell) {
    return (0, _html2.default)(_templateObject2, drawCooldownPie(spell));
};
exports.default = function (spell, prev, send) {
    return (0, _html2.default)(_templateObject3, classVariants(spell), function (e) {
        return handleClick(e, spell, send);
    }, (0, _renderIf2.default)('cooldown' === spell.state, spell, renderCooldown), spell.id);
};


},{"49":49,"7":7,"9":9}],58:[function(require,module,exports){
'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
var _templateObject = _taggedTemplateLiteral([
    '\n  <ul class="spell-list">\n    ',
    '\n  </ul>\n'
], [
    '\n  <ul class="spell-list">\n    ',
    '\n  </ul>\n'
]);
var _html = require(7);
var _html2 = _interopRequireDefault(_html);
var _spellItem = require(57);
var _spellItem2 = _interopRequireDefault(_spellItem);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}
function _taggedTemplateLiteral(strings, raw) {
    return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } }));
}
exports.default = function (ennemy, prev, send) {
    return (0, _html2.default)(_templateObject, ennemy.spells.map(function (spell) {
        return (0, _spellItem2.default)(spell, prev, send);
    }));
};


},{"57":57,"7":7}]},{},[48])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvbmdyeW1hbi9Qcm9qZWN0cy9ub2ZsYXNoL25vZGVfbW9kdWxlcy9hcnJheS1maW5kL2ZpbmQuanMiLCIvVXNlcnMvbmdyeW1hbi9Qcm9qZWN0cy9ub2ZsYXNoL25vZGVfbW9kdWxlcy9iYXJyYWNrcy9hcHBseS1ob29rLmpzIiwiL1VzZXJzL25ncnltYW4vUHJvamVjdHMvbm9mbGFzaC9ub2RlX21vZHVsZXMvYmFycmFja3MvaW5kZXguanMiLCIvVXNlcnMvbmdyeW1hbi9Qcm9qZWN0cy9ub2ZsYXNoL25vZGVfbW9kdWxlcy9iZWwvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYnJvd3Nlci1yZXNvbHZlL2VtcHR5LmpzIiwiL1VzZXJzL25ncnltYW4vUHJvamVjdHMvbm9mbGFzaC9ub2RlX21vZHVsZXMvY2hvby1sb2cvaW5kZXguanMiLCIvVXNlcnMvbmdyeW1hbi9Qcm9qZWN0cy9ub2ZsYXNoL25vZGVfbW9kdWxlcy9jaG9vL2h0bWwuanMiLCIvVXNlcnMvbmdyeW1hbi9Qcm9qZWN0cy9ub2ZsYXNoL25vZGVfbW9kdWxlcy9jaG9vL2luZGV4LmpzIiwiL1VzZXJzL25ncnltYW4vUHJvamVjdHMvbm9mbGFzaC9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9pbmRleC5qcyIsIi9Vc2Vycy9uZ3J5bWFuL1Byb2plY3RzL25vZmxhc2gvbm9kZV9tb2R1bGVzL2Nsb3Nlc3QvaW5kZXguanMiLCIvVXNlcnMvbmdyeW1hbi9Qcm9qZWN0cy9ub2ZsYXNoL25vZGVfbW9kdWxlcy9kZWVwLWRpZmYvaW5kZXguanMiLCIvVXNlcnMvbmdyeW1hbi9Qcm9qZWN0cy9ub2ZsYXNoL25vZGVfbW9kdWxlcy9kZXRlY3QtYnJvd3Nlci9icm93c2VyLmpzIiwiL1VzZXJzL25ncnltYW4vUHJvamVjdHMvbm9mbGFzaC9ub2RlX21vZHVsZXMvZGV0ZWN0LWJyb3dzZXIvbGliL2RldGVjdEJyb3dzZXIuanMiLCIvVXNlcnMvbmdyeW1hbi9Qcm9qZWN0cy9ub2ZsYXNoL25vZGVfbW9kdWxlcy9kb2N1bWVudC1yZWFkeS9pbmRleC5qcyIsIi9Vc2Vycy9uZ3J5bWFuL1Byb2plY3RzL25vZmxhc2gvbm9kZV9tb2R1bGVzL2Zhc3RjbGljay9saWIvZmFzdGNsaWNrLmpzIiwiL1VzZXJzL25ncnltYW4vUHJvamVjdHMvbm9mbGFzaC9ub2RlX21vZHVsZXMvZm9yLWVhY2gvaW5kZXguanMiLCIvVXNlcnMvbmdyeW1hbi9Qcm9qZWN0cy9ub2ZsYXNoL25vZGVfbW9kdWxlcy9nbG9iYWwvZG9jdW1lbnQuanMiLCIvVXNlcnMvbmdyeW1hbi9Qcm9qZWN0cy9ub2ZsYXNoL25vZGVfbW9kdWxlcy9nbG9iYWwvd2luZG93LmpzIiwiL1VzZXJzL25ncnltYW4vUHJvamVjdHMvbm9mbGFzaC9ub2RlX21vZHVsZXMvaGFzaC1tYXRjaC9pbmRleC5qcyIsIi9Vc2Vycy9uZ3J5bWFuL1Byb2plY3RzL25vZmxhc2gvbm9kZV9tb2R1bGVzL2h5cGVyc2NyaXB0LWF0dHJpYnV0ZS10by1wcm9wZXJ0eS9pbmRleC5qcyIsIi9Vc2Vycy9uZ3J5bWFuL1Byb2plY3RzL25vZmxhc2gvbm9kZV9tb2R1bGVzL2h5cGVyeC9pbmRleC5qcyIsIi9Vc2Vycy9uZ3J5bWFuL1Byb2plY3RzL25vZmxhc2gvbm9kZV9tb2R1bGVzL2lzLWZ1bmN0aW9uL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2xvbC1jaGFtcGlvbnMvY2hhbXBpb25zLmpzb24iLCJub2RlX21vZHVsZXMvbG9sLXNwZWxscy9zcGVsbHMuanNvbiIsIi9Vc2Vycy9uZ3J5bWFuL1Byb2plY3RzL25vZmxhc2gvbm9kZV9tb2R1bGVzL21hdGNoZXMtc2VsZWN0b3IvaW5kZXguanMiLCIvVXNlcnMvbmdyeW1hbi9Qcm9qZWN0cy9ub2ZsYXNoL25vZGVfbW9kdWxlcy9tb3JwaGRvbS9zcmMvaW5kZXguanMiLCIvVXNlcnMvbmdyeW1hbi9Qcm9qZWN0cy9ub2ZsYXNoL25vZGVfbW9kdWxlcy9uYW5vcmFmL2luZGV4LmpzIiwiL1VzZXJzL25ncnltYW4vUHJvamVjdHMvbm9mbGFzaC9ub2RlX21vZHVsZXMvb24tbG9hZC9pbmRleC5qcyIsIi9Vc2Vycy9uZ3J5bWFuL1Byb2plY3RzL25vZmxhc2gvbm9kZV9tb2R1bGVzL3BhZC1sZWZ0L2luZGV4LmpzIiwiL1VzZXJzL25ncnltYW4vUHJvamVjdHMvbm9mbGFzaC9ub2RlX21vZHVsZXMvcGFkLXJpZ2h0L2luZGV4LmpzIiwiL1VzZXJzL25ncnltYW4vUHJvamVjdHMvbm9mbGFzaC9ub2RlX21vZHVsZXMvcGFyc2UtaGVhZGVycy9wYXJzZS1oZWFkZXJzLmpzIiwiL1VzZXJzL25ncnltYW4vUHJvamVjdHMvbm9mbGFzaC9ub2RlX21vZHVsZXMvcGF0aG5hbWUtbWF0Y2gvaW5kZXguanMiLCIvVXNlcnMvbmdyeW1hbi9Qcm9qZWN0cy9ub2ZsYXNoL25vZGVfbW9kdWxlcy9yZXBlYXQtc3RyaW5nL2luZGV4LmpzIiwiL1VzZXJzL25ncnltYW4vUHJvamVjdHMvbm9mbGFzaC9ub2RlX21vZHVsZXMvc2hlZXQtcm91dGVyL2hhc2guanMiLCIvVXNlcnMvbmdyeW1hbi9Qcm9qZWN0cy9ub2ZsYXNoL25vZGVfbW9kdWxlcy9zaGVldC1yb3V0ZXIvaGlzdG9yeS5qcyIsIi9Vc2Vycy9uZ3J5bWFuL1Byb2plY3RzL25vZmxhc2gvbm9kZV9tb2R1bGVzL3NoZWV0LXJvdXRlci9ocmVmLmpzIiwiL1VzZXJzL25ncnltYW4vUHJvamVjdHMvbm9mbGFzaC9ub2RlX21vZHVsZXMvc2hlZXQtcm91dGVyL2luZGV4LmpzIiwiL1VzZXJzL25ncnltYW4vUHJvamVjdHMvbm9mbGFzaC9ub2RlX21vZHVsZXMvc3RvcmUvc3RvcmUuanMiLCIvVXNlcnMvbmdyeW1hbi9Qcm9qZWN0cy9ub2ZsYXNoL25vZGVfbW9kdWxlcy90cmltL2luZGV4LmpzIiwiL1VzZXJzL25ncnltYW4vUHJvamVjdHMvbm9mbGFzaC9ub2RlX21vZHVsZXMvdW5pcXVlaWQvaW5kZXguanMiLCIvVXNlcnMvbmdyeW1hbi9Qcm9qZWN0cy9ub2ZsYXNoL25vZGVfbW9kdWxlcy93YXlmYXJlci9pbmRleC5qcyIsIi9Vc2Vycy9uZ3J5bWFuL1Byb2plY3RzL25vZmxhc2gvbm9kZV9tb2R1bGVzL3dheWZhcmVyL3RyaWUuanMiLCIvVXNlcnMvbmdyeW1hbi9Qcm9qZWN0cy9ub2ZsYXNoL25vZGVfbW9kdWxlcy94aHIvaW5kZXguanMiLCIvVXNlcnMvbmdyeW1hbi9Qcm9qZWN0cy9ub2ZsYXNoL25vZGVfbW9kdWxlcy94dGVuZC9pbW11dGFibGUuanMiLCIvVXNlcnMvbmdyeW1hbi9Qcm9qZWN0cy9ub2ZsYXNoL25vZGVfbW9kdWxlcy94dGVuZC9tdXRhYmxlLmpzIiwiL1VzZXJzL25ncnltYW4vUHJvamVjdHMvbm9mbGFzaC9ub2RlX21vZHVsZXMveW8teW8vaW5kZXguanMiLCIvVXNlcnMvbmdyeW1hbi9Qcm9qZWN0cy9ub2ZsYXNoL25vZGVfbW9kdWxlcy95by15by91cGRhdGUtZXZlbnRzLmpzIiwic3JjL2luZGV4LmpzIiwic3JjL2xpYi9yZW5kZXItaWYuanMiLCJzcmMvbW9kZWxzL2FwaS5qcyIsInNyYy9tb2RlbHMvYXBwLmpzIiwic3JjL21vZGVscy9nYW1lLmpzIiwic3JjL3BhZ2VzL2luZ2FtZS5qcyIsInNyYy9wYWdlcy93ZWxjb21lLmpzIiwic3JjL3ZpZXdzL2VubmVteS1pdGVtLmpzIiwic3JjL3ZpZXdzL2VubmVteS1saXN0LmpzIiwic3JjL3ZpZXdzL3NwZWxsLWl0ZW0uanMiLCJzcmMvdmlld3Mvc3BlbGwtbGlzdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBRUEsU0FBUyxJQUFULENBQWMsS0FBZCxFQUFxQixTQUFyQixFQUFnQyxPQUFoQyxFQUF5QztBQUFBLElBQ3ZDLElBQUksT0FBTyxLQUFBLENBQU0sU0FBTixDQUFnQixJQUF2QixLQUFnQyxVQUFwQyxFQUFnRDtBQUFBLFFBQzlDLE9BQU8sS0FBQSxD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QUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNpS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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UyxlQUFlLEtBQUEsQ0FBTSxLQUE5QixFQUFxQyxLQUFyQyxFQUE0QyxjQUE1QyxDQUpTLEVBTWUsS0FBQSxDQUFNLEVBTnJCLENBQUEsQ0FBQTtBQUFBOzs7Ozs7Ozs7Ozs7O0FDeENmLElBQUEsS0FBQSxHQUFBLE9BQUEsQ0FBQSxXQUFBLENBQUE7O0FBQ0EsSUFBQSxVQUFBLEdBQUEsT0FBQSxDQUFBLGNBQUEsQ0FBQTs7Ozs7Ozs7a0JBRWUsVUFBQyxNQUFELEVBQVMsSUFBVCxFQUFlLElBQWYsRUFBQTtBQUFBLElBQUEsT0FBQSxJQUFBLE1BQUEsQ0FBQSxPQUFBLENBQUEsQ0FBQSxlQUFBLEVBRVQsTUFBQSxDQUFPLE1BQVAsQ0FBYyxHQUFkLENBQWtCLFVBQUEsS0FBQSxFQUFBO0FBQUEsUUFBQSxPQUFTLElBQUEsV0FBQSxDQUFBLE9BQUEsQ0FBQSxDQUFVLEtBQVYsRUFBaUIsSUFBakIsRUFBdUIsSUFBdkIsQ0FBVCxDQUFBO0FBQUEsS0FBbEIsQ0FGUyxDQUFBLENBQUE7QUFBQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGZpbmQoYXJyYXksIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICBpZiAodHlwZW9mIEFycmF5LnByb3RvdHlwZS5maW5kID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGFycmF5LmZpbmQocHJlZGljYXRlLCBjb250ZXh0KTtcbiAgfVxuXG4gIGNvbnRleHQgPSBjb250ZXh0IHx8IHRoaXM7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIHZhciBpO1xuXG4gIGlmICh0eXBlb2YgcHJlZGljYXRlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihwcmVkaWNhdGUgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG4gIH1cblxuICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBpZiAocHJlZGljYXRlLmNhbGwoY29udGV4dCwgYXJyYXlbaV0sIGksIGFycmF5KSkge1xuICAgICAgcmV0dXJuIGFycmF5W2ldO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZpbmQ7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGFwcGx5SG9va1xuXG4vLyBhcHBseSBhcmd1bWVudHMgb250byBhbiBhcnJheSBvZiBmdW5jdGlvbnMsIHVzZWZ1bCBmb3IgaG9va3Ncbi8vIChhcnIsIGFueT8sIGFueT8sIGFueT8sIGFueT8sIGFueT8pIC0+IG51bGxcbmZ1bmN0aW9uIGFwcGx5SG9vayAoYXJyLCBhcmcxLCBhcmcyLCBhcmczLCBhcmc0LCBhcmc1KSB7XG4gIGFyci5mb3JFYWNoKGZ1bmN0aW9uIChmbikge1xuICAgIGZuKGFyZzEsIGFyZzIsIGFyZzMsIGFyZzQsIGFyZzUpXG4gIH0pXG59XG4iLCJjb25zdCBtdXRhdGUgPSByZXF1aXJlKCd4dGVuZC9tdXRhYmxlJylcbmNvbnN0IGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpXG5jb25zdCB4dGVuZCA9IHJlcXVpcmUoJ3h0ZW5kJylcblxuY29uc3QgYXBwbHlIb29rID0gcmVxdWlyZSgnLi9hcHBseS1ob29rJylcblxubW9kdWxlLmV4cG9ydHMgPSBkaXNwYXRjaGVyXG5cbi8vIGluaXRpYWxpemUgYSBuZXcgYmFycmFja3MgaW5zdGFuY2Vcbi8vIG9iaiAtPiBvYmpcbmZ1bmN0aW9uIGRpc3BhdGNoZXIgKGhvb2tzKSB7XG4gIGhvb2tzID0gaG9va3MgfHwge31cbiAgYXNzZXJ0LmVxdWFsKHR5cGVvZiBob29rcywgJ29iamVjdCcsICdiYXJyYWNrczogaG9va3Mgc2hvdWxkIGJlIHVuZGVmaW5lZCBvciBhbiBvYmplY3QnKVxuXG4gIGNvbnN0IG9uU3RhdGVDaGFuZ2VIb29rcyA9IFtdXG4gIGNvbnN0IG9uQWN0aW9uSG9va3MgPSBbXVxuICBjb25zdCBvbkVycm9ySG9va3MgPSBbXVxuXG4gIGNvbnN0IHN1YnNjcmlwdGlvbldyYXBzID0gW11cbiAgY29uc3QgaW5pdGlhbFN0YXRlV3JhcHMgPSBbXVxuICBjb25zdCByZWR1Y2VyV3JhcHMgPSBbXVxuICBjb25zdCBlZmZlY3RXcmFwcyA9IFtdXG5cbiAgdXNlKGhvb2tzKVxuXG4gIHZhciByZWR1Y2Vyc0NhbGxlZCA9IGZhbHNlXG4gIHZhciBlZmZlY3RzQ2FsbGVkID0gZmFsc2VcbiAgdmFyIHN0YXRlQ2FsbGVkID0gZmFsc2VcbiAgdmFyIHN1YnNDYWxsZWQgPSBmYWxzZVxuXG4gIGNvbnN0IHN1YnNjcmlwdGlvbnMgPSBzdGFydC5fc3Vic2NyaXB0aW9ucyA9IHt9XG4gIGNvbnN0IHJlZHVjZXJzID0gc3RhcnQuX3JlZHVjZXJzID0ge31cbiAgY29uc3QgZWZmZWN0cyA9IHN0YXJ0Ll9lZmZlY3RzID0ge31cbiAgY29uc3QgbW9kZWxzID0gc3RhcnQuX21vZGVscyA9IFtdXG4gIHZhciBfc3RhdGUgPSB7fVxuXG4gIHN0YXJ0Lm1vZGVsID0gc2V0TW9kZWxcbiAgc3RhcnQuc3RhdGUgPSBnZXRTdGF0ZVxuICBzdGFydC5zdGFydCA9IHN0YXJ0XG4gIHN0YXJ0LnVzZSA9IHVzZVxuICByZXR1cm4gc3RhcnRcblxuICAvLyBwdXNoIGFuIG9iamVjdCBvZiBob29rcyBvbnRvIGFuIGFycmF5XG4gIC8vIG9iaiAtPiBudWxsXG4gIGZ1bmN0aW9uIHVzZSAoaG9va3MpIHtcbiAgICBhc3NlcnQuZXF1YWwodHlwZW9mIGhvb2tzLCAnb2JqZWN0JywgJ2JhcnJhY2tzLnVzZTogaG9va3Mgc2hvdWxkIGJlIGFuIG9iamVjdCcpXG4gICAgYXNzZXJ0Lm9rKCFob29rcy5vbkVycm9yIHx8IHR5cGVvZiBob29rcy5vbkVycm9yID09PSAnZnVuY3Rpb24nLCAnYmFycmFja3MudXNlOiBvbkVycm9yIHNob3VsZCBiZSB1bmRlZmluZWQgb3IgYSBmdW5jdGlvbicpXG4gICAgYXNzZXJ0Lm9rKCFob29rcy5vbkFjdGlvbiB8fCB0eXBlb2YgaG9va3Mub25BY3Rpb24gPT09ICdmdW5jdGlvbicsICdiYXJyYWNrcy51c2U6IG9uQWN0aW9uIHNob3VsZCBiZSB1bmRlZmluZWQgb3IgYSBmdW5jdGlvbicpXG4gICAgYXNzZXJ0Lm9rKCFob29rcy5vblN0YXRlQ2hhbmdlIHx8IHR5cGVvZiBob29rcy5vblN0YXRlQ2hhbmdlID09PSAnZnVuY3Rpb24nLCAnYmFycmFja3MudXNlOiBvblN0YXRlQ2hhbmdlIHNob3VsZCBiZSB1bmRlZmluZWQgb3IgYSBmdW5jdGlvbicpXG5cbiAgICBpZiAoaG9va3Mub25TdGF0ZUNoYW5nZSkgb25TdGF0ZUNoYW5nZUhvb2tzLnB1c2goaG9va3Mub25TdGF0ZUNoYW5nZSlcbiAgICBpZiAoaG9va3Mub25FcnJvcikgb25FcnJvckhvb2tzLnB1c2god3JhcE9uRXJyb3IoaG9va3Mub25FcnJvcikpXG4gICAgaWYgKGhvb2tzLm9uQWN0aW9uKSBvbkFjdGlvbkhvb2tzLnB1c2goaG9va3Mub25BY3Rpb24pXG4gICAgaWYgKGhvb2tzLndyYXBTdWJzY3JpcHRpb25zKSBzdWJzY3JpcHRpb25XcmFwcy5wdXNoKGhvb2tzLndyYXBTdWJzY3JpcHRpb25zKVxuICAgIGlmIChob29rcy53cmFwSW5pdGlhbFN0YXRlKSBpbml0aWFsU3RhdGVXcmFwcy5wdXNoKGhvb2tzLndyYXBJbml0aWFsU3RhdGUpXG4gICAgaWYgKGhvb2tzLndyYXBSZWR1Y2VycykgcmVkdWNlcldyYXBzLnB1c2goaG9va3Mud3JhcFJlZHVjZXJzKVxuICAgIGlmIChob29rcy53cmFwRWZmZWN0cykgZWZmZWN0V3JhcHMucHVzaChob29rcy53cmFwRWZmZWN0cylcbiAgfVxuXG4gIC8vIHB1c2ggYSBtb2RlbCB0byBiZSBpbml0aWF0ZWRcbiAgLy8gb2JqIC0+IG51bGxcbiAgZnVuY3Rpb24gc2V0TW9kZWwgKG1vZGVsKSB7XG4gICAgYXNzZXJ0LmVxdWFsKHR5cGVvZiBtb2RlbCwgJ29iamVjdCcsICdiYXJyYWNrcy5zdG9yZS5tb2RlbDogbW9kZWwgc2hvdWxkIGJlIGFuIG9iamVjdCcpXG4gICAgbW9kZWxzLnB1c2gobW9kZWwpXG4gIH1cblxuICAvLyBnZXQgdGhlIGN1cnJlbnQgc3RhdGUgZnJvbSB0aGUgc3RvcmVcbiAgLy8gb2JqPyAtPiBvYmpcbiAgZnVuY3Rpb24gZ2V0U3RhdGUgKG9wdHMpIHtcbiAgICBvcHRzID0gb3B0cyB8fCB7fVxuICAgIGFzc2VydC5lcXVhbCh0eXBlb2Ygb3B0cywgJ29iamVjdCcsICdiYXJyYWNrcy5zdG9yZS5zdGF0ZTogb3B0cyBzaG91bGQgYmUgYW4gb2JqZWN0JylcblxuICAgIGNvbnN0IHN0YXRlID0gb3B0cy5zdGF0ZVxuICAgIGlmICghb3B0cy5zdGF0ZSAmJiBvcHRzLmZyZWV6ZSA9PT0gZmFsc2UpIHJldHVybiB4dGVuZChfc3RhdGUpXG4gICAgZWxzZSBpZiAoIW9wdHMuc3RhdGUpIHJldHVybiBPYmplY3QuZnJlZXplKHh0ZW5kKF9zdGF0ZSkpXG4gICAgYXNzZXJ0LmVxdWFsKHR5cGVvZiBzdGF0ZSwgJ29iamVjdCcsICdiYXJyYWNrcy5zdG9yZS5zdGF0ZTogc3RhdGUgc2hvdWxkIGJlIGFuIG9iamVjdCcpXG5cbiAgICBjb25zdCBuYW1lc3BhY2VzID0gW11cbiAgICBjb25zdCBuZXdTdGF0ZSA9IHt9XG5cbiAgICAvLyBhcHBseSBhbGwgZmllbGRzIGZyb20gdGhlIG1vZGVsLCBhbmQgbmFtZXNwYWNlZCBmaWVsZHMgZnJvbSB0aGUgcGFzc2VkXG4gICAgLy8gaW4gc3RhdGVcbiAgICBtb2RlbHMuZm9yRWFjaChmdW5jdGlvbiAobW9kZWwpIHtcbiAgICAgIGNvbnN0IG5zID0gbW9kZWwubmFtZXNwYWNlXG4gICAgICBuYW1lc3BhY2VzLnB1c2gobnMpXG4gICAgICBjb25zdCBtb2RlbFN0YXRlID0gbW9kZWwuc3RhdGUgfHwge31cbiAgICAgIGlmIChucykge1xuICAgICAgICBuZXdTdGF0ZVtuc10gPSBuZXdTdGF0ZVtuc10gfHwge31cbiAgICAgICAgYXBwbHkobnMsIG1vZGVsU3RhdGUsIG5ld1N0YXRlKVxuICAgICAgICBuZXdTdGF0ZVtuc10gPSB4dGVuZChuZXdTdGF0ZVtuc10sIHN0YXRlW25zXSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG11dGF0ZShuZXdTdGF0ZSwgbW9kZWxTdGF0ZSlcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgLy8gbm93IGFwcGx5IGFsbCBmaWVsZHMgdGhhdCB3ZXJlbid0IG5hbWVzcGFjZWQgZnJvbSB0aGUgcGFzc2VkIGluIHN0YXRlXG4gICAgT2JqZWN0LmtleXMoc3RhdGUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgaWYgKG5hbWVzcGFjZXMuaW5kZXhPZihrZXkpICE9PSAtMSkgcmV0dXJuXG4gICAgICBuZXdTdGF0ZVtrZXldID0gc3RhdGVba2V5XVxuICAgIH0pXG5cbiAgICBjb25zdCB0bXBTdGF0ZSA9IHh0ZW5kKF9zdGF0ZSwgeHRlbmQoc3RhdGUsIG5ld1N0YXRlKSlcbiAgICBjb25zdCB3cmFwcGVkU3RhdGUgPSB3cmFwSG9vayh0bXBTdGF0ZSwgaW5pdGlhbFN0YXRlV3JhcHMpXG5cbiAgICByZXR1cm4gKG9wdHMuZnJlZXplID09PSBmYWxzZSlcbiAgICAgID8gd3JhcHBlZFN0YXRlXG4gICAgICA6IE9iamVjdC5mcmVlemUod3JhcHBlZFN0YXRlKVxuICB9XG5cbiAgLy8gaW5pdGlhbGl6ZSB0aGUgc3RvcmUgaG9va3MsIGdldCB0aGUgc2VuZCgpIGZ1bmN0aW9uXG4gIC8vIG9iaj8gLT4gZm5cbiAgZnVuY3Rpb24gc3RhcnQgKG9wdHMpIHtcbiAgICBvcHRzID0gb3B0cyB8fCB7fVxuICAgIGFzc2VydC5lcXVhbCh0eXBlb2Ygb3B0cywgJ29iamVjdCcsICdiYXJyYWNrcy5zdG9yZS5zdGFydDogb3B0cyBzaG91bGQgYmUgdW5kZWZpbmVkIG9yIGFuIG9iamVjdCcpXG5cbiAgICAvLyByZWdpc3RlciB2YWx1ZXMgZnJvbSB0aGUgbW9kZWxzXG4gICAgbW9kZWxzLmZvckVhY2goZnVuY3Rpb24gKG1vZGVsKSB7XG4gICAgICBjb25zdCBucyA9IG1vZGVsLm5hbWVzcGFjZVxuICAgICAgaWYgKCFzdGF0ZUNhbGxlZCAmJiBtb2RlbC5zdGF0ZSAmJiBvcHRzLnN0YXRlICE9PSBmYWxzZSkge1xuICAgICAgICBjb25zdCBtb2RlbFN0YXRlID0gbW9kZWwuc3RhdGUgfHwge31cbiAgICAgICAgaWYgKG5zKSB7XG4gICAgICAgICAgX3N0YXRlW25zXSA9IF9zdGF0ZVtuc10gfHwge31cbiAgICAgICAgICBhcHBseShucywgbW9kZWxTdGF0ZSwgX3N0YXRlKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG11dGF0ZShfc3RhdGUsIG1vZGVsU3RhdGUpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghcmVkdWNlcnNDYWxsZWQgJiYgbW9kZWwucmVkdWNlcnMgJiYgb3B0cy5yZWR1Y2VycyAhPT0gZmFsc2UpIHtcbiAgICAgICAgYXBwbHkobnMsIG1vZGVsLnJlZHVjZXJzLCByZWR1Y2VycywgZnVuY3Rpb24gKGNiKSB7XG4gICAgICAgICAgcmV0dXJuIHdyYXBIb29rKGNiLCByZWR1Y2VyV3JhcHMpXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgICBpZiAoIWVmZmVjdHNDYWxsZWQgJiYgbW9kZWwuZWZmZWN0cyAmJiBvcHRzLmVmZmVjdHMgIT09IGZhbHNlKSB7XG4gICAgICAgIGFwcGx5KG5zLCBtb2RlbC5lZmZlY3RzLCBlZmZlY3RzLCBmdW5jdGlvbiAoY2IpIHtcbiAgICAgICAgICByZXR1cm4gd3JhcEhvb2soY2IsIGVmZmVjdFdyYXBzKVxuICAgICAgICB9KVxuICAgICAgfVxuICAgICAgaWYgKCFzdWJzQ2FsbGVkICYmIG1vZGVsLnN1YnNjcmlwdGlvbnMgJiYgb3B0cy5zdWJzY3JpcHRpb25zICE9PSBmYWxzZSkge1xuICAgICAgICBhcHBseShucywgbW9kZWwuc3Vic2NyaXB0aW9ucywgc3Vic2NyaXB0aW9ucywgZnVuY3Rpb24gKGNiLCBrZXkpIHtcbiAgICAgICAgICBjb25zdCBzZW5kID0gY3JlYXRlU2VuZCgnc3Vic2NyaXB0aW9uOiAnICsgKG5zID8gbnMgKyAnOicgKyBrZXkgOiBrZXkpKVxuICAgICAgICAgIGNiID0gd3JhcEhvb2soY2IsIHN1YnNjcmlwdGlvbldyYXBzKVxuICAgICAgICAgIGNiKHNlbmQsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIGFwcGx5SG9vayhvbkVycm9ySG9va3MsIGVyciwgX3N0YXRlLCBjcmVhdGVTZW5kKVxuICAgICAgICAgIH0pXG4gICAgICAgICAgcmV0dXJuIGNiXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSlcblxuICAgIC8vIHRoZSBzdGF0ZSB3cmFwIGlzIHNwZWNpYWwgYmVjYXVzZSB3ZSB3YW50IHRvIG9wZXJhdGUgb24gdGhlIGZ1bGxcbiAgICAvLyBzdGF0ZSByYXRoZXIgdGhhbiBpbmR2aWR1YWwgY2h1bmtzLCBzbyB3ZSBhcHBseSBpdCBvdXRzaWRlIHRoZSBsb29wXG4gICAgaWYgKCFzdGF0ZUNhbGxlZCAmJiBvcHRzLnN0YXRlICE9PSBmYWxzZSkge1xuICAgICAgX3N0YXRlID0gd3JhcEhvb2soX3N0YXRlLCBpbml0aWFsU3RhdGVXcmFwcylcbiAgICB9XG5cbiAgICBpZiAoIW9wdHMubm9TdWJzY3JpcHRpb25zKSBzdWJzQ2FsbGVkID0gdHJ1ZVxuICAgIGlmICghb3B0cy5ub1JlZHVjZXJzKSByZWR1Y2Vyc0NhbGxlZCA9IHRydWVcbiAgICBpZiAoIW9wdHMubm9FZmZlY3RzKSBlZmZlY3RzQ2FsbGVkID0gdHJ1ZVxuICAgIGlmICghb3B0cy5ub1N0YXRlKSBzdGF0ZUNhbGxlZCA9IHRydWVcblxuICAgIGlmICghb25FcnJvckhvb2tzLmxlbmd0aCkgb25FcnJvckhvb2tzLnB1c2god3JhcE9uRXJyb3IoZGVmYXVsdE9uRXJyb3IpKVxuXG4gICAgcmV0dXJuIGNyZWF0ZVNlbmRcblxuICAgIC8vIGNhbGwgYW4gYWN0aW9uIGZyb20gYSB2aWV3XG4gICAgLy8gKHN0ciwgYm9vbD8pIC0+IChzdHIsIGFueT8sIGZuPykgLT4gbnVsbFxuICAgIGZ1bmN0aW9uIGNyZWF0ZVNlbmQgKHNlbGZOYW1lLCBjYWxsT25FcnJvcikge1xuICAgICAgYXNzZXJ0LmVxdWFsKHR5cGVvZiBzZWxmTmFtZSwgJ3N0cmluZycsICdiYXJyYWNrcy5zdG9yZS5zdGFydC5jcmVhdGVTZW5kOiBzZWxmTmFtZSBzaG91bGQgYmUgYSBzdHJpbmcnKVxuICAgICAgYXNzZXJ0Lm9rKCFjYWxsT25FcnJvciB8fCB0eXBlb2YgY2FsbE9uRXJyb3IgPT09ICdib29sZWFuJywgJ2JhcnJhY2tzLnN0b3JlLnN0YXJ0LnNlbmQ6IGNhbGxPbkVycm9yIHNob3VsZCBiZSB1bmRlZmluZWQgb3IgYSBib29sZWFuJylcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHNlbmQgKG5hbWUsIGRhdGEsIGNiKSB7XG4gICAgICAgIGlmICghY2IgJiYgIWNhbGxPbkVycm9yKSB7XG4gICAgICAgICAgY2IgPSBkYXRhXG4gICAgICAgICAgZGF0YSA9IG51bGxcbiAgICAgICAgfVxuICAgICAgICBkYXRhID0gKHR5cGVvZiBkYXRhID09PSAndW5kZWZpbmVkJyA/IG51bGwgOiBkYXRhKVxuXG4gICAgICAgIGFzc2VydC5lcXVhbCh0eXBlb2YgbmFtZSwgJ3N0cmluZycsICdiYXJyYWNrcy5zdG9yZS5zdGFydC5zZW5kOiBuYW1lIHNob3VsZCBiZSBhIHN0cmluZycpXG4gICAgICAgIGFzc2VydC5vayghY2IgfHwgdHlwZW9mIGNiID09PSAnZnVuY3Rpb24nLCAnYmFycmFja3Muc3RvcmUuc3RhcnQuc2VuZDogY2Igc2hvdWxkIGJlIGEgZnVuY3Rpb24nKVxuXG4gICAgICAgIGNvbnN0IGRvbmUgPSBjYWxsT25FcnJvciA/IG9uRXJyb3JDYWxsYmFjayA6IGNiXG4gICAgICAgIF9zZW5kKG5hbWUsIGRhdGEsIHNlbGZOYW1lLCBkb25lKVxuXG4gICAgICAgIGZ1bmN0aW9uIG9uRXJyb3JDYWxsYmFjayAoZXJyKSB7XG4gICAgICAgICAgZXJyID0gZXJyIHx8IG51bGxcbiAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICBhcHBseUhvb2sob25FcnJvckhvb2tzLCBlcnIsIF9zdGF0ZSwgZnVuY3Rpb24gY3JlYXRlU2VuZCAoc2VsZk5hbWUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIHNlbmQgKG5hbWUsIGRhdGEpIHtcbiAgICAgICAgICAgICAgICBhc3NlcnQuZXF1YWwodHlwZW9mIG5hbWUsICdzdHJpbmcnLCAnYmFycmFja3Muc3RvcmUuc3RhcnQuc2VuZDogbmFtZSBzaG91bGQgYmUgYSBzdHJpbmcnKVxuICAgICAgICAgICAgICAgIGRhdGEgPSAodHlwZW9mIGRhdGEgPT09ICd1bmRlZmluZWQnID8gbnVsbCA6IGRhdGEpXG4gICAgICAgICAgICAgICAgX3NlbmQobmFtZSwgZGF0YSwgc2VsZk5hbWUsIGRvbmUpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gY2FsbCBhbiBhY3Rpb25cbiAgICAvLyAoc3RyLCBzdHIsIGFueSwgZm4pIC0+IG51bGxcbiAgICBmdW5jdGlvbiBfc2VuZCAobmFtZSwgZGF0YSwgY2FsbGVyLCBjYikge1xuICAgICAgYXNzZXJ0LmVxdWFsKHR5cGVvZiBuYW1lLCAnc3RyaW5nJywgJ2JhcnJhY2tzLl9zZW5kOiBuYW1lIHNob3VsZCBiZSBhIHN0cmluZycpXG4gICAgICBhc3NlcnQuZXF1YWwodHlwZW9mIGNhbGxlciwgJ3N0cmluZycsICdiYXJyYWNrcy5fc2VuZDogY2FsbGVyIHNob3VsZCBiZSBhIHN0cmluZycpXG4gICAgICBhc3NlcnQuZXF1YWwodHlwZW9mIGNiLCAnZnVuY3Rpb24nLCAnYmFycmFja3MuX3NlbmQ6IGNiIHNob3VsZCBiZSBhIGZ1bmN0aW9uJylcblxuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciByZWR1Y2Vyc0NhbGxlZCA9IGZhbHNlXG4gICAgICAgIHZhciBlZmZlY3RzQ2FsbGVkID0gZmFsc2VcbiAgICAgICAgY29uc3QgbmV3U3RhdGUgPSB4dGVuZChfc3RhdGUpXG5cbiAgICAgICAgaWYgKG9uQWN0aW9uSG9va3MubGVuZ3RoKSB7XG4gICAgICAgICAgYXBwbHlIb29rKG9uQWN0aW9uSG9va3MsIGRhdGEsIF9zdGF0ZSwgbmFtZSwgY2FsbGVyLCBjcmVhdGVTZW5kKVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdmFsaWRhdGUgaWYgYSBuYW1lc3BhY2UgZXhpc3RzLiBOYW1lc3BhY2VzIGFyZSBkZWxpbWl0ZWQgYnkgJzonLlxuICAgICAgICB2YXIgYWN0aW9uTmFtZSA9IG5hbWVcbiAgICAgICAgaWYgKC86Ly50ZXN0KG5hbWUpKSB7XG4gICAgICAgICAgY29uc3QgYXJyID0gbmFtZS5zcGxpdCgnOicpXG4gICAgICAgICAgdmFyIG5zID0gYXJyLnNoaWZ0KClcbiAgICAgICAgICBhY3Rpb25OYW1lID0gYXJyLmpvaW4oJzonKVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgX3JlZHVjZXJzID0gbnMgPyByZWR1Y2Vyc1tuc10gOiByZWR1Y2Vyc1xuICAgICAgICBpZiAoX3JlZHVjZXJzICYmIF9yZWR1Y2Vyc1thY3Rpb25OYW1lXSkge1xuICAgICAgICAgIGlmIChucykge1xuICAgICAgICAgICAgY29uc3QgcmVkdWNlZFN0YXRlID0gX3JlZHVjZXJzW2FjdGlvbk5hbWVdKGRhdGEsIF9zdGF0ZVtuc10pXG4gICAgICAgICAgICBuZXdTdGF0ZVtuc10gPSB4dGVuZChfc3RhdGVbbnNdLCByZWR1Y2VkU3RhdGUpXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG11dGF0ZShuZXdTdGF0ZSwgcmVkdWNlcnNbYWN0aW9uTmFtZV0oZGF0YSwgX3N0YXRlKSlcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVkdWNlcnNDYWxsZWQgPSB0cnVlXG4gICAgICAgICAgaWYgKG9uU3RhdGVDaGFuZ2VIb29rcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGFwcGx5SG9vayhvblN0YXRlQ2hhbmdlSG9va3MsIGRhdGEsIG5ld1N0YXRlLCBfc3RhdGUsIGFjdGlvbk5hbWUsIGNyZWF0ZVNlbmQpXG4gICAgICAgICAgfVxuICAgICAgICAgIF9zdGF0ZSA9IG5ld1N0YXRlXG4gICAgICAgICAgY2IobnVsbCwgbmV3U3RhdGUpXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBfZWZmZWN0cyA9IG5zID8gZWZmZWN0c1tuc10gOiBlZmZlY3RzXG4gICAgICAgIGlmICghcmVkdWNlcnNDYWxsZWQgJiYgX2VmZmVjdHMgJiYgX2VmZmVjdHNbYWN0aW9uTmFtZV0pIHtcbiAgICAgICAgICBjb25zdCBzZW5kID0gY3JlYXRlU2VuZCgnZWZmZWN0OiAnICsgbmFtZSlcbiAgICAgICAgICBpZiAobnMpIF9lZmZlY3RzW2FjdGlvbk5hbWVdKGRhdGEsIF9zdGF0ZVtuc10sIHNlbmQsIGNiKVxuICAgICAgICAgIGVsc2UgX2VmZmVjdHNbYWN0aW9uTmFtZV0oZGF0YSwgX3N0YXRlLCBzZW5kLCBjYilcbiAgICAgICAgICBlZmZlY3RzQ2FsbGVkID0gdHJ1ZVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFyZWR1Y2Vyc0NhbGxlZCAmJiAhZWZmZWN0c0NhbGxlZCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGZpbmQgYWN0aW9uICcgKyBhY3Rpb25OYW1lKVxuICAgICAgICB9XG4gICAgICB9LCAwKVxuICAgIH1cbiAgfVxufVxuXG4vLyBjb21wb3NlIGFuIG9iamVjdCBjb25kaXRpb25hbGx5XG4vLyBvcHRpb25hbGx5IGNvbnRhaW5zIGEgbmFtZXNwYWNlXG4vLyB3aGljaCBpcyB1c2VkIHRvIG5lc3QgcHJvcGVydGllcy5cbi8vIChzdHIsIG9iaiwgb2JqLCBmbj8pIC0+IG51bGxcbmZ1bmN0aW9uIGFwcGx5IChucywgc291cmNlLCB0YXJnZXQsIHdyYXApIHtcbiAgaWYgKG5zICYmICF0YXJnZXRbbnNdKSB0YXJnZXRbbnNdID0ge31cbiAgT2JqZWN0LmtleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBjb25zdCBjYiA9IHdyYXAgPyB3cmFwKHNvdXJjZVtrZXldLCBrZXkpIDogc291cmNlW2tleV1cbiAgICBpZiAobnMpIHRhcmdldFtuc11ba2V5XSA9IGNiXG4gICAgZWxzZSB0YXJnZXRba2V5XSA9IGNiXG4gIH0pXG59XG5cbi8vIGhhbmRsZSBlcnJvcnMgYWxsIHRoZSB3YXkgYXQgdGhlIHRvcCBvZiB0aGUgdHJhY2Vcbi8vIGVycj8gLT4gbnVsbFxuZnVuY3Rpb24gZGVmYXVsdE9uRXJyb3IgKGVycikge1xuICB0aHJvdyBlcnJcbn1cblxuZnVuY3Rpb24gd3JhcE9uRXJyb3IgKG9uRXJyb3IpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIG9uRXJyb3JXcmFwIChlcnIsIHN0YXRlLCBjcmVhdGVTZW5kKSB7XG4gICAgaWYgKGVycikgb25FcnJvcihlcnIsIHN0YXRlLCBjcmVhdGVTZW5kKVxuICB9XG59XG5cbi8vIHRha2UgYSBhcHBseSBhbiBhcnJheSBvZiB0cmFuc2Zvcm1zIG9udG8gYSB2YWx1ZS4gVGhlIG5ldyB2YWx1ZVxuLy8gbXVzdCBiZSByZXR1cm5lZCBzeW5jaHJvbm91c2x5IGZyb20gdGhlIHRyYW5zZm9ybVxuLy8gKGFueSwgW2ZuXSkgLT4gYW55XG5mdW5jdGlvbiB3cmFwSG9vayAodmFsdWUsIHRyYW5zZm9ybXMpIHtcbiAgdHJhbnNmb3Jtcy5mb3JFYWNoKGZ1bmN0aW9uICh0cmFuc2Zvcm0pIHtcbiAgICB2YWx1ZSA9IHRyYW5zZm9ybSh2YWx1ZSlcbiAgfSlcbiAgcmV0dXJuIHZhbHVlXG59XG4iLCJ2YXIgZG9jdW1lbnQgPSByZXF1aXJlKCdnbG9iYWwvZG9jdW1lbnQnKVxyXG52YXIgaHlwZXJ4ID0gcmVxdWlyZSgnaHlwZXJ4JylcclxudmFyIG9ubG9hZCA9IHJlcXVpcmUoJ29uLWxvYWQnKVxyXG5cclxudmFyIFNWR05TID0gJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJ1xyXG52YXIgWExJTktOUyA9ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJ1xyXG5cclxudmFyIEJPT0xfUFJPUFMgPSB7XHJcbiAgYXV0b2ZvY3VzOiAxLFxyXG4gIGNoZWNrZWQ6IDEsXHJcbiAgZGVmYXVsdGNoZWNrZWQ6IDEsXHJcbiAgZGlzYWJsZWQ6IDEsXHJcbiAgZm9ybW5vdmFsaWRhdGU6IDEsXHJcbiAgaW5kZXRlcm1pbmF0ZTogMSxcclxuICByZWFkb25seTogMSxcclxuICByZXF1aXJlZDogMSxcclxuICBzZWxlY3RlZDogMSxcclxuICB3aWxsdmFsaWRhdGU6IDFcclxufVxyXG52YXIgU1ZHX1RBR1MgPSBbXHJcbiAgJ3N2ZycsXHJcbiAgJ2FsdEdseXBoJywgJ2FsdEdseXBoRGVmJywgJ2FsdEdseXBoSXRlbScsICdhbmltYXRlJywgJ2FuaW1hdGVDb2xvcicsXHJcbiAgJ2FuaW1hdGVNb3Rpb24nLCAnYW5pbWF0ZVRyYW5zZm9ybScsICdjaXJjbGUnLCAnY2xpcFBhdGgnLCAnY29sb3ItcHJvZmlsZScsXHJcbiAgJ2N1cnNvcicsICdkZWZzJywgJ2Rlc2MnLCAnZWxsaXBzZScsICdmZUJsZW5kJywgJ2ZlQ29sb3JNYXRyaXgnLFxyXG4gICdmZUNvbXBvbmVudFRyYW5zZmVyJywgJ2ZlQ29tcG9zaXRlJywgJ2ZlQ29udm9sdmVNYXRyaXgnLCAnZmVEaWZmdXNlTGlnaHRpbmcnLFxyXG4gICdmZURpc3BsYWNlbWVudE1hcCcsICdmZURpc3RhbnRMaWdodCcsICdmZUZsb29kJywgJ2ZlRnVuY0EnLCAnZmVGdW5jQicsXHJcbiAgJ2ZlRnVuY0cnLCAnZmVGdW5jUicsICdmZUdhdXNzaWFuQmx1cicsICdmZUltYWdlJywgJ2ZlTWVyZ2UnLCAnZmVNZXJnZU5vZGUnLFxyXG4gICdmZU1vcnBob2xvZ3knLCAnZmVPZmZzZXQnLCAnZmVQb2ludExpZ2h0JywgJ2ZlU3BlY3VsYXJMaWdodGluZycsXHJcbiAgJ2ZlU3BvdExpZ2h0JywgJ2ZlVGlsZScsICdmZVR1cmJ1bGVuY2UnLCAnZmlsdGVyJywgJ2ZvbnQnLCAnZm9udC1mYWNlJyxcclxuICAnZm9udC1mYWNlLWZvcm1hdCcsICdmb250LWZhY2UtbmFtZScsICdmb250LWZhY2Utc3JjJywgJ2ZvbnQtZmFjZS11cmknLFxyXG4gICdmb3JlaWduT2JqZWN0JywgJ2cnLCAnZ2x5cGgnLCAnZ2x5cGhSZWYnLCAnaGtlcm4nLCAnaW1hZ2UnLCAnbGluZScsXHJcbiAgJ2xpbmVhckdyYWRpZW50JywgJ21hcmtlcicsICdtYXNrJywgJ21ldGFkYXRhJywgJ21pc3NpbmctZ2x5cGgnLCAnbXBhdGgnLFxyXG4gICdwYXRoJywgJ3BhdHRlcm4nLCAncG9seWdvbicsICdwb2x5bGluZScsICdyYWRpYWxHcmFkaWVudCcsICdyZWN0JyxcclxuICAnc2V0JywgJ3N0b3AnLCAnc3dpdGNoJywgJ3N5bWJvbCcsICd0ZXh0JywgJ3RleHRQYXRoJywgJ3RpdGxlJywgJ3RyZWYnLFxyXG4gICd0c3BhbicsICd1c2UnLCAndmlldycsICd2a2VybidcclxuXVxyXG5cclxuZnVuY3Rpb24gYmVsQ3JlYXRlRWxlbWVudCAodGFnLCBwcm9wcywgY2hpbGRyZW4pIHtcclxuICB2YXIgZWxcclxuXHJcbiAgLy8gSWYgYW4gc3ZnIHRhZywgaXQgbmVlZHMgYSBuYW1lc3BhY2VcclxuICBpZiAoU1ZHX1RBR1MuaW5kZXhPZih0YWcpICE9PSAtMSkge1xyXG4gICAgcHJvcHMubmFtZXNwYWNlID0gU1ZHTlNcclxuICB9XHJcblxyXG4gIC8vIElmIHdlIGFyZSB1c2luZyBhIG5hbWVzcGFjZVxyXG4gIHZhciBucyA9IGZhbHNlXHJcbiAgaWYgKHByb3BzLm5hbWVzcGFjZSkge1xyXG4gICAgbnMgPSBwcm9wcy5uYW1lc3BhY2VcclxuICAgIGRlbGV0ZSBwcm9wcy5uYW1lc3BhY2VcclxuICB9XHJcblxyXG4gIC8vIENyZWF0ZSB0aGUgZWxlbWVudFxyXG4gIGlmIChucykge1xyXG4gICAgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobnMsIHRhZylcclxuICB9IGVsc2Uge1xyXG4gICAgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZylcclxuICB9XHJcblxyXG4gIC8vIElmIGFkZGluZyBvbmxvYWQgZXZlbnRzXHJcbiAgaWYgKHByb3BzLm9ubG9hZCB8fCBwcm9wcy5vbnVubG9hZCkge1xyXG4gICAgdmFyIGxvYWQgPSBwcm9wcy5vbmxvYWQgfHwgZnVuY3Rpb24gKCkge31cclxuICAgIHZhciB1bmxvYWQgPSBwcm9wcy5vbnVubG9hZCB8fCBmdW5jdGlvbiAoKSB7fVxyXG4gICAgb25sb2FkKGVsLCBmdW5jdGlvbiBiZWxPbmxvYWQgKCkge1xyXG4gICAgICBsb2FkKGVsKVxyXG4gICAgfSwgZnVuY3Rpb24gYmVsT251bmxvYWQgKCkge1xyXG4gICAgICB1bmxvYWQoZWwpXHJcbiAgICB9LFxyXG4gICAgLy8gV2UgaGF2ZSB0byB1c2Ugbm9uLXN0YW5kYXJkIGBjYWxsZXJgIHRvIGZpbmQgd2hvIGludm9rZXMgYGJlbENyZWF0ZUVsZW1lbnRgXHJcbiAgICBiZWxDcmVhdGVFbGVtZW50LmNhbGxlci5jYWxsZXIuY2FsbGVyKVxyXG4gICAgZGVsZXRlIHByb3BzLm9ubG9hZFxyXG4gICAgZGVsZXRlIHByb3BzLm9udW5sb2FkXHJcbiAgfVxyXG5cclxuICAvLyBDcmVhdGUgdGhlIHByb3BlcnRpZXNcclxuICBmb3IgKHZhciBwIGluIHByb3BzKSB7XHJcbiAgICBpZiAocHJvcHMuaGFzT3duUHJvcGVydHkocCkpIHtcclxuICAgICAgdmFyIGtleSA9IHAudG9Mb3dlckNhc2UoKVxyXG4gICAgICB2YXIgdmFsID0gcHJvcHNbcF1cclxuICAgICAgLy8gTm9ybWFsaXplIGNsYXNzTmFtZVxyXG4gICAgICBpZiAoa2V5ID09PSAnY2xhc3NuYW1lJykge1xyXG4gICAgICAgIGtleSA9ICdjbGFzcydcclxuICAgICAgICBwID0gJ2NsYXNzJ1xyXG4gICAgICB9XHJcbiAgICAgIC8vIFRoZSBmb3IgYXR0cmlidXRlIGdldHMgdHJhbnNmb3JtZWQgdG8gaHRtbEZvciwgYnV0IHdlIGp1c3Qgc2V0IGFzIGZvclxyXG4gICAgICBpZiAocCA9PT0gJ2h0bWxGb3InKSB7XHJcbiAgICAgICAgcCA9ICdmb3InXHJcbiAgICAgIH1cclxuICAgICAgLy8gSWYgYSBwcm9wZXJ0eSBpcyBib29sZWFuLCBzZXQgaXRzZWxmIHRvIHRoZSBrZXlcclxuICAgICAgaWYgKEJPT0xfUFJPUFNba2V5XSkge1xyXG4gICAgICAgIGlmICh2YWwgPT09ICd0cnVlJykgdmFsID0ga2V5XHJcbiAgICAgICAgZWxzZSBpZiAodmFsID09PSAnZmFsc2UnKSBjb250aW51ZVxyXG4gICAgICB9XHJcbiAgICAgIC8vIElmIGEgcHJvcGVydHkgcHJlZmVycyBiZWluZyBzZXQgZGlyZWN0bHkgdnMgc2V0QXR0cmlidXRlXHJcbiAgICAgIGlmIChrZXkuc2xpY2UoMCwgMikgPT09ICdvbicpIHtcclxuICAgICAgICBlbFtwXSA9IHZhbFxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmIChucykge1xyXG4gICAgICAgICAgaWYgKHAgPT09ICd4bGluazpocmVmJykge1xyXG4gICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGVOUyhYTElOS05TLCBwLCB2YWwpXHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBwLCB2YWwpXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZShwLCB2YWwpXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBhcHBlbmRDaGlsZCAoY2hpbGRzKSB7XHJcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoY2hpbGRzKSkgcmV0dXJuXHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICB2YXIgbm9kZSA9IGNoaWxkc1tpXVxyXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShub2RlKSkge1xyXG4gICAgICAgIGFwcGVuZENoaWxkKG5vZGUpXHJcbiAgICAgICAgY29udGludWVcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHR5cGVvZiBub2RlID09PSAnbnVtYmVyJyB8fFxyXG4gICAgICAgIHR5cGVvZiBub2RlID09PSAnYm9vbGVhbicgfHxcclxuICAgICAgICBub2RlIGluc3RhbmNlb2YgRGF0ZSB8fFxyXG4gICAgICAgIG5vZGUgaW5zdGFuY2VvZiBSZWdFeHApIHtcclxuICAgICAgICBub2RlID0gbm9kZS50b1N0cmluZygpXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICh0eXBlb2Ygbm9kZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICBpZiAoZWwubGFzdENoaWxkICYmIGVsLmxhc3RDaGlsZC5ub2RlTmFtZSA9PT0gJyN0ZXh0Jykge1xyXG4gICAgICAgICAgZWwubGFzdENoaWxkLm5vZGVWYWx1ZSArPSBub2RlXHJcbiAgICAgICAgICBjb250aW51ZVxyXG4gICAgICAgIH1cclxuICAgICAgICBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobm9kZSlcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKG5vZGUgJiYgbm9kZS5ub2RlVHlwZSkge1xyXG4gICAgICAgIGVsLmFwcGVuZENoaWxkKG5vZGUpXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgYXBwZW5kQ2hpbGQoY2hpbGRyZW4pXHJcblxyXG4gIHJldHVybiBlbFxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGh5cGVyeChiZWxDcmVhdGVFbGVtZW50KVxyXG5tb2R1bGUuZXhwb3J0cy5jcmVhdGVFbGVtZW50ID0gYmVsQ3JlYXRlRWxlbWVudFxyXG4iLCJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklpSjlcbiIsImNvbnN0IGRlZXBEaWZmID0gcmVxdWlyZSgnZGVlcC1kaWZmJylcbmNvbnN0IHBhZFJpZ2h0ID0gcmVxdWlyZSgncGFkLXJpZ2h0JylcbmNvbnN0IHBhZExlZnQgPSByZXF1aXJlKCdwYWQtbGVmdCcpXG5jb25zdCBicm93c2VyID0gcmVxdWlyZSgnZGV0ZWN0LWJyb3dzZXInKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNob29Mb2dcblxuLy8gY29sb3JzIGZyb20gaHR0cDovL2NscnMuY2MvXG5jb25zdCBjb2xvcnMgPSB7XG4gIGdyZWVuOiAnIzJFQ0M0MCcsXG4gIHJlZDogJyNGRjQxMzYnLFxuICBibHVlOiAnIzdGREJGRicsXG4gIGxpZ2h0R3JheTogJyNEREREREQnLFxuICBncmF5OiAnI0FBQUFBQScsXG4gIHllbGxvdzogJyNGRkRDMDAnLFxuICBkZWZhdWx0OiAnIzI5MzAzNydcbn1cblxuY29uc3QgcGFkZGluZ3MgPSB7XG4gIHR5cGU6IDcsXG4gIGFjdGlvblR5cGU6IDdcbn1cblxuLy8gRGV2ZWxvcG1lbnQgbG9nZ2VyIGZvciBjaG9vXG4vLyBudWxsIC0+IG9ialxuZnVuY3Rpb24gY2hvb0xvZyAoKSB7XG4gIGNvbnN0IHN0YXJ0VGltZSA9IERhdGUubm93KClcblxuICByZXR1cm4ge1xuICAgIG9uQWN0aW9uOiBvbkFjdGlvbixcbiAgICBvbkVycm9yOiBvbkVycm9yLFxuICAgIG9uU3RhdGVDaGFuZ2U6IG9uU3RhdGVDaGFuZ2VcbiAgfVxuXG4gIC8vIGhhbmRsZSBvbkFjdGlvbigpIGNhbGxzXG4gIC8vIChvYmosIG9iaiwgc3RyLCBzdHIsIGZuKSAtPiBudWxsXG4gIGZ1bmN0aW9uIG9uQWN0aW9uIChkYXRhLCBzdGF0ZSwgbmFtZSwgdHJhY2UsIGNyZWF0ZVNlbmQpIHtcbiAgICBjb25zdCBzcGxpdCA9IHRyYWNlLnNwbGl0KCc6JylcbiAgICBjb25zdCBhY3Rpb25UeXBlID0gc3BsaXRbMF0udHJpbSgpXG4gICAgY29uc3QgY2FsbGVyID0gc3BsaXRbMV0udHJpbSgpXG5cbiAgICBjb25zdCBsaW5lID0gW11cbiAgICBjb2xvcmlmeSgnbGlnaHRHcmF5JywgcmVuZGVyVGltZShzdGFydFRpbWUpICsgJyAnLCBsaW5lKVxuICAgIGNvbG9yaWZ5KCdncmF5JywgcmVuZGVyVHlwZSgnYWN0aW9uJykgKyAnICcsIGxpbmUpXG4gICAgY29sb3JpZnkoJ2dyYXknLCByZW5kZXJBY3Rpb25UeXBlKGFjdGlvblR5cGUpICsgJyAnLCBsaW5lKVxuXG4gICAgY29sb3JpZnkoJ2RlZmF1bHQnLCBcIidcIiArIGNhbGxlciArIFwiJ1wiLCBsaW5lKVxuICAgIGNvbG9yaWZ5KCdkZWZhdWx0JywgJy0+JywgbGluZSlcbiAgICBjb2xvcmlmeSgnZGVmYXVsdCcsIFwiJ1wiICsgbmFtZSArIFwiJ1wiLCBsaW5lKVxuXG4gICAgaWYgKGdyb3VwQ29sbGFwc2VTdXBwb3J0ZWQoKSkge1xuICAgICAgbG9nR3JvdXAobGluZSlcbiAgICAgIGxvZ0lubmVyKG5hbWUsIGRhdGEpXG4gICAgICBjb25zb2xlLmdyb3VwRW5kKClcbiAgICB9IGVsc2Uge1xuICAgICAgbG9nKGxpbmUpXG4gICAgICBsb2dJbm5lcihuYW1lLCBkYXRhKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvZ0lubmVyIChuYW1lLCBhY3Rpb24pIHtcbiAgICAgIGNvbnNvbGUubG9nKCdhY3Rpb24gbmFtZTonLCBuYW1lKVxuICAgICAgY29uc29sZS5sb2coJ2RhdGE6JywgZGF0YSlcbiAgICB9XG4gIH1cblxuICAvLyBoYW5kbGUgb25FcnJvcigpIGNhbGxzXG4gIC8vIChzdHIsIG9iaiwgZm4pIC0+IG51bGxcbiAgZnVuY3Rpb24gb25FcnJvciAoZXJyLCBzdGF0ZSwgY3JlYXRlU2VuZCkge1xuICAgIGNvbnN0IGxpbmUgPSBbXVxuICAgIGNvbG9yaWZ5KCdsaWdodEdyYXknLCByZW5kZXJUaW1lKHN0YXJ0VGltZSkgKyAnICcsIGxpbmUpXG4gICAgY29sb3JpZnkoJ3JlZCcsIHJlbmRlclR5cGUoJ2Vycm9yJykgKyAnICcsIGxpbmUpXG4gICAgY29sb3JpZnkoJ2RlZmF1bHQnLCBlcnIubWVzc2FnZSArICcgJywgbGluZSlcblxuICAgIGlmIChncm91cENvbGxhcHNlU3VwcG9ydGVkKCkpIHtcbiAgICAgIGxvZ0dyb3VwKGxpbmUpXG4gICAgICBsb2dJbm5lcihlcnIpXG4gICAgICBjb25zb2xlLmdyb3VwRW5kKClcbiAgICB9IGVsc2Uge1xuICAgICAgbG9nKGxpbmUpXG4gICAgICBsb2dJbm5lcihlcnIpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9nSW5uZXIgKGVycikge1xuICAgICAgY29uc29sZS5lcnJvcihlcnIpXG4gICAgfVxuICB9XG5cbiAgLy8gaGFuZGxlIG9uU3RhdGVDaGFuZ2UoKSBjYWxsc1xuICAvLyAob2JqLCBvYmosIG9iaiwgZm4pIC0+IG51bGxcbiAgZnVuY3Rpb24gb25TdGF0ZUNoYW5nZSAoZGF0YSwgc3RhdGUsIHByZXYsIGNyZWF0ZVNlbmQpIHtcbiAgICBjb25zdCBkaWZmID0gZGVlcERpZmYocHJldiwgc3RhdGUpIHx8IFtdXG4gICAgLy8gd2FybiBpZiB0aGVyZSBpcyBubyBkaWZmXG4gICAgY29uc3QgaGFzV2FybiA9IGRpZmYubGVuZ3RoID09PSAwXG4gICAgY29uc3QgaW5saW5lVGV4dCA9IChmdW5jdGlvbiAoZGlmZikge1xuICAgICAgaWYgKGhhc1dhcm4pIHtcbiAgICAgICAgcmV0dXJuICdubyBkaWZmJ1xuICAgICAgfSBlbHNlIGlmIChkaWZmLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gJ2RpZmYnXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gJ2RpZmZzJ1xuICAgICAgfVxuICAgIH0pKGRpZmYpXG5cbiAgICBjb25zdCBsaW5lID0gW11cbiAgICBjb2xvcmlmeSgnbGlnaHRHcmF5JywgcmVuZGVyVGltZShzdGFydFRpbWUpICsgJyAnLCBsaW5lKVxuICAgIGNvbG9yaWZ5KGhhc1dhcm4gPyAneWVsbG93JyA6ICdncmF5JywgcmVuZGVyVHlwZSgnc3RhdGUnKSArICcgJywgbGluZSlcbiAgICBjb2xvcmlmeSgnZGVmYXVsdCcsIChoYXNXYXJuID8gJycgOiBkaWZmLmxlbmd0aCArICcgJykgKyBpbmxpbmVUZXh0LCBsaW5lKVxuXG4gICAgaWYgKGdyb3VwQ29sbGFwc2VTdXBwb3J0ZWQoKSkge1xuICAgICAgbG9nR3JvdXAobGluZSlcbiAgICAgIGxvZ0lubmVyKHByZXYsIHN0YXRlKVxuICAgICAgY29uc29sZS5ncm91cEVuZCgpXG4gICAgfSBlbHNlIHtcbiAgICAgIGxvZyhsaW5lKVxuICAgICAgbG9nSW5uZXIocHJldiwgc3RhdGUpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9nSW5uZXIgKHByZXYsIHN0YXRlKSB7XG4gICAgICBjb25zb2xlLmxvZygncHJldiAnLCBwcmV2KVxuICAgICAgY29uc29sZS5sb2coJ3N0YXRlJywgc3RhdGUpXG4gICAgICBpZiAoaGFzV2Fybikge1xuICAgICAgICBjb25zb2xlLndhcm4oJ2RpZmYgJywgJ1RoZXJlIGlzIG5vIGRpZmZlcmVuY2UgYmV0d2VlbiBzdGF0ZXMnKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5sb2coJ2RpZmYgJywgZGlmZilcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8gY3JlYXRlIGEgY29sbGFwc2VkR3JvdXAgbG9nIGZyb20gYW4gYXJyYXlcbi8vIHN0ciAtPiBbc3RyLCBzdHJdXG5mdW5jdGlvbiBsb2dHcm91cCAobGluZSkge1xuICBjb25zb2xlLmdyb3VwQ29sbGFwc2VkLmFwcGx5KGNvbnNvbGUsIGxpbmUpXG59XG5cbi8vIGNyZWF0ZSBhIGNvbnNvbGUgbG9nIGZyb20gYW4gYXJyYXlcbi8vIHN0ciAtPiBbc3RyLCBzdHJdXG5mdW5jdGlvbiBsb2cgKGxpbmUpIHtcbiAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgbGluZSlcbn1cblxuLy8gaW5kZW50IG1lc3NhZ2UgdHlwZXNcbi8vIHN0ciAtPiBzdHJcbmZ1bmN0aW9uIHJlbmRlclR5cGUgKG1zZykge1xuICBjb25zdCBsZWZ0UGFkID0gcGFkZGluZ3MudHlwZVxuICBjb25zdCByaWdodFBhZCA9IHBhZGRpbmdzLmFjdGlvblR5cGUgKyBsZWZ0UGFkICsgMlxuICByZXR1cm4gKG1zZyA9PT0gJ3N0YXRlJyB8fCBtc2cgPT09ICdlcnJvcicpXG4gICAgPyBwYWRSaWdodChwYWRMZWZ0KG1zZywgbGVmdFBhZCwgJyAnKSwgcmlnaHRQYWQsICcgJylcbiAgICA6IHBhZExlZnQobXNnLCBsZWZ0UGFkLCAnICcpXG59XG5cbi8vIGluZGVudCBhY3Rpb24gdHlwZXNcbi8vIHN0ciAtPiBzdHJcbmZ1bmN0aW9uIHJlbmRlckFjdGlvblR5cGUgKG1zZykge1xuICBjb25zdCBwYWRkaW5nID0gcGFkZGluZ3MuYWN0aW9uVHlwZVxuICBpZiAobXNnID09PSAnc3Vic2NyaXB0aW9uJykgbXNnID0gJ3N1YnMnXG4gIHJldHVybiBwYWRSaWdodChtc2csIHBhZGRpbmcsICcgJylcbn1cblxuLy8gdG9IdG1sICsgY2hhbGtcbi8vIChzdHIsIHN0ciwgW3N0ciwgLi4uc3RyXSkgLT4gW3N0ciwgc3RyXVxuZnVuY3Rpb24gY29sb3JpZnkgKGNvbG9yLCBsaW5lLCBwcmV2KSB7XG4gIHZhciBuZXdMaW5lID0gJyVjJyArIGxpbmVcbiAgdmFyIG5ld1N0eWxlID0gJ2NvbG9yOiAnICsgY29sb3JzW2NvbG9yXSArICc7J1xuXG4gIGlmICghcHJldikge1xuICAgIHByZXYgPSBbIG5ld0xpbmUsIG5ld1N0eWxlIF1cbiAgICByZXR1cm4gcHJldlxuICB9XG5cbiAgaWYgKCFwcmV2WzBdKSBwcmV2WzBdID0gJydcbiAgcHJldlswXSArPSAnICcgKyBuZXdMaW5lXG5cbiAgaWYgKCFwcmV2WzFdKSBwcmV2WzFdID0gJydcbiAgaWYgKGJyb3dzZXIubmFtZSA9PT0gJ2ZpcmVmb3gnKSB7XG4gICAgcHJldlsxXSArPSAnICcgKyBuZXdTdHlsZVxuICB9IGVsc2Uge1xuICAgIHByZXYucHVzaChuZXdTdHlsZSlcbiAgfVxuICByZXR1cm4gcHJldlxufVxuXG4vLyByZW5kZXIgdGhlIHRpbWVcbi8vIG51bSAtPiBudWxsXG5mdW5jdGlvbiByZW5kZXJUaW1lIChzdGFydFRpbWUpIHtcbiAgdmFyIG9mZnNldCA9IFN0cmluZyhNYXRoLnJvdW5kKChEYXRlLm5vdygpIC0gc3RhcnRUaW1lKSAvIDEwMDApICUgMTAwMDApXG4gIHZhciBtc2cgPSAnWycgKyBwYWRMZWZ0KG9mZnNldCwgNCwgJzAnKSArICddJ1xuICByZXR1cm4gbXNnXG59XG5cbmZ1bmN0aW9uIGdyb3VwQ29sbGFwc2VTdXBwb3J0ZWQgKCkge1xuICByZXR1cm4gY29uc29sZS5ncm91cENvbGxhcHNlZCAmJiBicm93c2VyLm5hbWUgIT09ICdmaXJlZm94J1xufVxuXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJ3lvLXlvJylcbiIsImNvbnN0IGhpc3RvcnkgPSByZXF1aXJlKCdzaGVldC1yb3V0ZXIvaGlzdG9yeScpXG5jb25zdCBzaGVldFJvdXRlciA9IHJlcXVpcmUoJ3NoZWV0LXJvdXRlcicpXG5jb25zdCBkb2N1bWVudCA9IHJlcXVpcmUoJ2dsb2JhbC9kb2N1bWVudCcpXG5jb25zdCBvblJlYWR5ID0gcmVxdWlyZSgnZG9jdW1lbnQtcmVhZHknKVxuY29uc3QgaHJlZiA9IHJlcXVpcmUoJ3NoZWV0LXJvdXRlci9ocmVmJylcbmNvbnN0IGhhc2ggPSByZXF1aXJlKCdzaGVldC1yb3V0ZXIvaGFzaCcpXG5jb25zdCBoYXNoTWF0Y2ggPSByZXF1aXJlKCdoYXNoLW1hdGNoJylcbmNvbnN0IGJhcnJhY2tzID0gcmVxdWlyZSgnYmFycmFja3MnKVxuY29uc3QgbmFub3JhZiA9IHJlcXVpcmUoJ25hbm9yYWYnKVxuY29uc3QgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0JylcbmNvbnN0IHh0ZW5kID0gcmVxdWlyZSgneHRlbmQnKVxuY29uc3QgeW8gPSByZXF1aXJlKCd5by15bycpXG5cbm1vZHVsZS5leHBvcnRzID0gY2hvb1xuXG4vLyBmcmFtZXdvcmsgZm9yIGNyZWF0aW5nIHN0dXJkeSB3ZWIgYXBwbGljYXRpb25zXG4vLyBudWxsIC0+IGZuXG5mdW5jdGlvbiBjaG9vIChvcHRzKSB7XG4gIG9wdHMgPSBvcHRzIHx8IHt9XG5cbiAgY29uc3QgX3N0b3JlID0gc3RhcnQuX3N0b3JlID0gYmFycmFja3MoKVxuICB2YXIgX3JvdXRlciA9IHN0YXJ0Ll9yb3V0ZXIgPSBudWxsXG4gIHZhciBfZGVmYXVsdFJvdXRlID0gbnVsbFxuICB2YXIgX3Jvb3ROb2RlID0gbnVsbFxuICB2YXIgX3JvdXRlcyA9IG51bGxcbiAgdmFyIF9mcmFtZSA9IG51bGxcblxuICBfc3RvcmUudXNlKHsgb25TdGF0ZUNoYW5nZTogcmVuZGVyIH0pXG4gIF9zdG9yZS51c2Uob3B0cylcblxuICBzdGFydC50b1N0cmluZyA9IHRvU3RyaW5nXG4gIHN0YXJ0LnJvdXRlciA9IHJvdXRlclxuICBzdGFydC5tb2RlbCA9IG1vZGVsXG4gIHN0YXJ0LnN0YXJ0ID0gc3RhcnRcbiAgc3RhcnQudXNlID0gdXNlXG5cbiAgcmV0dXJuIHN0YXJ0XG5cbiAgLy8gcmVuZGVyIHRoZSBhcHBsaWNhdGlvbiB0byBhIHN0cmluZ1xuICAvLyAoc3RyLCBvYmopIC0+IHN0clxuICBmdW5jdGlvbiB0b1N0cmluZyAocm91dGUsIHNlcnZlclN0YXRlKSB7XG4gICAgc2VydmVyU3RhdGUgPSBzZXJ2ZXJTdGF0ZSB8fCB7fVxuICAgIGFzc2VydC5lcXVhbCh0eXBlb2Ygcm91dGUsICdzdHJpbmcnLCAnY2hvby5hcHAudG9TdHJpbmc6IHJvdXRlIG11c3QgYmUgYSBzdHJpbmcnKVxuICAgIGFzc2VydC5lcXVhbCh0eXBlb2Ygc2VydmVyU3RhdGUsICdvYmplY3QnLCAnY2hvby5hcHAudG9TdHJpbmc6IHNlcnZlclN0YXRlIG11c3QgYmUgYW4gb2JqZWN0JylcbiAgICBfc3RvcmUuc3RhcnQoeyBzdWJzY3JpcHRpb25zOiBmYWxzZSwgcmVkdWNlcnM6IGZhbHNlLCBlZmZlY3RzOiBmYWxzZSB9KVxuXG4gICAgY29uc3Qgc3RhdGUgPSBfc3RvcmUuc3RhdGUoeyBzdGF0ZTogc2VydmVyU3RhdGUgfSlcbiAgICBjb25zdCByb3V0ZXIgPSBjcmVhdGVSb3V0ZXIoX2RlZmF1bHRSb3V0ZSwgX3JvdXRlcywgY3JlYXRlU2VuZClcbiAgICBjb25zdCB0cmVlID0gcm91dGVyKHJvdXRlLCBzdGF0ZSlcbiAgICByZXR1cm4gdHJlZS5vdXRlckhUTUwgfHwgdHJlZS50b1N0cmluZygpXG5cbiAgICBmdW5jdGlvbiBjcmVhdGVTZW5kICgpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBzZW5kICgpIHtcbiAgICAgICAgYXNzZXJ0Lm9rKGZhbHNlLCAnY2hvbzogc2VuZCgpIGNhbm5vdCBiZSBjYWxsZWQgZnJvbSBOb2RlJylcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBzdGFydCB0aGUgYXBwbGljYXRpb25cbiAgLy8gKHN0cj8sIG9iaj8pIC0+IERPTU5vZGVcbiAgZnVuY3Rpb24gc3RhcnQgKHNlbGVjdG9yLCBzdGFydE9wdHMpIHtcbiAgICBpZiAoIXN0YXJ0T3B0cyAmJiB0eXBlb2Ygc2VsZWN0b3IgIT09ICdzdHJpbmcnKSB7XG4gICAgICBzdGFydE9wdHMgPSBzZWxlY3RvclxuICAgICAgc2VsZWN0b3IgPSBudWxsXG4gICAgfVxuICAgIHN0YXJ0T3B0cyA9IHN0YXJ0T3B0cyB8fCB7fVxuXG4gICAgX3N0b3JlLm1vZGVsKGFwcEluaXQoc3RhcnRPcHRzKSlcbiAgICBjb25zdCBjcmVhdGVTZW5kID0gX3N0b3JlLnN0YXJ0KHN0YXJ0T3B0cylcbiAgICBfcm91dGVyID0gc3RhcnQuX3JvdXRlciA9IGNyZWF0ZVJvdXRlcihfZGVmYXVsdFJvdXRlLCBfcm91dGVzLCBjcmVhdGVTZW5kKVxuICAgIGNvbnN0IHN0YXRlID0gX3N0b3JlLnN0YXRlKHtzdGF0ZToge319KVxuXG4gICAgaWYgKCFzZWxlY3Rvcikge1xuICAgICAgY29uc3QgdHJlZSA9IF9yb3V0ZXIoc3RhdGUubG9jYXRpb24ucGF0aG5hbWUsIHN0YXRlKVxuICAgICAgX3Jvb3ROb2RlID0gdHJlZVxuICAgICAgcmV0dXJuIHRyZWVcbiAgICB9IGVsc2Uge1xuICAgICAgb25SZWFkeShmdW5jdGlvbiBvblJlYWR5ICgpIHtcbiAgICAgICAgY29uc3Qgb2xkVHJlZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpXG4gICAgICAgIGFzc2VydC5vayhvbGRUcmVlLCAnY291bGQgbm90IHF1ZXJ5IHNlbGVjdG9yOiAnICsgc2VsZWN0b3IpXG4gICAgICAgIGNvbnN0IG5ld1RyZWUgPSBfcm91dGVyKHN0YXRlLmxvY2F0aW9uLnBhdGhuYW1lLCBzdGF0ZSlcbiAgICAgICAgX3Jvb3ROb2RlID0geW8udXBkYXRlKG9sZFRyZWUsIG5ld1RyZWUpXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIC8vIHVwZGF0ZSB0aGUgRE9NIGFmdGVyIGV2ZXJ5IHN0YXRlIG11dGF0aW9uXG4gIC8vIChvYmosIG9iaiwgb2JqLCBzdHIsIGZuKSAtPiBudWxsXG4gIGZ1bmN0aW9uIHJlbmRlciAoZGF0YSwgc3RhdGUsIHByZXYsIG5hbWUsIGNyZWF0ZVNlbmQpIHtcbiAgICBpZiAoIV9mcmFtZSkge1xuICAgICAgX2ZyYW1lID0gbmFub3JhZihmdW5jdGlvbiAoc3RhdGUsIHByZXYpIHtcbiAgICAgICAgY29uc3QgbmV3VHJlZSA9IF9yb3V0ZXIoc3RhdGUubG9jYXRpb24ucGF0aG5hbWUsIHN0YXRlLCBwcmV2KVxuICAgICAgICBfcm9vdE5vZGUgPSB5by51cGRhdGUoX3Jvb3ROb2RlLCBuZXdUcmVlKVxuICAgICAgfSlcbiAgICB9XG4gICAgX2ZyYW1lKHN0YXRlLCBwcmV2KVxuICB9XG5cbiAgLy8gcmVnaXN0ZXIgYWxsIHJvdXRlcyBvbiB0aGUgcm91dGVyXG4gIC8vIChzdHI/LCBbZm58W2ZuXV0pIC0+IG9ialxuICBmdW5jdGlvbiByb3V0ZXIgKGRlZmF1bHRSb3V0ZSwgcm91dGVzKSB7XG4gICAgX2RlZmF1bHRSb3V0ZSA9IGRlZmF1bHRSb3V0ZVxuICAgIF9yb3V0ZXMgPSByb3V0ZXNcbiAgfVxuXG4gIC8vIGNyZWF0ZSBhIG5ldyBtb2RlbFxuICAvLyAoc3RyPywgb2JqKSAtPiBudWxsXG4gIGZ1bmN0aW9uIG1vZGVsIChtb2RlbCkge1xuICAgIF9zdG9yZS5tb2RlbChtb2RlbClcbiAgfVxuXG4gIC8vIHJlZ2lzdGVyIGEgcGx1Z2luXG4gIC8vIChvYmopIC0+IG51bGxcbiAgZnVuY3Rpb24gdXNlIChob29rcykge1xuICAgIGFzc2VydC5lcXVhbCh0eXBlb2YgaG9va3MsICdvYmplY3QnLCAnY2hvby51c2U6IGhvb2tzIHNob3VsZCBiZSBhbiBvYmplY3QnKVxuICAgIF9zdG9yZS51c2UoaG9va3MpXG4gIH1cblxuICAvLyBjcmVhdGUgYSBuZXcgcm91dGVyIHdpdGggYSBjdXN0b20gYGNyZWF0ZVJvdXRlKClgIGZ1bmN0aW9uXG4gIC8vIChzdHI/LCBvYmosIGZuPykgLT4gbnVsbFxuICBmdW5jdGlvbiBjcmVhdGVSb3V0ZXIgKGRlZmF1bHRSb3V0ZSwgcm91dGVzLCBjcmVhdGVTZW5kKSB7XG4gICAgdmFyIHByZXYgPSB7IHBhcmFtczoge30gfVxuICAgIHJldHVybiBzaGVldFJvdXRlcihkZWZhdWx0Um91dGUsIHJvdXRlcywgY3JlYXRlUm91dGUpXG5cbiAgICBmdW5jdGlvbiBjcmVhdGVSb3V0ZSAocm91dGVGbikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChyb3V0ZSwgaW5saW5lLCBjaGlsZCkge1xuICAgICAgICBpZiAodHlwZW9mIGlubGluZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGlubGluZSA9IHdyYXAoaW5saW5lLCByb3V0ZSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcm91dGVGbihyb3V0ZSwgaW5saW5lLCBjaGlsZClcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gd3JhcCAoY2hpbGQsIHJvdXRlKSB7XG4gICAgICAgIGNvbnN0IHNlbmQgPSBjcmVhdGVTZW5kKCd2aWV3OiAnICsgcm91dGUsIHRydWUpXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBjaG9vV3JhcCAocGFyYW1zLCBzdGF0ZSkge1xuICAgICAgICAgIGNvbnN0IG53UHJldiA9IHByZXZcbiAgICAgICAgICBjb25zdCBud1N0YXRlID0gcHJldiA9IHh0ZW5kKHN0YXRlLCB7IHBhcmFtczogcGFyYW1zIH0pXG4gICAgICAgICAgaWYgKG9wdHMuZnJlZXplICE9PSBmYWxzZSkgT2JqZWN0LmZyZWV6ZShud1N0YXRlKVxuICAgICAgICAgIHJldHVybiBjaGlsZChud1N0YXRlLCBud1ByZXYsIHNlbmQpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8gaW5pdGlhbCBhcHBsaWNhdGlvbiBzdGF0ZSBtb2RlbFxuLy8gb2JqIC0+IG9ialxuZnVuY3Rpb24gYXBwSW5pdCAob3B0cykge1xuICBjb25zdCBsb2MgPSBkb2N1bWVudC5sb2NhdGlvblxuICBjb25zdCBzdGF0ZSA9IHsgcGF0aG5hbWU6IChvcHRzLmhhc2gpID8gaGFzaE1hdGNoKGxvYy5oYXNoKSA6IGxvYy5ocmVmIH1cbiAgY29uc3QgcmVkdWNlcnMgPSB7XG4gICAgc2V0TG9jYXRpb246IGZ1bmN0aW9uIHNldExvY2F0aW9uIChkYXRhLCBzdGF0ZSkge1xuICAgICAgcmV0dXJuIHsgcGF0aG5hbWU6IGRhdGEubG9jYXRpb24ucmVwbGFjZSgvIy4qLywgJycpIH1cbiAgICB9XG4gIH1cbiAgLy8gaWYgaGFzaCByb3V0aW5nIGV4cGxpY2l0bHkgZW5hYmxlZCwgc3Vic2NyaWJlIHRvIGl0XG4gIGNvbnN0IHN1YnMgPSB7fVxuICBpZiAob3B0cy5oYXNoID09PSB0cnVlKSB7XG4gICAgcHVzaExvY2F0aW9uU3ViKGZ1bmN0aW9uIChuYXZpZ2F0ZSkge1xuICAgICAgaGFzaChmdW5jdGlvbiAoZnJhZ21lbnQpIHtcbiAgICAgICAgbmF2aWdhdGUoaGFzaE1hdGNoKGZyYWdtZW50KSlcbiAgICAgIH0pXG4gICAgfSwgJ2hhbmRsZUhhc2gnLCBzdWJzKVxuICB9IGVsc2Uge1xuICAgIGlmIChvcHRzLmhpc3RvcnkgIT09IGZhbHNlKSBwdXNoTG9jYXRpb25TdWIoaGlzdG9yeSwgJ2hhbmRsZUhpc3RvcnknLCBzdWJzKVxuICAgIGlmIChvcHRzLmhyZWYgIT09IGZhbHNlKSBwdXNoTG9jYXRpb25TdWIoaHJlZiwgJ2hhbmRsZUhyZWYnLCBzdWJzKVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lc3BhY2U6ICdsb2NhdGlvbicsXG4gICAgc3Vic2NyaXB0aW9uczogc3VicyxcbiAgICByZWR1Y2VyczogcmVkdWNlcnMsXG4gICAgc3RhdGU6IHN0YXRlXG4gIH1cblxuICAvLyBjcmVhdGUgYSBuZXcgc3Vic2NyaXB0aW9uIHRoYXQgbW9kaWZpZXNcbiAgLy8gJ2FwcDpsb2NhdGlvbicgYW5kIHB1c2ggaXQgdG8gYmUgbG9hZGVkXG4gIC8vIChmbiwgb2JqKSAtPiBudWxsXG4gIGZ1bmN0aW9uIHB1c2hMb2NhdGlvblN1YiAoY2IsIGtleSwgbW9kZWwpIHtcbiAgICBtb2RlbFtrZXldID0gZnVuY3Rpb24gKHNlbmQsIGRvbmUpIHtcbiAgICAgIGNiKGZ1bmN0aW9uIG5hdmlnYXRlIChwYXRobmFtZSkge1xuICAgICAgICBzZW5kKCdsb2NhdGlvbjpzZXRMb2NhdGlvbicsIHsgbG9jYXRpb246IHBhdGhuYW1lIH0sIGRvbmUpXG4gICAgICB9KVxuICAgIH1cbiAgfVxufVxuIiwiLyohXG4gIENvcHlyaWdodCAoYykgMjAxNiBKZWQgV2F0c29uLlxuICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHNlZVxuICBodHRwOi8vamVkd2F0c29uLmdpdGh1Yi5pby9jbGFzc25hbWVzXG4qL1xuLyogZ2xvYmFsIGRlZmluZSAqL1xuXG4oZnVuY3Rpb24gKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIGhhc093biA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5cdGZ1bmN0aW9uIGNsYXNzTmFtZXMgKCkge1xuXHRcdHZhciBjbGFzc2VzID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGFyZyA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdGlmICghYXJnKSBjb250aW51ZTtcblxuXHRcdFx0dmFyIGFyZ1R5cGUgPSB0eXBlb2YgYXJnO1xuXG5cdFx0XHRpZiAoYXJnVHlwZSA9PT0gJ3N0cmluZycgfHwgYXJnVHlwZSA9PT0gJ251bWJlcicpIHtcblx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZyk7XG5cdFx0XHR9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuXHRcdFx0XHRjbGFzc2VzLnB1c2goY2xhc3NOYW1lcy5hcHBseShudWxsLCBhcmcpKTtcblx0XHRcdH0gZWxzZSBpZiAoYXJnVHlwZSA9PT0gJ29iamVjdCcpIHtcblx0XHRcdFx0Zm9yICh2YXIga2V5IGluIGFyZykge1xuXHRcdFx0XHRcdGlmIChoYXNPd24uY2FsbChhcmcsIGtleSkgJiYgYXJnW2tleV0pIHtcblx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChrZXkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjbGFzc2VzLmpvaW4oJyAnKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdG1vZHVsZS5leHBvcnRzID0gY2xhc3NOYW1lcztcblx0fSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUuYW1kID09PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gcmVnaXN0ZXIgYXMgJ2NsYXNzbmFtZXMnLCBjb25zaXN0ZW50IHdpdGggbnBtIHBhY2thZ2UgbmFtZVxuXHRcdGRlZmluZSgnY2xhc3NuYW1lcycsIFtdLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gY2xhc3NOYW1lcztcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHR3aW5kb3cuY2xhc3NOYW1lcyA9IGNsYXNzTmFtZXM7XG5cdH1cbn0oKSk7XG4iLCJ2YXIgbWF0Y2hlcyA9IHJlcXVpcmUoJ21hdGNoZXMtc2VsZWN0b3InKVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZWxlbWVudCwgc2VsZWN0b3IsIGNoZWNrWW9TZWxmKSB7XHJcbiAgdmFyIHBhcmVudCA9IGNoZWNrWW9TZWxmID8gZWxlbWVudCA6IGVsZW1lbnQucGFyZW50Tm9kZVxyXG5cclxuICB3aGlsZSAocGFyZW50ICYmIHBhcmVudCAhPT0gZG9jdW1lbnQpIHtcclxuICAgIGlmIChtYXRjaGVzKHBhcmVudCwgc2VsZWN0b3IpKSByZXR1cm4gcGFyZW50O1xyXG4gICAgcGFyZW50ID0gcGFyZW50LnBhcmVudE5vZGVcclxuICB9XHJcbn1cclxuIiwiLyohXG4gKiBkZWVwLWRpZmYuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKi9cbjsoZnVuY3Rpb24ocm9vdCwgZmFjdG9yeSkge1xuICAndXNlIHN0cmljdCc7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG4gICAgZGVmaW5lKFtdLCBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBmYWN0b3J5KCk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XG4gICAgLy8gTm9kZS4gRG9lcyBub3Qgd29yayB3aXRoIHN0cmljdCBDb21tb25KUywgYnV0XG4gICAgLy8gb25seSBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB0aGF0IHN1cHBvcnQgbW9kdWxlLmV4cG9ydHMsXG4gICAgLy8gbGlrZSBOb2RlLlxuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuICB9IGVsc2Uge1xuICAgIC8vIEJyb3dzZXIgZ2xvYmFscyAocm9vdCBpcyB3aW5kb3cpXG4gICAgcm9vdC5EZWVwRGlmZiA9IGZhY3RvcnkoKTtcbiAgfVxufSh0aGlzLCBmdW5jdGlvbih1bmRlZmluZWQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciAkc2NvcGUsIGNvbmZsaWN0LCBjb25mbGljdFJlc29sdXRpb24gPSBbXTtcbiAgaWYgKHR5cGVvZiBnbG9iYWwgPT09ICdvYmplY3QnICYmIGdsb2JhbCkge1xuICAgICRzY29wZSA9IGdsb2JhbDtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICRzY29wZSA9IHdpbmRvdztcbiAgfSBlbHNlIHtcbiAgICAkc2NvcGUgPSB7fTtcbiAgfVxuICBjb25mbGljdCA9ICRzY29wZS5EZWVwRGlmZjtcbiAgaWYgKGNvbmZsaWN0KSB7XG4gICAgY29uZmxpY3RSZXNvbHV0aW9uLnB1c2goXG4gICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCd1bmRlZmluZWQnICE9PSB0eXBlb2YgY29uZmxpY3QgJiYgJHNjb3BlLkRlZXBEaWZmID09PSBhY2N1bXVsYXRlRGlmZikge1xuICAgICAgICAgICRzY29wZS5EZWVwRGlmZiA9IGNvbmZsaWN0O1xuICAgICAgICAgIGNvbmZsaWN0ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgfVxuXG4gIC8vIG5vZGVqcyBjb21wYXRpYmxlIG9uIHNlcnZlciBzaWRlIGFuZCBpbiB0aGUgYnJvd3Nlci5cbiAgZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3I7XG4gICAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ3Rvci5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gRGlmZihraW5kLCBwYXRoKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdraW5kJywge1xuICAgICAgdmFsdWU6IGtpbmQsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgaWYgKHBhdGggJiYgcGF0aC5sZW5ndGgpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAncGF0aCcsIHtcbiAgICAgICAgdmFsdWU6IHBhdGgsXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIERpZmZFZGl0KHBhdGgsIG9yaWdpbiwgdmFsdWUpIHtcbiAgICBEaWZmRWRpdC5zdXBlcl8uY2FsbCh0aGlzLCAnRScsIHBhdGgpO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnbGhzJywge1xuICAgICAgdmFsdWU6IG9yaWdpbixcbiAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3JocycsIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICB9KTtcbiAgfVxuICBpbmhlcml0cyhEaWZmRWRpdCwgRGlmZik7XG5cbiAgZnVuY3Rpb24gRGlmZk5ldyhwYXRoLCB2YWx1ZSkge1xuICAgIERpZmZOZXcuc3VwZXJfLmNhbGwodGhpcywgJ04nLCBwYXRoKTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3JocycsIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICB9KTtcbiAgfVxuICBpbmhlcml0cyhEaWZmTmV3LCBEaWZmKTtcblxuICBmdW5jdGlvbiBEaWZmRGVsZXRlZChwYXRoLCB2YWx1ZSkge1xuICAgIERpZmZEZWxldGVkLnN1cGVyXy5jYWxsKHRoaXMsICdEJywgcGF0aCk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdsaHMnLCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH1cbiAgaW5oZXJpdHMoRGlmZkRlbGV0ZWQsIERpZmYpO1xuXG4gIGZ1bmN0aW9uIERpZmZBcnJheShwYXRoLCBpbmRleCwgaXRlbSkge1xuICAgIERpZmZBcnJheS5zdXBlcl8uY2FsbCh0aGlzLCAnQScsIHBhdGgpO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnaW5kZXgnLCB7XG4gICAgICB2YWx1ZTogaW5kZXgsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdpdGVtJywge1xuICAgICAgdmFsdWU6IGl0ZW0sXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH1cbiAgaW5oZXJpdHMoRGlmZkFycmF5LCBEaWZmKTtcblxuICBmdW5jdGlvbiBhcnJheVJlbW92ZShhcnIsIGZyb20sIHRvKSB7XG4gICAgdmFyIHJlc3QgPSBhcnIuc2xpY2UoKHRvIHx8IGZyb20pICsgMSB8fCBhcnIubGVuZ3RoKTtcbiAgICBhcnIubGVuZ3RoID0gZnJvbSA8IDAgPyBhcnIubGVuZ3RoICsgZnJvbSA6IGZyb207XG4gICAgYXJyLnB1c2guYXBwbHkoYXJyLCByZXN0KTtcbiAgICByZXR1cm4gYXJyO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVhbFR5cGVPZihzdWJqZWN0KSB7XG4gICAgdmFyIHR5cGUgPSB0eXBlb2Ygc3ViamVjdDtcbiAgICBpZiAodHlwZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiB0eXBlO1xuICAgIH1cblxuICAgIGlmIChzdWJqZWN0ID09PSBNYXRoKSB7XG4gICAgICByZXR1cm4gJ21hdGgnO1xuICAgIH0gZWxzZSBpZiAoc3ViamVjdCA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuICdudWxsJztcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoc3ViamVjdCkpIHtcbiAgICAgIHJldHVybiAnYXJyYXknO1xuICAgIH0gZWxzZSBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHN1YmplY3QpID09PSAnW29iamVjdCBEYXRlXScpIHtcbiAgICAgIHJldHVybiAnZGF0ZSc7XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygc3ViamVjdC50b1N0cmluZyAhPT0gJ3VuZGVmaW5lZCcgJiYgL15cXC8uKlxcLy8udGVzdChzdWJqZWN0LnRvU3RyaW5nKCkpKSB7XG4gICAgICByZXR1cm4gJ3JlZ2V4cCc7XG4gICAgfVxuICAgIHJldHVybiAnb2JqZWN0JztcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlZXBEaWZmKGxocywgcmhzLCBjaGFuZ2VzLCBwcmVmaWx0ZXIsIHBhdGgsIGtleSwgc3RhY2spIHtcbiAgICBwYXRoID0gcGF0aCB8fCBbXTtcbiAgICB2YXIgY3VycmVudFBhdGggPSBwYXRoLnNsaWNlKDApO1xuICAgIGlmICh0eXBlb2Yga2V5ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKHByZWZpbHRlcikge1xuICAgICAgICBpZiAodHlwZW9mKHByZWZpbHRlcikgPT09ICdmdW5jdGlvbicgJiYgcHJlZmlsdGVyKGN1cnJlbnRQYXRoLCBrZXkpKSB7IHJldHVybjsgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YocHJlZmlsdGVyKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBpZiAocHJlZmlsdGVyLnByZWZpbHRlciAmJiBwcmVmaWx0ZXIucHJlZmlsdGVyKGN1cnJlbnRQYXRoLCBrZXkpKSB7IHJldHVybjsgfVxuICAgICAgICAgIGlmIChwcmVmaWx0ZXIubm9ybWFsaXplKSB7XG4gICAgICAgICAgICB2YXIgYWx0ID0gcHJlZmlsdGVyLm5vcm1hbGl6ZShjdXJyZW50UGF0aCwga2V5LCBsaHMsIHJocyk7XG4gICAgICAgICAgICBpZiAoYWx0KSB7XG4gICAgICAgICAgICAgIGxocyA9IGFsdFswXTtcbiAgICAgICAgICAgICAgcmhzID0gYWx0WzFdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY3VycmVudFBhdGgucHVzaChrZXkpO1xuICAgIH1cblxuICAgIC8vIFVzZSBzdHJpbmcgY29tcGFyaXNvbiBmb3IgcmVnZXhlc1xuICAgIGlmIChyZWFsVHlwZU9mKGxocykgPT09ICdyZWdleHAnICYmIHJlYWxUeXBlT2YocmhzKSA9PT0gJ3JlZ2V4cCcpIHtcbiAgICAgIGxocyA9IGxocy50b1N0cmluZygpO1xuICAgICAgcmhzID0gcmhzLnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgdmFyIGx0eXBlID0gdHlwZW9mIGxocztcbiAgICB2YXIgcnR5cGUgPSB0eXBlb2YgcmhzO1xuICAgIGlmIChsdHlwZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmIChydHlwZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY2hhbmdlcyhuZXcgRGlmZk5ldyhjdXJyZW50UGF0aCwgcmhzKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChydHlwZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNoYW5nZXMobmV3IERpZmZEZWxldGVkKGN1cnJlbnRQYXRoLCBsaHMpKTtcbiAgICB9IGVsc2UgaWYgKHJlYWxUeXBlT2YobGhzKSAhPT0gcmVhbFR5cGVPZihyaHMpKSB7XG4gICAgICBjaGFuZ2VzKG5ldyBEaWZmRWRpdChjdXJyZW50UGF0aCwgbGhzLCByaHMpKTtcbiAgICB9IGVsc2UgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChsaHMpID09PSAnW29iamVjdCBEYXRlXScgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHJocykgPT09ICdbb2JqZWN0IERhdGVdJyAmJiAoKGxocyAtIHJocykgIT09IDApKSB7XG4gICAgICBjaGFuZ2VzKG5ldyBEaWZmRWRpdChjdXJyZW50UGF0aCwgbGhzLCByaHMpKTtcbiAgICB9IGVsc2UgaWYgKGx0eXBlID09PSAnb2JqZWN0JyAmJiBsaHMgIT09IG51bGwgJiYgcmhzICE9PSBudWxsKSB7XG4gICAgICBzdGFjayA9IHN0YWNrIHx8IFtdO1xuICAgICAgaWYgKHN0YWNrLmluZGV4T2YobGhzKSA8IDApIHtcbiAgICAgICAgc3RhY2sucHVzaChsaHMpO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShsaHMpKSB7XG4gICAgICAgICAgdmFyIGksIGxlbiA9IGxocy5sZW5ndGg7XG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxocy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGkgPj0gcmhzLmxlbmd0aCkge1xuICAgICAgICAgICAgICBjaGFuZ2VzKG5ldyBEaWZmQXJyYXkoY3VycmVudFBhdGgsIGksIG5ldyBEaWZmRGVsZXRlZCh1bmRlZmluZWQsIGxoc1tpXSkpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGRlZXBEaWZmKGxoc1tpXSwgcmhzW2ldLCBjaGFuZ2VzLCBwcmVmaWx0ZXIsIGN1cnJlbnRQYXRoLCBpLCBzdGFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHdoaWxlIChpIDwgcmhzLmxlbmd0aCkge1xuICAgICAgICAgICAgY2hhbmdlcyhuZXcgRGlmZkFycmF5KGN1cnJlbnRQYXRoLCBpLCBuZXcgRGlmZk5ldyh1bmRlZmluZWQsIHJoc1tpKytdKSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgYWtleXMgPSBPYmplY3Qua2V5cyhsaHMpO1xuICAgICAgICAgIHZhciBwa2V5cyA9IE9iamVjdC5rZXlzKHJocyk7XG4gICAgICAgICAgYWtleXMuZm9yRWFjaChmdW5jdGlvbihrLCBpKSB7XG4gICAgICAgICAgICB2YXIgb3RoZXIgPSBwa2V5cy5pbmRleE9mKGspO1xuICAgICAgICAgICAgaWYgKG90aGVyID49IDApIHtcbiAgICAgICAgICAgICAgZGVlcERpZmYobGhzW2tdLCByaHNba10sIGNoYW5nZXMsIHByZWZpbHRlciwgY3VycmVudFBhdGgsIGssIHN0YWNrKTtcbiAgICAgICAgICAgICAgcGtleXMgPSBhcnJheVJlbW92ZShwa2V5cywgb3RoZXIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZGVlcERpZmYobGhzW2tdLCB1bmRlZmluZWQsIGNoYW5nZXMsIHByZWZpbHRlciwgY3VycmVudFBhdGgsIGssIHN0YWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBwa2V5cy5mb3JFYWNoKGZ1bmN0aW9uKGspIHtcbiAgICAgICAgICAgIGRlZXBEaWZmKHVuZGVmaW5lZCwgcmhzW2tdLCBjaGFuZ2VzLCBwcmVmaWx0ZXIsIGN1cnJlbnRQYXRoLCBrLCBzdGFjayk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgc3RhY2subGVuZ3RoID0gc3RhY2subGVuZ3RoIC0gMTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGxocyAhPT0gcmhzKSB7XG4gICAgICBpZiAoIShsdHlwZSA9PT0gJ251bWJlcicgJiYgaXNOYU4obGhzKSAmJiBpc05hTihyaHMpKSkge1xuICAgICAgICBjaGFuZ2VzKG5ldyBEaWZmRWRpdChjdXJyZW50UGF0aCwgbGhzLCByaHMpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhY2N1bXVsYXRlRGlmZihsaHMsIHJocywgcHJlZmlsdGVyLCBhY2N1bSkge1xuICAgIGFjY3VtID0gYWNjdW0gfHwgW107XG4gICAgZGVlcERpZmYobGhzLCByaHMsXG4gICAgICBmdW5jdGlvbihkaWZmKSB7XG4gICAgICAgIGlmIChkaWZmKSB7XG4gICAgICAgICAgYWNjdW0ucHVzaChkaWZmKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHByZWZpbHRlcik7XG4gICAgcmV0dXJuIChhY2N1bS5sZW5ndGgpID8gYWNjdW0gOiB1bmRlZmluZWQ7XG4gIH1cblxuICBmdW5jdGlvbiBhcHBseUFycmF5Q2hhbmdlKGFyciwgaW5kZXgsIGNoYW5nZSkge1xuICAgIGlmIChjaGFuZ2UucGF0aCAmJiBjaGFuZ2UucGF0aC5sZW5ndGgpIHtcbiAgICAgIHZhciBpdCA9IGFycltpbmRleF0sXG4gICAgICAgICAgaSwgdSA9IGNoYW5nZS5wYXRoLmxlbmd0aCAtIDE7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdTsgaSsrKSB7XG4gICAgICAgIGl0ID0gaXRbY2hhbmdlLnBhdGhbaV1dO1xuICAgICAgfVxuICAgICAgc3dpdGNoIChjaGFuZ2Uua2luZCkge1xuICAgICAgICBjYXNlICdBJzpcbiAgICAgICAgICBhcHBseUFycmF5Q2hhbmdlKGl0W2NoYW5nZS5wYXRoW2ldXSwgY2hhbmdlLmluZGV4LCBjaGFuZ2UuaXRlbSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgIGRlbGV0ZSBpdFtjaGFuZ2UucGF0aFtpXV07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0UnOlxuICAgICAgICBjYXNlICdOJzpcbiAgICAgICAgICBpdFtjaGFuZ2UucGF0aFtpXV0gPSBjaGFuZ2UucmhzO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzd2l0Y2ggKGNoYW5nZS5raW5kKSB7XG4gICAgICAgIGNhc2UgJ0EnOlxuICAgICAgICAgIGFwcGx5QXJyYXlDaGFuZ2UoYXJyW2luZGV4XSwgY2hhbmdlLmluZGV4LCBjaGFuZ2UuaXRlbSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgIGFyciA9IGFycmF5UmVtb3ZlKGFyciwgaW5kZXgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdFJzpcbiAgICAgICAgY2FzZSAnTic6XG4gICAgICAgICAgYXJyW2luZGV4XSA9IGNoYW5nZS5yaHM7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnI7XG4gIH1cblxuICBmdW5jdGlvbiBhcHBseUNoYW5nZSh0YXJnZXQsIHNvdXJjZSwgY2hhbmdlKSB7XG4gICAgaWYgKHRhcmdldCAmJiBzb3VyY2UgJiYgY2hhbmdlICYmIGNoYW5nZS5raW5kKSB7XG4gICAgICB2YXIgaXQgPSB0YXJnZXQsXG4gICAgICAgICAgaSA9IC0xLFxuICAgICAgICAgIGxhc3QgPSBjaGFuZ2UucGF0aCA/IGNoYW5nZS5wYXRoLmxlbmd0aCAtIDEgOiAwO1xuICAgICAgd2hpbGUgKCsraSA8IGxhc3QpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdFtjaGFuZ2UucGF0aFtpXV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgaXRbY2hhbmdlLnBhdGhbaV1dID0gKHR5cGVvZiBjaGFuZ2UucGF0aFtpXSA9PT0gJ251bWJlcicpID8gW10gOiB7fTtcbiAgICAgICAgfVxuICAgICAgICBpdCA9IGl0W2NoYW5nZS5wYXRoW2ldXTtcbiAgICAgIH1cbiAgICAgIHN3aXRjaCAoY2hhbmdlLmtpbmQpIHtcbiAgICAgICAgY2FzZSAnQSc6XG4gICAgICAgICAgYXBwbHlBcnJheUNoYW5nZShjaGFuZ2UucGF0aCA/IGl0W2NoYW5nZS5wYXRoW2ldXSA6IGl0LCBjaGFuZ2UuaW5kZXgsIGNoYW5nZS5pdGVtKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgZGVsZXRlIGl0W2NoYW5nZS5wYXRoW2ldXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnRSc6XG4gICAgICAgIGNhc2UgJ04nOlxuICAgICAgICAgIGl0W2NoYW5nZS5wYXRoW2ldXSA9IGNoYW5nZS5yaHM7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmV2ZXJ0QXJyYXlDaGFuZ2UoYXJyLCBpbmRleCwgY2hhbmdlKSB7XG4gICAgaWYgKGNoYW5nZS5wYXRoICYmIGNoYW5nZS5wYXRoLmxlbmd0aCkge1xuICAgICAgLy8gdGhlIHN0cnVjdHVyZSBvZiB0aGUgb2JqZWN0IGF0IHRoZSBpbmRleCBoYXMgY2hhbmdlZC4uLlxuICAgICAgdmFyIGl0ID0gYXJyW2luZGV4XSxcbiAgICAgICAgICBpLCB1ID0gY2hhbmdlLnBhdGgubGVuZ3RoIC0gMTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCB1OyBpKyspIHtcbiAgICAgICAgaXQgPSBpdFtjaGFuZ2UucGF0aFtpXV07XG4gICAgICB9XG4gICAgICBzd2l0Y2ggKGNoYW5nZS5raW5kKSB7XG4gICAgICAgIGNhc2UgJ0EnOlxuICAgICAgICAgIHJldmVydEFycmF5Q2hhbmdlKGl0W2NoYW5nZS5wYXRoW2ldXSwgY2hhbmdlLmluZGV4LCBjaGFuZ2UuaXRlbSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgIGl0W2NoYW5nZS5wYXRoW2ldXSA9IGNoYW5nZS5saHM7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0UnOlxuICAgICAgICAgIGl0W2NoYW5nZS5wYXRoW2ldXSA9IGNoYW5nZS5saHM7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ04nOlxuICAgICAgICAgIGRlbGV0ZSBpdFtjaGFuZ2UucGF0aFtpXV07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHRoZSBhcnJheSBpdGVtIGlzIGRpZmZlcmVudC4uLlxuICAgICAgc3dpdGNoIChjaGFuZ2Uua2luZCkge1xuICAgICAgICBjYXNlICdBJzpcbiAgICAgICAgICByZXZlcnRBcnJheUNoYW5nZShhcnJbaW5kZXhdLCBjaGFuZ2UuaW5kZXgsIGNoYW5nZS5pdGVtKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgYXJyW2luZGV4XSA9IGNoYW5nZS5saHM7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0UnOlxuICAgICAgICAgIGFycltpbmRleF0gPSBjaGFuZ2UubGhzO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdOJzpcbiAgICAgICAgICBhcnIgPSBhcnJheVJlbW92ZShhcnIsIGluZGV4KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJldmVydENoYW5nZSh0YXJnZXQsIHNvdXJjZSwgY2hhbmdlKSB7XG4gICAgaWYgKHRhcmdldCAmJiBzb3VyY2UgJiYgY2hhbmdlICYmIGNoYW5nZS5raW5kKSB7XG4gICAgICB2YXIgaXQgPSB0YXJnZXQsXG4gICAgICAgICAgaSwgdTtcbiAgICAgIHUgPSBjaGFuZ2UucGF0aC5sZW5ndGggLSAxO1xuICAgICAgZm9yIChpID0gMDsgaSA8IHU7IGkrKykge1xuICAgICAgICBpZiAodHlwZW9mIGl0W2NoYW5nZS5wYXRoW2ldXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBpdFtjaGFuZ2UucGF0aFtpXV0gPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBpdCA9IGl0W2NoYW5nZS5wYXRoW2ldXTtcbiAgICAgIH1cbiAgICAgIHN3aXRjaCAoY2hhbmdlLmtpbmQpIHtcbiAgICAgICAgY2FzZSAnQSc6XG4gICAgICAgICAgLy8gQXJyYXkgd2FzIG1vZGlmaWVkLi4uXG4gICAgICAgICAgLy8gaXQgd2lsbCBiZSBhbiBhcnJheS4uLlxuICAgICAgICAgIHJldmVydEFycmF5Q2hhbmdlKGl0W2NoYW5nZS5wYXRoW2ldXSwgY2hhbmdlLmluZGV4LCBjaGFuZ2UuaXRlbSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgIC8vIEl0ZW0gd2FzIGRlbGV0ZWQuLi5cbiAgICAgICAgICBpdFtjaGFuZ2UucGF0aFtpXV0gPSBjaGFuZ2UubGhzO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdFJzpcbiAgICAgICAgICAvLyBJdGVtIHdhcyBlZGl0ZWQuLi5cbiAgICAgICAgICBpdFtjaGFuZ2UucGF0aFtpXV0gPSBjaGFuZ2UubGhzO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdOJzpcbiAgICAgICAgICAvLyBJdGVtIGlzIG5ldy4uLlxuICAgICAgICAgIGRlbGV0ZSBpdFtjaGFuZ2UucGF0aFtpXV07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYXBwbHlEaWZmKHRhcmdldCwgc291cmNlLCBmaWx0ZXIpIHtcbiAgICBpZiAodGFyZ2V0ICYmIHNvdXJjZSkge1xuICAgICAgdmFyIG9uQ2hhbmdlID0gZnVuY3Rpb24oY2hhbmdlKSB7XG4gICAgICAgIGlmICghZmlsdGVyIHx8IGZpbHRlcih0YXJnZXQsIHNvdXJjZSwgY2hhbmdlKSkge1xuICAgICAgICAgIGFwcGx5Q2hhbmdlKHRhcmdldCwgc291cmNlLCBjaGFuZ2UpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgZGVlcERpZmYodGFyZ2V0LCBzb3VyY2UsIG9uQ2hhbmdlKTtcbiAgICB9XG4gIH1cblxuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhhY2N1bXVsYXRlRGlmZiwge1xuXG4gICAgZGlmZjoge1xuICAgICAgdmFsdWU6IGFjY3VtdWxhdGVEaWZmLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgIH0sXG4gICAgb2JzZXJ2YWJsZURpZmY6IHtcbiAgICAgIHZhbHVlOiBkZWVwRGlmZixcbiAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICB9LFxuICAgIGFwcGx5RGlmZjoge1xuICAgICAgdmFsdWU6IGFwcGx5RGlmZixcbiAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICB9LFxuICAgIGFwcGx5Q2hhbmdlOiB7XG4gICAgICB2YWx1ZTogYXBwbHlDaGFuZ2UsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgfSxcbiAgICByZXZlcnRDaGFuZ2U6IHtcbiAgICAgIHZhbHVlOiByZXZlcnRDaGFuZ2UsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgfSxcbiAgICBpc0NvbmZsaWN0OiB7XG4gICAgICB2YWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAndW5kZWZpbmVkJyAhPT0gdHlwZW9mIGNvbmZsaWN0O1xuICAgICAgfSxcbiAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICB9LFxuICAgIG5vQ29uZmxpY3Q6IHtcbiAgICAgIHZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKGNvbmZsaWN0UmVzb2x1dGlvbikge1xuICAgICAgICAgIGNvbmZsaWN0UmVzb2x1dGlvbi5mb3JFYWNoKGZ1bmN0aW9uKGl0KSB7XG4gICAgICAgICAgICBpdCgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGNvbmZsaWN0UmVzb2x1dGlvbiA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjY3VtdWxhdGVEaWZmO1xuICAgICAgfSxcbiAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBhY2N1bXVsYXRlRGlmZjtcbn0pKTtcbiIsInZhciBkZXRlY3RCcm93c2VyID0gcmVxdWlyZSgnLi9saWIvZGV0ZWN0QnJvd3NlcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRldGVjdEJyb3dzZXIobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRldGVjdEJyb3dzZXIodXNlckFnZW50U3RyaW5nKSB7XG4gIHZhciBicm93c2VycyA9IFtcbiAgICBbICdlZGdlJywgL0VkZ2VcXC8oWzAtOVxcLl9dKykvIF0sXG4gICAgWyAnY2hyb21lJywgLyg/IUNocm9tLipPUFIpQ2hyb20oPzplfGl1bSlcXC8oWzAtOVxcLl0rKSg6P1xcc3wkKS8gXSxcbiAgICBbICdjcmlvcycsIC9DcmlPU1xcLyhbMC05XFwuXSspKDo/XFxzfCQpLyBdLFxuICAgIFsgJ2ZpcmVmb3gnLCAvRmlyZWZveFxcLyhbMC05XFwuXSspKD86XFxzfCQpLyBdLFxuICAgIFsgJ29wZXJhJywgL09wZXJhXFwvKFswLTlcXC5dKykoPzpcXHN8JCkvIF0sXG4gICAgWyAnb3BlcmEnLCAvT1BSXFwvKFswLTlcXC5dKykoOj9cXHN8JCkkLyBdLFxuICAgIFsgJ2llJywgL1RyaWRlbnRcXC83XFwuMC4qcnZcXDooWzAtOVxcLl0rKVxcKS4qR2Vja28kLyBdLFxuICAgIFsgJ2llJywgL01TSUVcXHMoWzAtOVxcLl0rKTsuKlRyaWRlbnRcXC9bNC03XS4wLyBdLFxuICAgIFsgJ2llJywgL01TSUVcXHMoN1xcLjApLyBdLFxuICAgIFsgJ2JiMTAnLCAvQkIxMDtcXHNUb3VjaC4qVmVyc2lvblxcLyhbMC05XFwuXSspLyBdLFxuICAgIFsgJ2FuZHJvaWQnLCAvQW5kcm9pZFxccyhbMC05XFwuXSspLyBdLFxuICAgIFsgJ2lvcycsIC9pUGFkLipWZXJzaW9uXFwvKFswLTlcXC5fXSspLyBdLFxuICAgIFsgJ2lvcycsICAvaVBob25lLipWZXJzaW9uXFwvKFswLTlcXC5fXSspLyBdLFxuICAgIFsgJ3NhZmFyaScsIC9WZXJzaW9uXFwvKFswLTlcXC5fXSspLipTYWZhcmkvIF1cbiAgXTtcblxuICB2YXIgaSA9IDAsIG1hcHBlZCA9W107XG4gIGZvciAoaSA9IDA7IGkgPCBicm93c2Vycy5sZW5ndGg7IGkrKykge1xuICAgIGJyb3dzZXJzW2ldID0gY3JlYXRlTWF0Y2goYnJvd3NlcnNbaV0pO1xuICAgIGlmIChpc01hdGNoKGJyb3dzZXJzW2ldKSkge1xuICAgICAgbWFwcGVkLnB1c2goYnJvd3NlcnNbaV0pO1xuICAgIH1cbiAgfVxuXG4gIHZhciBtYXRjaCA9IG1hcHBlZFswXTtcbiAgdmFyIHBhcnRzID0gbWF0Y2ggJiYgbWF0Y2hbM10uc3BsaXQoL1suX10vKS5zbGljZSgwLDMpO1xuXG4gIHdoaWxlIChwYXJ0cyAmJiBwYXJ0cy5sZW5ndGggPCAzKSB7XG4gICAgcGFydHMucHVzaCgnMCcpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlTWF0Y2gocGFpcikge1xuICAgIHJldHVybiBwYWlyLmNvbmNhdChwYWlyWzFdLmV4ZWModXNlckFnZW50U3RyaW5nKSk7XG4gIH1cblxuICBmdW5jdGlvbiBpc01hdGNoKHBhaXIpIHtcbiAgICByZXR1cm4gISFwYWlyWzJdO1xuICB9XG5cbiAgLy8gcmV0dXJuIHRoZSBuYW1lIGFuZCB2ZXJzaW9uXG4gIHJldHVybiB7XG4gICAgbmFtZTogbWF0Y2ggJiYgbWF0Y2hbMF0sXG4gICAgdmVyc2lvbjogcGFydHMgJiYgcGFydHMuam9pbignLicpLFxuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0J1xuXG52YXIgZG9jdW1lbnQgPSByZXF1aXJlKCdnbG9iYWwvZG9jdW1lbnQnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIgPyByZWFkeSA6IG5vb3BcblxuZnVuY3Rpb24gcmVhZHkgKGNhbGxiYWNrKSB7XG4gIHZhciBzdGF0ZSA9IGRvY3VtZW50LnJlYWR5U3RhdGVcbiAgaWYgKHN0YXRlID09PSAnY29tcGxldGUnIHx8IHN0YXRlID09PSAnaW50ZXJhY3RpdmUnKSB7XG4gICAgcmV0dXJuIHNldFRpbWVvdXQoY2FsbGJhY2ssIDApXG4gIH1cblxuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24gb25Mb2FkICgpIHtcbiAgICBjYWxsYmFjaygpXG4gIH0pXG59XG5cbmZ1bmN0aW9uIG5vb3AgKCkge31cbiIsIjsoZnVuY3Rpb24gKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0LyoqXG5cdCAqIEBwcmVzZXJ2ZSBGYXN0Q2xpY2s6IHBvbHlmaWxsIHRvIHJlbW92ZSBjbGljayBkZWxheXMgb24gYnJvd3NlcnMgd2l0aCB0b3VjaCBVSXMuXG5cdCAqXG5cdCAqIEBjb2RpbmdzdGFuZGFyZCBmdGxhYnMtanN2MlxuXHQgKiBAY29weXJpZ2h0IFRoZSBGaW5hbmNpYWwgVGltZXMgTGltaXRlZCBbQWxsIFJpZ2h0cyBSZXNlcnZlZF1cblx0ICogQGxpY2Vuc2UgTUlUIExpY2Vuc2UgKHNlZSBMSUNFTlNFLnR4dClcblx0ICovXG5cblx0Lypqc2xpbnQgYnJvd3Nlcjp0cnVlLCBub2RlOnRydWUqL1xuXHQvKmdsb2JhbCBkZWZpbmUsIEV2ZW50LCBOb2RlKi9cblxuXG5cdC8qKlxuXHQgKiBJbnN0YW50aWF0ZSBmYXN0LWNsaWNraW5nIGxpc3RlbmVycyBvbiB0aGUgc3BlY2lmaWVkIGxheWVyLlxuXHQgKlxuXHQgKiBAY29uc3RydWN0b3Jcblx0ICogQHBhcmFtIHtFbGVtZW50fSBsYXllciBUaGUgbGF5ZXIgdG8gbGlzdGVuIG9uXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgdG8gb3ZlcnJpZGUgdGhlIGRlZmF1bHRzXG5cdCAqL1xuXHRmdW5jdGlvbiBGYXN0Q2xpY2sobGF5ZXIsIG9wdGlvbnMpIHtcblx0XHR2YXIgb2xkT25DbGljaztcblxuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciBhIGNsaWNrIGlzIGN1cnJlbnRseSBiZWluZyB0cmFja2VkLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgYm9vbGVhblxuXHRcdCAqL1xuXHRcdHRoaXMudHJhY2tpbmdDbGljayA9IGZhbHNlO1xuXG5cblx0XHQvKipcblx0XHQgKiBUaW1lc3RhbXAgZm9yIHdoZW4gY2xpY2sgdHJhY2tpbmcgc3RhcnRlZC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIG51bWJlclxuXHRcdCAqL1xuXHRcdHRoaXMudHJhY2tpbmdDbGlja1N0YXJ0ID0gMDtcblxuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGVsZW1lbnQgYmVpbmcgdHJhY2tlZCBmb3IgYSBjbGljay5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIEV2ZW50VGFyZ2V0XG5cdFx0ICovXG5cdFx0dGhpcy50YXJnZXRFbGVtZW50ID0gbnVsbDtcblxuXG5cdFx0LyoqXG5cdFx0ICogWC1jb29yZGluYXRlIG9mIHRvdWNoIHN0YXJ0IGV2ZW50LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUgbnVtYmVyXG5cdFx0ICovXG5cdFx0dGhpcy50b3VjaFN0YXJ0WCA9IDA7XG5cblxuXHRcdC8qKlxuXHRcdCAqIFktY29vcmRpbmF0ZSBvZiB0b3VjaCBzdGFydCBldmVudC5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIG51bWJlclxuXHRcdCAqL1xuXHRcdHRoaXMudG91Y2hTdGFydFkgPSAwO1xuXG5cblx0XHQvKipcblx0XHQgKiBJRCBvZiB0aGUgbGFzdCB0b3VjaCwgcmV0cmlldmVkIGZyb20gVG91Y2guaWRlbnRpZmllci5cblx0XHQgKlxuXHRcdCAqIEB0eXBlIG51bWJlclxuXHRcdCAqL1xuXHRcdHRoaXMubGFzdFRvdWNoSWRlbnRpZmllciA9IDA7XG5cblxuXHRcdC8qKlxuXHRcdCAqIFRvdWNobW92ZSBib3VuZGFyeSwgYmV5b25kIHdoaWNoIGEgY2xpY2sgd2lsbCBiZSBjYW5jZWxsZWQuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSBudW1iZXJcblx0XHQgKi9cblx0XHR0aGlzLnRvdWNoQm91bmRhcnkgPSBvcHRpb25zLnRvdWNoQm91bmRhcnkgfHwgMTA7XG5cblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBGYXN0Q2xpY2sgbGF5ZXIuXG5cdFx0ICpcblx0XHQgKiBAdHlwZSBFbGVtZW50XG5cdFx0ICovXG5cdFx0dGhpcy5sYXllciA9IGxheWVyO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG1pbmltdW0gdGltZSBiZXR3ZWVuIHRhcCh0b3VjaHN0YXJ0IGFuZCB0b3VjaGVuZCkgZXZlbnRzXG5cdFx0ICpcblx0XHQgKiBAdHlwZSBudW1iZXJcblx0XHQgKi9cblx0XHR0aGlzLnRhcERlbGF5ID0gb3B0aW9ucy50YXBEZWxheSB8fCAyMDA7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgbWF4aW11bSB0aW1lIGZvciBhIHRhcFxuXHRcdCAqXG5cdFx0ICogQHR5cGUgbnVtYmVyXG5cdFx0ICovXG5cdFx0dGhpcy50YXBUaW1lb3V0ID0gb3B0aW9ucy50YXBUaW1lb3V0IHx8IDcwMDtcblxuXHRcdGlmIChGYXN0Q2xpY2subm90TmVlZGVkKGxheWVyKSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFNvbWUgb2xkIHZlcnNpb25zIG9mIEFuZHJvaWQgZG9uJ3QgaGF2ZSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZFxuXHRcdGZ1bmN0aW9uIGJpbmQobWV0aG9kLCBjb250ZXh0KSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7IHJldHVybiBtZXRob2QuYXBwbHkoY29udGV4dCwgYXJndW1lbnRzKTsgfTtcblx0XHR9XG5cblxuXHRcdHZhciBtZXRob2RzID0gWydvbk1vdXNlJywgJ29uQ2xpY2snLCAnb25Ub3VjaFN0YXJ0JywgJ29uVG91Y2hNb3ZlJywgJ29uVG91Y2hFbmQnLCAnb25Ub3VjaENhbmNlbCddO1xuXHRcdHZhciBjb250ZXh0ID0gdGhpcztcblx0XHRmb3IgKHZhciBpID0gMCwgbCA9IG1ldGhvZHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHRjb250ZXh0W21ldGhvZHNbaV1dID0gYmluZChjb250ZXh0W21ldGhvZHNbaV1dLCBjb250ZXh0KTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdXAgZXZlbnQgaGFuZGxlcnMgYXMgcmVxdWlyZWRcblx0XHRpZiAoZGV2aWNlSXNBbmRyb2lkKSB7XG5cdFx0XHRsYXllci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW92ZXInLCB0aGlzLm9uTW91c2UsIHRydWUpO1xuXHRcdFx0bGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5vbk1vdXNlLCB0cnVlKTtcblx0XHRcdGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLm9uTW91c2UsIHRydWUpO1xuXHRcdH1cblxuXHRcdGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vbkNsaWNrLCB0cnVlKTtcblx0XHRsYXllci5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5vblRvdWNoU3RhcnQsIGZhbHNlKTtcblx0XHRsYXllci5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0aGlzLm9uVG91Y2hNb3ZlLCBmYWxzZSk7XG5cdFx0bGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB0aGlzLm9uVG91Y2hFbmQsIGZhbHNlKTtcblx0XHRsYXllci5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGNhbmNlbCcsIHRoaXMub25Ub3VjaENhbmNlbCwgZmFsc2UpO1xuXG5cdFx0Ly8gSGFjayBpcyByZXF1aXJlZCBmb3IgYnJvd3NlcnMgdGhhdCBkb24ndCBzdXBwb3J0IEV2ZW50I3N0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiAoZS5nLiBBbmRyb2lkIDIpXG5cdFx0Ly8gd2hpY2ggaXMgaG93IEZhc3RDbGljayBub3JtYWxseSBzdG9wcyBjbGljayBldmVudHMgYnViYmxpbmcgdG8gY2FsbGJhY2tzIHJlZ2lzdGVyZWQgb24gdGhlIEZhc3RDbGlja1xuXHRcdC8vIGxheWVyIHdoZW4gdGhleSBhcmUgY2FuY2VsbGVkLlxuXHRcdGlmICghRXZlbnQucHJvdG90eXBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbikge1xuXHRcdFx0bGF5ZXIucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKHR5cGUsIGNhbGxiYWNrLCBjYXB0dXJlKSB7XG5cdFx0XHRcdHZhciBybXYgPSBOb2RlLnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyO1xuXHRcdFx0XHRpZiAodHlwZSA9PT0gJ2NsaWNrJykge1xuXHRcdFx0XHRcdHJtdi5jYWxsKGxheWVyLCB0eXBlLCBjYWxsYmFjay5oaWphY2tlZCB8fCBjYWxsYmFjaywgY2FwdHVyZSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cm12LmNhbGwobGF5ZXIsIHR5cGUsIGNhbGxiYWNrLCBjYXB0dXJlKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdFx0bGF5ZXIuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKHR5cGUsIGNhbGxiYWNrLCBjYXB0dXJlKSB7XG5cdFx0XHRcdHZhciBhZHYgPSBOb2RlLnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyO1xuXHRcdFx0XHRpZiAodHlwZSA9PT0gJ2NsaWNrJykge1xuXHRcdFx0XHRcdGFkdi5jYWxsKGxheWVyLCB0eXBlLCBjYWxsYmFjay5oaWphY2tlZCB8fCAoY2FsbGJhY2suaGlqYWNrZWQgPSBmdW5jdGlvbihldmVudCkge1xuXHRcdFx0XHRcdFx0aWYgKCFldmVudC5wcm9wYWdhdGlvblN0b3BwZWQpIHtcblx0XHRcdFx0XHRcdFx0Y2FsbGJhY2soZXZlbnQpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pLCBjYXB0dXJlKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRhZHYuY2FsbChsYXllciwgdHlwZSwgY2FsbGJhY2ssIGNhcHR1cmUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIElmIGEgaGFuZGxlciBpcyBhbHJlYWR5IGRlY2xhcmVkIGluIHRoZSBlbGVtZW50J3Mgb25jbGljayBhdHRyaWJ1dGUsIGl0IHdpbGwgYmUgZmlyZWQgYmVmb3JlXG5cdFx0Ly8gRmFzdENsaWNrJ3Mgb25DbGljayBoYW5kbGVyLiBGaXggdGhpcyBieSBwdWxsaW5nIG91dCB0aGUgdXNlci1kZWZpbmVkIGhhbmRsZXIgZnVuY3Rpb24gYW5kXG5cdFx0Ly8gYWRkaW5nIGl0IGFzIGxpc3RlbmVyLlxuXHRcdGlmICh0eXBlb2YgbGF5ZXIub25jbGljayA9PT0gJ2Z1bmN0aW9uJykge1xuXG5cdFx0XHQvLyBBbmRyb2lkIGJyb3dzZXIgb24gYXQgbGVhc3QgMy4yIHJlcXVpcmVzIGEgbmV3IHJlZmVyZW5jZSB0byB0aGUgZnVuY3Rpb24gaW4gbGF5ZXIub25jbGlja1xuXHRcdFx0Ly8gLSB0aGUgb2xkIG9uZSB3b24ndCB3b3JrIGlmIHBhc3NlZCB0byBhZGRFdmVudExpc3RlbmVyIGRpcmVjdGx5LlxuXHRcdFx0b2xkT25DbGljayA9IGxheWVyLm9uY2xpY2s7XG5cdFx0XHRsYXllci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGV2ZW50KSB7XG5cdFx0XHRcdG9sZE9uQ2xpY2soZXZlbnQpO1xuXHRcdFx0fSwgZmFsc2UpO1xuXHRcdFx0bGF5ZXIub25jbGljayA9IG51bGw7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCogV2luZG93cyBQaG9uZSA4LjEgZmFrZXMgdXNlciBhZ2VudCBzdHJpbmcgdG8gbG9vayBsaWtlIEFuZHJvaWQgYW5kIGlQaG9uZS5cblx0KlxuXHQqIEB0eXBlIGJvb2xlYW5cblx0Ki9cblx0dmFyIGRldmljZUlzV2luZG93c1Bob25lID0gbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKFwiV2luZG93cyBQaG9uZVwiKSA+PSAwO1xuXG5cdC8qKlxuXHQgKiBBbmRyb2lkIHJlcXVpcmVzIGV4Y2VwdGlvbnMuXG5cdCAqXG5cdCAqIEB0eXBlIGJvb2xlYW5cblx0ICovXG5cdHZhciBkZXZpY2VJc0FuZHJvaWQgPSBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0FuZHJvaWQnKSA+IDAgJiYgIWRldmljZUlzV2luZG93c1Bob25lO1xuXG5cblx0LyoqXG5cdCAqIGlPUyByZXF1aXJlcyBleGNlcHRpb25zLlxuXHQgKlxuXHQgKiBAdHlwZSBib29sZWFuXG5cdCAqL1xuXHR2YXIgZGV2aWNlSXNJT1MgPSAvaVAoYWR8aG9uZXxvZCkvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkgJiYgIWRldmljZUlzV2luZG93c1Bob25lO1xuXG5cblx0LyoqXG5cdCAqIGlPUyA0IHJlcXVpcmVzIGFuIGV4Y2VwdGlvbiBmb3Igc2VsZWN0IGVsZW1lbnRzLlxuXHQgKlxuXHQgKiBAdHlwZSBib29sZWFuXG5cdCAqL1xuXHR2YXIgZGV2aWNlSXNJT1M0ID0gZGV2aWNlSXNJT1MgJiYgKC9PUyA0X1xcZChfXFxkKT8vKS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG5cblx0LyoqXG5cdCAqIGlPUyA2LjAtNy4qIHJlcXVpcmVzIHRoZSB0YXJnZXQgZWxlbWVudCB0byBiZSBtYW51YWxseSBkZXJpdmVkXG5cdCAqXG5cdCAqIEB0eXBlIGJvb2xlYW5cblx0ICovXG5cdHZhciBkZXZpY2VJc0lPU1dpdGhCYWRUYXJnZXQgPSBkZXZpY2VJc0lPUyAmJiAoL09TIFs2LTddX1xcZC8pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cblx0LyoqXG5cdCAqIEJsYWNrQmVycnkgcmVxdWlyZXMgZXhjZXB0aW9ucy5cblx0ICpcblx0ICogQHR5cGUgYm9vbGVhblxuXHQgKi9cblx0dmFyIGRldmljZUlzQmxhY2tCZXJyeTEwID0gbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdCQjEwJykgPiAwO1xuXG5cdC8qKlxuXHQgKiBEZXRlcm1pbmUgd2hldGhlciBhIGdpdmVuIGVsZW1lbnQgcmVxdWlyZXMgYSBuYXRpdmUgY2xpY2suXG5cdCAqXG5cdCAqIEBwYXJhbSB7RXZlbnRUYXJnZXR8RWxlbWVudH0gdGFyZ2V0IFRhcmdldCBET00gZWxlbWVudFxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIHRoZSBlbGVtZW50IG5lZWRzIGEgbmF0aXZlIGNsaWNrXG5cdCAqL1xuXHRGYXN0Q2xpY2sucHJvdG90eXBlLm5lZWRzQ2xpY2sgPSBmdW5jdGlvbih0YXJnZXQpIHtcblx0XHRzd2l0Y2ggKHRhcmdldC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKSB7XG5cblx0XHQvLyBEb24ndCBzZW5kIGEgc3ludGhldGljIGNsaWNrIHRvIGRpc2FibGVkIGlucHV0cyAoaXNzdWUgIzYyKVxuXHRcdGNhc2UgJ2J1dHRvbic6XG5cdFx0Y2FzZSAnc2VsZWN0Jzpcblx0XHRjYXNlICd0ZXh0YXJlYSc6XG5cdFx0XHRpZiAodGFyZ2V0LmRpc2FibGVkKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRicmVhaztcblx0XHRjYXNlICdpbnB1dCc6XG5cblx0XHRcdC8vIEZpbGUgaW5wdXRzIG5lZWQgcmVhbCBjbGlja3Mgb24gaU9TIDYgZHVlIHRvIGEgYnJvd3NlciBidWcgKGlzc3VlICM2OClcblx0XHRcdGlmICgoZGV2aWNlSXNJT1MgJiYgdGFyZ2V0LnR5cGUgPT09ICdmaWxlJykgfHwgdGFyZ2V0LmRpc2FibGVkKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRicmVhaztcblx0XHRjYXNlICdsYWJlbCc6XG5cdFx0Y2FzZSAnaWZyYW1lJzogLy8gaU9TOCBob21lc2NyZWVuIGFwcHMgY2FuIHByZXZlbnQgZXZlbnRzIGJ1YmJsaW5nIGludG8gZnJhbWVzXG5cdFx0Y2FzZSAndmlkZW8nOlxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0cmV0dXJuICgvXFxibmVlZHNjbGlja1xcYi8pLnRlc3QodGFyZ2V0LmNsYXNzTmFtZSk7XG5cdH07XG5cblxuXHQvKipcblx0ICogRGV0ZXJtaW5lIHdoZXRoZXIgYSBnaXZlbiBlbGVtZW50IHJlcXVpcmVzIGEgY2FsbCB0byBmb2N1cyB0byBzaW11bGF0ZSBjbGljayBpbnRvIGVsZW1lbnQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7RXZlbnRUYXJnZXR8RWxlbWVudH0gdGFyZ2V0IFRhcmdldCBET00gZWxlbWVudFxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIHRoZSBlbGVtZW50IHJlcXVpcmVzIGEgY2FsbCB0byBmb2N1cyB0byBzaW11bGF0ZSBuYXRpdmUgY2xpY2suXG5cdCAqL1xuXHRGYXN0Q2xpY2sucHJvdG90eXBlLm5lZWRzRm9jdXMgPSBmdW5jdGlvbih0YXJnZXQpIHtcblx0XHRzd2l0Y2ggKHRhcmdldC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKSB7XG5cdFx0Y2FzZSAndGV4dGFyZWEnOlxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0Y2FzZSAnc2VsZWN0Jzpcblx0XHRcdHJldHVybiAhZGV2aWNlSXNBbmRyb2lkO1xuXHRcdGNhc2UgJ2lucHV0Jzpcblx0XHRcdHN3aXRjaCAodGFyZ2V0LnR5cGUpIHtcblx0XHRcdGNhc2UgJ2J1dHRvbic6XG5cdFx0XHRjYXNlICdjaGVja2JveCc6XG5cdFx0XHRjYXNlICdmaWxlJzpcblx0XHRcdGNhc2UgJ2ltYWdlJzpcblx0XHRcdGNhc2UgJ3JhZGlvJzpcblx0XHRcdGNhc2UgJ3N1Ym1pdCc6XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTm8gcG9pbnQgaW4gYXR0ZW1wdGluZyB0byBmb2N1cyBkaXNhYmxlZCBpbnB1dHNcblx0XHRcdHJldHVybiAhdGFyZ2V0LmRpc2FibGVkICYmICF0YXJnZXQucmVhZE9ubHk7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdHJldHVybiAoL1xcYm5lZWRzZm9jdXNcXGIvKS50ZXN0KHRhcmdldC5jbGFzc05hbWUpO1xuXHRcdH1cblx0fTtcblxuXG5cdC8qKlxuXHQgKiBTZW5kIGEgY2xpY2sgZXZlbnQgdG8gdGhlIHNwZWNpZmllZCBlbGVtZW50LlxuXHQgKlxuXHQgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fEVsZW1lbnR9IHRhcmdldEVsZW1lbnRcblx0ICogQHBhcmFtIHtFdmVudH0gZXZlbnRcblx0ICovXG5cdEZhc3RDbGljay5wcm90b3R5cGUuc2VuZENsaWNrID0gZnVuY3Rpb24odGFyZ2V0RWxlbWVudCwgZXZlbnQpIHtcblx0XHR2YXIgY2xpY2tFdmVudCwgdG91Y2g7XG5cblx0XHQvLyBPbiBzb21lIEFuZHJvaWQgZGV2aWNlcyBhY3RpdmVFbGVtZW50IG5lZWRzIHRvIGJlIGJsdXJyZWQgb3RoZXJ3aXNlIHRoZSBzeW50aGV0aWMgY2xpY2sgd2lsbCBoYXZlIG5vIGVmZmVjdCAoIzI0KVxuXHRcdGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09IHRhcmdldEVsZW1lbnQpIHtcblx0XHRcdGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuYmx1cigpO1xuXHRcdH1cblxuXHRcdHRvdWNoID0gZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF07XG5cblx0XHQvLyBTeW50aGVzaXNlIGEgY2xpY2sgZXZlbnQsIHdpdGggYW4gZXh0cmEgYXR0cmlidXRlIHNvIGl0IGNhbiBiZSB0cmFja2VkXG5cdFx0Y2xpY2tFdmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdNb3VzZUV2ZW50cycpO1xuXHRcdGNsaWNrRXZlbnQuaW5pdE1vdXNlRXZlbnQodGhpcy5kZXRlcm1pbmVFdmVudFR5cGUodGFyZ2V0RWxlbWVudCksIHRydWUsIHRydWUsIHdpbmRvdywgMSwgdG91Y2guc2NyZWVuWCwgdG91Y2guc2NyZWVuWSwgdG91Y2guY2xpZW50WCwgdG91Y2guY2xpZW50WSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDAsIG51bGwpO1xuXHRcdGNsaWNrRXZlbnQuZm9yd2FyZGVkVG91Y2hFdmVudCA9IHRydWU7XG5cdFx0dGFyZ2V0RWxlbWVudC5kaXNwYXRjaEV2ZW50KGNsaWNrRXZlbnQpO1xuXHR9O1xuXG5cdEZhc3RDbGljay5wcm90b3R5cGUuZGV0ZXJtaW5lRXZlbnRUeXBlID0gZnVuY3Rpb24odGFyZ2V0RWxlbWVudCkge1xuXG5cdFx0Ly9Jc3N1ZSAjMTU5OiBBbmRyb2lkIENocm9tZSBTZWxlY3QgQm94IGRvZXMgbm90IG9wZW4gd2l0aCBhIHN5bnRoZXRpYyBjbGljayBldmVudFxuXHRcdGlmIChkZXZpY2VJc0FuZHJvaWQgJiYgdGFyZ2V0RWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdzZWxlY3QnKSB7XG5cdFx0XHRyZXR1cm4gJ21vdXNlZG93bic7XG5cdFx0fVxuXG5cdFx0cmV0dXJuICdjbGljayc7XG5cdH07XG5cblxuXHQvKipcblx0ICogQHBhcmFtIHtFdmVudFRhcmdldHxFbGVtZW50fSB0YXJnZXRFbGVtZW50XG5cdCAqL1xuXHRGYXN0Q2xpY2sucHJvdG90eXBlLmZvY3VzID0gZnVuY3Rpb24odGFyZ2V0RWxlbWVudCkge1xuXHRcdHZhciBsZW5ndGg7XG5cblx0XHQvLyBJc3N1ZSAjMTYwOiBvbiBpT1MgNywgc29tZSBpbnB1dCBlbGVtZW50cyAoZS5nLiBkYXRlIGRhdGV0aW1lIG1vbnRoKSB0aHJvdyBhIHZhZ3VlIFR5cGVFcnJvciBvbiBzZXRTZWxlY3Rpb25SYW5nZS4gVGhlc2UgZWxlbWVudHMgZG9uJ3QgaGF2ZSBhbiBpbnRlZ2VyIHZhbHVlIGZvciB0aGUgc2VsZWN0aW9uU3RhcnQgYW5kIHNlbGVjdGlvbkVuZCBwcm9wZXJ0aWVzLCBidXQgdW5mb3J0dW5hdGVseSB0aGF0IGNhbid0IGJlIHVzZWQgZm9yIGRldGVjdGlvbiBiZWNhdXNlIGFjY2Vzc2luZyB0aGUgcHJvcGVydGllcyBhbHNvIHRocm93cyBhIFR5cGVFcnJvci4gSnVzdCBjaGVjayB0aGUgdHlwZSBpbnN0ZWFkLiBGaWxlZCBhcyBBcHBsZSBidWcgIzE1MTIyNzI0LlxuXHRcdGlmIChkZXZpY2VJc0lPUyAmJiB0YXJnZXRFbGVtZW50LnNldFNlbGVjdGlvblJhbmdlICYmIHRhcmdldEVsZW1lbnQudHlwZS5pbmRleE9mKCdkYXRlJykgIT09IDAgJiYgdGFyZ2V0RWxlbWVudC50eXBlICE9PSAndGltZScgJiYgdGFyZ2V0RWxlbWVudC50eXBlICE9PSAnbW9udGgnKSB7XG5cdFx0XHRsZW5ndGggPSB0YXJnZXRFbGVtZW50LnZhbHVlLmxlbmd0aDtcblx0XHRcdHRhcmdldEVsZW1lbnQuc2V0U2VsZWN0aW9uUmFuZ2UobGVuZ3RoLCBsZW5ndGgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0YXJnZXRFbGVtZW50LmZvY3VzKCk7XG5cdFx0fVxuXHR9O1xuXG5cblx0LyoqXG5cdCAqIENoZWNrIHdoZXRoZXIgdGhlIGdpdmVuIHRhcmdldCBlbGVtZW50IGlzIGEgY2hpbGQgb2YgYSBzY3JvbGxhYmxlIGxheWVyIGFuZCBpZiBzbywgc2V0IGEgZmxhZyBvbiBpdC5cblx0ICpcblx0ICogQHBhcmFtIHtFdmVudFRhcmdldHxFbGVtZW50fSB0YXJnZXRFbGVtZW50XG5cdCAqL1xuXHRGYXN0Q2xpY2sucHJvdG90eXBlLnVwZGF0ZVNjcm9sbFBhcmVudCA9IGZ1bmN0aW9uKHRhcmdldEVsZW1lbnQpIHtcblx0XHR2YXIgc2Nyb2xsUGFyZW50LCBwYXJlbnRFbGVtZW50O1xuXG5cdFx0c2Nyb2xsUGFyZW50ID0gdGFyZ2V0RWxlbWVudC5mYXN0Q2xpY2tTY3JvbGxQYXJlbnQ7XG5cblx0XHQvLyBBdHRlbXB0IHRvIGRpc2NvdmVyIHdoZXRoZXIgdGhlIHRhcmdldCBlbGVtZW50IGlzIGNvbnRhaW5lZCB3aXRoaW4gYSBzY3JvbGxhYmxlIGxheWVyLiBSZS1jaGVjayBpZiB0aGVcblx0XHQvLyB0YXJnZXQgZWxlbWVudCB3YXMgbW92ZWQgdG8gYW5vdGhlciBwYXJlbnQuXG5cdFx0aWYgKCFzY3JvbGxQYXJlbnQgfHwgIXNjcm9sbFBhcmVudC5jb250YWlucyh0YXJnZXRFbGVtZW50KSkge1xuXHRcdFx0cGFyZW50RWxlbWVudCA9IHRhcmdldEVsZW1lbnQ7XG5cdFx0XHRkbyB7XG5cdFx0XHRcdGlmIChwYXJlbnRFbGVtZW50LnNjcm9sbEhlaWdodCA+IHBhcmVudEVsZW1lbnQub2Zmc2V0SGVpZ2h0KSB7XG5cdFx0XHRcdFx0c2Nyb2xsUGFyZW50ID0gcGFyZW50RWxlbWVudDtcblx0XHRcdFx0XHR0YXJnZXRFbGVtZW50LmZhc3RDbGlja1Njcm9sbFBhcmVudCA9IHBhcmVudEVsZW1lbnQ7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRwYXJlbnRFbGVtZW50ID0gcGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50O1xuXHRcdFx0fSB3aGlsZSAocGFyZW50RWxlbWVudCk7XG5cdFx0fVxuXG5cdFx0Ly8gQWx3YXlzIHVwZGF0ZSB0aGUgc2Nyb2xsIHRvcCB0cmFja2VyIGlmIHBvc3NpYmxlLlxuXHRcdGlmIChzY3JvbGxQYXJlbnQpIHtcblx0XHRcdHNjcm9sbFBhcmVudC5mYXN0Q2xpY2tMYXN0U2Nyb2xsVG9wID0gc2Nyb2xsUGFyZW50LnNjcm9sbFRvcDtcblx0XHR9XG5cdH07XG5cblxuXHQvKipcblx0ICogQHBhcmFtIHtFdmVudFRhcmdldH0gdGFyZ2V0RWxlbWVudFxuXHQgKiBAcmV0dXJucyB7RWxlbWVudHxFdmVudFRhcmdldH1cblx0ICovXG5cdEZhc3RDbGljay5wcm90b3R5cGUuZ2V0VGFyZ2V0RWxlbWVudEZyb21FdmVudFRhcmdldCA9IGZ1bmN0aW9uKGV2ZW50VGFyZ2V0KSB7XG5cblx0XHQvLyBPbiBzb21lIG9sZGVyIGJyb3dzZXJzIChub3RhYmx5IFNhZmFyaSBvbiBpT1MgNC4xIC0gc2VlIGlzc3VlICM1NikgdGhlIGV2ZW50IHRhcmdldCBtYXkgYmUgYSB0ZXh0IG5vZGUuXG5cdFx0aWYgKGV2ZW50VGFyZ2V0Lm5vZGVUeXBlID09PSBOb2RlLlRFWFRfTk9ERSkge1xuXHRcdFx0cmV0dXJuIGV2ZW50VGFyZ2V0LnBhcmVudE5vZGU7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50VGFyZ2V0O1xuXHR9O1xuXG5cblx0LyoqXG5cdCAqIE9uIHRvdWNoIHN0YXJ0LCByZWNvcmQgdGhlIHBvc2l0aW9uIGFuZCBzY3JvbGwgb2Zmc2V0LlxuXHQgKlxuXHQgKiBAcGFyYW0ge0V2ZW50fSBldmVudFxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn1cblx0ICovXG5cdEZhc3RDbGljay5wcm90b3R5cGUub25Ub3VjaFN0YXJ0ID0gZnVuY3Rpb24oZXZlbnQpIHtcblx0XHR2YXIgdGFyZ2V0RWxlbWVudCwgdG91Y2gsIHNlbGVjdGlvbjtcblxuXHRcdC8vIElnbm9yZSBtdWx0aXBsZSB0b3VjaGVzLCBvdGhlcndpc2UgcGluY2gtdG8tem9vbSBpcyBwcmV2ZW50ZWQgaWYgYm90aCBmaW5nZXJzIGFyZSBvbiB0aGUgRmFzdENsaWNrIGVsZW1lbnQgKGlzc3VlICMxMTEpLlxuXHRcdGlmIChldmVudC50YXJnZXRUb3VjaGVzLmxlbmd0aCA+IDEpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdHRhcmdldEVsZW1lbnQgPSB0aGlzLmdldFRhcmdldEVsZW1lbnRGcm9tRXZlbnRUYXJnZXQoZXZlbnQudGFyZ2V0KTtcblx0XHR0b3VjaCA9IGV2ZW50LnRhcmdldFRvdWNoZXNbMF07XG5cblx0XHRpZiAoZGV2aWNlSXNJT1MpIHtcblxuXHRcdFx0Ly8gT25seSB0cnVzdGVkIGV2ZW50cyB3aWxsIGRlc2VsZWN0IHRleHQgb24gaU9TIChpc3N1ZSAjNDkpXG5cdFx0XHRzZWxlY3Rpb24gPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG5cdFx0XHRpZiAoc2VsZWN0aW9uLnJhbmdlQ291bnQgJiYgIXNlbGVjdGlvbi5pc0NvbGxhcHNlZCkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCFkZXZpY2VJc0lPUzQpIHtcblxuXHRcdFx0XHQvLyBXZWlyZCB0aGluZ3MgaGFwcGVuIG9uIGlPUyB3aGVuIGFuIGFsZXJ0IG9yIGNvbmZpcm0gZGlhbG9nIGlzIG9wZW5lZCBmcm9tIGEgY2xpY2sgZXZlbnQgY2FsbGJhY2sgKGlzc3VlICMyMyk6XG5cdFx0XHRcdC8vIHdoZW4gdGhlIHVzZXIgbmV4dCB0YXBzIGFueXdoZXJlIGVsc2Ugb24gdGhlIHBhZ2UsIG5ldyB0b3VjaHN0YXJ0IGFuZCB0b3VjaGVuZCBldmVudHMgYXJlIGRpc3BhdGNoZWRcblx0XHRcdFx0Ly8gd2l0aCB0aGUgc2FtZSBpZGVudGlmaWVyIGFzIHRoZSB0b3VjaCBldmVudCB0aGF0IHByZXZpb3VzbHkgdHJpZ2dlcmVkIHRoZSBjbGljayB0aGF0IHRyaWdnZXJlZCB0aGUgYWxlcnQuXG5cdFx0XHRcdC8vIFNhZGx5LCB0aGVyZSBpcyBhbiBpc3N1ZSBvbiBpT1MgNCB0aGF0IGNhdXNlcyBzb21lIG5vcm1hbCB0b3VjaCBldmVudHMgdG8gaGF2ZSB0aGUgc2FtZSBpZGVudGlmaWVyIGFzIGFuXG5cdFx0XHRcdC8vIGltbWVkaWF0ZWx5IHByZWNlZWRpbmcgdG91Y2ggZXZlbnQgKGlzc3VlICM1MiksIHNvIHRoaXMgZml4IGlzIHVuYXZhaWxhYmxlIG9uIHRoYXQgcGxhdGZvcm0uXG5cdFx0XHRcdC8vIElzc3VlIDEyMDogdG91Y2guaWRlbnRpZmllciBpcyAwIHdoZW4gQ2hyb21lIGRldiB0b29scyAnRW11bGF0ZSB0b3VjaCBldmVudHMnIGlzIHNldCB3aXRoIGFuIGlPUyBkZXZpY2UgVUEgc3RyaW5nLFxuXHRcdFx0XHQvLyB3aGljaCBjYXVzZXMgYWxsIHRvdWNoIGV2ZW50cyB0byBiZSBpZ25vcmVkLiBBcyB0aGlzIGJsb2NrIG9ubHkgYXBwbGllcyB0byBpT1MsIGFuZCBpT1MgaWRlbnRpZmllcnMgYXJlIGFsd2F5cyBsb25nLFxuXHRcdFx0XHQvLyByYW5kb20gaW50ZWdlcnMsIGl0J3Mgc2FmZSB0byB0byBjb250aW51ZSBpZiB0aGUgaWRlbnRpZmllciBpcyAwIGhlcmUuXG5cdFx0XHRcdGlmICh0b3VjaC5pZGVudGlmaWVyICYmIHRvdWNoLmlkZW50aWZpZXIgPT09IHRoaXMubGFzdFRvdWNoSWRlbnRpZmllcikge1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGhpcy5sYXN0VG91Y2hJZGVudGlmaWVyID0gdG91Y2guaWRlbnRpZmllcjtcblxuXHRcdFx0XHQvLyBJZiB0aGUgdGFyZ2V0IGVsZW1lbnQgaXMgYSBjaGlsZCBvZiBhIHNjcm9sbGFibGUgbGF5ZXIgKHVzaW5nIC13ZWJraXQtb3ZlcmZsb3ctc2Nyb2xsaW5nOiB0b3VjaCkgYW5kOlxuXHRcdFx0XHQvLyAxKSB0aGUgdXNlciBkb2VzIGEgZmxpbmcgc2Nyb2xsIG9uIHRoZSBzY3JvbGxhYmxlIGxheWVyXG5cdFx0XHRcdC8vIDIpIHRoZSB1c2VyIHN0b3BzIHRoZSBmbGluZyBzY3JvbGwgd2l0aCBhbm90aGVyIHRhcFxuXHRcdFx0XHQvLyB0aGVuIHRoZSBldmVudC50YXJnZXQgb2YgdGhlIGxhc3QgJ3RvdWNoZW5kJyBldmVudCB3aWxsIGJlIHRoZSBlbGVtZW50IHRoYXQgd2FzIHVuZGVyIHRoZSB1c2VyJ3MgZmluZ2VyXG5cdFx0XHRcdC8vIHdoZW4gdGhlIGZsaW5nIHNjcm9sbCB3YXMgc3RhcnRlZCwgY2F1c2luZyBGYXN0Q2xpY2sgdG8gc2VuZCBhIGNsaWNrIGV2ZW50IHRvIHRoYXQgbGF5ZXIgLSB1bmxlc3MgYSBjaGVja1xuXHRcdFx0XHQvLyBpcyBtYWRlIHRvIGVuc3VyZSB0aGF0IGEgcGFyZW50IGxheWVyIHdhcyBub3Qgc2Nyb2xsZWQgYmVmb3JlIHNlbmRpbmcgYSBzeW50aGV0aWMgY2xpY2sgKGlzc3VlICM0MikuXG5cdFx0XHRcdHRoaXMudXBkYXRlU2Nyb2xsUGFyZW50KHRhcmdldEVsZW1lbnQpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRoaXMudHJhY2tpbmdDbGljayA9IHRydWU7XG5cdFx0dGhpcy50cmFja2luZ0NsaWNrU3RhcnQgPSBldmVudC50aW1lU3RhbXA7XG5cdFx0dGhpcy50YXJnZXRFbGVtZW50ID0gdGFyZ2V0RWxlbWVudDtcblxuXHRcdHRoaXMudG91Y2hTdGFydFggPSB0b3VjaC5wYWdlWDtcblx0XHR0aGlzLnRvdWNoU3RhcnRZID0gdG91Y2gucGFnZVk7XG5cblx0XHQvLyBQcmV2ZW50IHBoYW50b20gY2xpY2tzIG9uIGZhc3QgZG91YmxlLXRhcCAoaXNzdWUgIzM2KVxuXHRcdGlmICgoZXZlbnQudGltZVN0YW1wIC0gdGhpcy5sYXN0Q2xpY2tUaW1lKSA8IHRoaXMudGFwRGVsYXkpIHtcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH07XG5cblxuXHQvKipcblx0ICogQmFzZWQgb24gYSB0b3VjaG1vdmUgZXZlbnQgb2JqZWN0LCBjaGVjayB3aGV0aGVyIHRoZSB0b3VjaCBoYXMgbW92ZWQgcGFzdCBhIGJvdW5kYXJ5IHNpbmNlIGl0IHN0YXJ0ZWQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XG5cdCAqIEByZXR1cm5zIHtib29sZWFufVxuXHQgKi9cblx0RmFzdENsaWNrLnByb3RvdHlwZS50b3VjaEhhc01vdmVkID0gZnVuY3Rpb24oZXZlbnQpIHtcblx0XHR2YXIgdG91Y2ggPSBldmVudC5jaGFuZ2VkVG91Y2hlc1swXSwgYm91bmRhcnkgPSB0aGlzLnRvdWNoQm91bmRhcnk7XG5cblx0XHRpZiAoTWF0aC5hYnModG91Y2gucGFnZVggLSB0aGlzLnRvdWNoU3RhcnRYKSA+IGJvdW5kYXJ5IHx8IE1hdGguYWJzKHRvdWNoLnBhZ2VZIC0gdGhpcy50b3VjaFN0YXJ0WSkgPiBib3VuZGFyeSkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xuXG5cblx0LyoqXG5cdCAqIFVwZGF0ZSB0aGUgbGFzdCBwb3NpdGlvbi5cblx0ICpcblx0ICogQHBhcmFtIHtFdmVudH0gZXZlbnRcblx0ICogQHJldHVybnMge2Jvb2xlYW59XG5cdCAqL1xuXHRGYXN0Q2xpY2sucHJvdG90eXBlLm9uVG91Y2hNb3ZlID0gZnVuY3Rpb24oZXZlbnQpIHtcblx0XHRpZiAoIXRoaXMudHJhY2tpbmdDbGljaykge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdGhlIHRvdWNoIGhhcyBtb3ZlZCwgY2FuY2VsIHRoZSBjbGljayB0cmFja2luZ1xuXHRcdGlmICh0aGlzLnRhcmdldEVsZW1lbnQgIT09IHRoaXMuZ2V0VGFyZ2V0RWxlbWVudEZyb21FdmVudFRhcmdldChldmVudC50YXJnZXQpIHx8IHRoaXMudG91Y2hIYXNNb3ZlZChldmVudCkpIHtcblx0XHRcdHRoaXMudHJhY2tpbmdDbGljayA9IGZhbHNlO1xuXHRcdFx0dGhpcy50YXJnZXRFbGVtZW50ID0gbnVsbDtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fTtcblxuXG5cdC8qKlxuXHQgKiBBdHRlbXB0IHRvIGZpbmQgdGhlIGxhYmVsbGVkIGNvbnRyb2wgZm9yIHRoZSBnaXZlbiBsYWJlbCBlbGVtZW50LlxuXHQgKlxuXHQgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fEhUTUxMYWJlbEVsZW1lbnR9IGxhYmVsRWxlbWVudFxuXHQgKiBAcmV0dXJucyB7RWxlbWVudHxudWxsfVxuXHQgKi9cblx0RmFzdENsaWNrLnByb3RvdHlwZS5maW5kQ29udHJvbCA9IGZ1bmN0aW9uKGxhYmVsRWxlbWVudCkge1xuXG5cdFx0Ly8gRmFzdCBwYXRoIGZvciBuZXdlciBicm93c2VycyBzdXBwb3J0aW5nIHRoZSBIVE1MNSBjb250cm9sIGF0dHJpYnV0ZVxuXHRcdGlmIChsYWJlbEVsZW1lbnQuY29udHJvbCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm4gbGFiZWxFbGVtZW50LmNvbnRyb2w7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsIGJyb3dzZXJzIHVuZGVyIHRlc3QgdGhhdCBzdXBwb3J0IHRvdWNoIGV2ZW50cyBhbHNvIHN1cHBvcnQgdGhlIEhUTUw1IGh0bWxGb3IgYXR0cmlidXRlXG5cdFx0aWYgKGxhYmVsRWxlbWVudC5odG1sRm9yKSB7XG5cdFx0XHRyZXR1cm4gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobGFiZWxFbGVtZW50Lmh0bWxGb3IpO1xuXHRcdH1cblxuXHRcdC8vIElmIG5vIGZvciBhdHRyaWJ1dGUgZXhpc3RzLCBhdHRlbXB0IHRvIHJldHJpZXZlIHRoZSBmaXJzdCBsYWJlbGxhYmxlIGRlc2NlbmRhbnQgZWxlbWVudFxuXHRcdC8vIHRoZSBsaXN0IG9mIHdoaWNoIGlzIGRlZmluZWQgaGVyZTogaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDUvZm9ybXMuaHRtbCNjYXRlZ29yeS1sYWJlbFxuXHRcdHJldHVybiBsYWJlbEVsZW1lbnQucXVlcnlTZWxlY3RvcignYnV0dG9uLCBpbnB1dDpub3QoW3R5cGU9aGlkZGVuXSksIGtleWdlbiwgbWV0ZXIsIG91dHB1dCwgcHJvZ3Jlc3MsIHNlbGVjdCwgdGV4dGFyZWEnKTtcblx0fTtcblxuXG5cdC8qKlxuXHQgKiBPbiB0b3VjaCBlbmQsIGRldGVybWluZSB3aGV0aGVyIHRvIHNlbmQgYSBjbGljayBldmVudCBhdCBvbmNlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge0V2ZW50fSBldmVudFxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn1cblx0ICovXG5cdEZhc3RDbGljay5wcm90b3R5cGUub25Ub3VjaEVuZCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cdFx0dmFyIGZvckVsZW1lbnQsIHRyYWNraW5nQ2xpY2tTdGFydCwgdGFyZ2V0VGFnTmFtZSwgc2Nyb2xsUGFyZW50LCB0b3VjaCwgdGFyZ2V0RWxlbWVudCA9IHRoaXMudGFyZ2V0RWxlbWVudDtcblxuXHRcdGlmICghdGhpcy50cmFja2luZ0NsaWNrKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHQvLyBQcmV2ZW50IHBoYW50b20gY2xpY2tzIG9uIGZhc3QgZG91YmxlLXRhcCAoaXNzdWUgIzM2KVxuXHRcdGlmICgoZXZlbnQudGltZVN0YW1wIC0gdGhpcy5sYXN0Q2xpY2tUaW1lKSA8IHRoaXMudGFwRGVsYXkpIHtcblx0XHRcdHRoaXMuY2FuY2VsTmV4dENsaWNrID0gdHJ1ZTtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdGlmICgoZXZlbnQudGltZVN0YW1wIC0gdGhpcy50cmFja2luZ0NsaWNrU3RhcnQpID4gdGhpcy50YXBUaW1lb3V0KSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHQvLyBSZXNldCB0byBwcmV2ZW50IHdyb25nIGNsaWNrIGNhbmNlbCBvbiBpbnB1dCAoaXNzdWUgIzE1NikuXG5cdFx0dGhpcy5jYW5jZWxOZXh0Q2xpY2sgPSBmYWxzZTtcblxuXHRcdHRoaXMubGFzdENsaWNrVGltZSA9IGV2ZW50LnRpbWVTdGFtcDtcblxuXHRcdHRyYWNraW5nQ2xpY2tTdGFydCA9IHRoaXMudHJhY2tpbmdDbGlja1N0YXJ0O1xuXHRcdHRoaXMudHJhY2tpbmdDbGljayA9IGZhbHNlO1xuXHRcdHRoaXMudHJhY2tpbmdDbGlja1N0YXJ0ID0gMDtcblxuXHRcdC8vIE9uIHNvbWUgaU9TIGRldmljZXMsIHRoZSB0YXJnZXRFbGVtZW50IHN1cHBsaWVkIHdpdGggdGhlIGV2ZW50IGlzIGludmFsaWQgaWYgdGhlIGxheWVyXG5cdFx0Ly8gaXMgcGVyZm9ybWluZyBhIHRyYW5zaXRpb24gb3Igc2Nyb2xsLCBhbmQgaGFzIHRvIGJlIHJlLWRldGVjdGVkIG1hbnVhbGx5LiBOb3RlIHRoYXRcblx0XHQvLyBmb3IgdGhpcyB0byBmdW5jdGlvbiBjb3JyZWN0bHksIGl0IG11c3QgYmUgY2FsbGVkICphZnRlciogdGhlIGV2ZW50IHRhcmdldCBpcyBjaGVja2VkIVxuXHRcdC8vIFNlZSBpc3N1ZSAjNTc7IGFsc28gZmlsZWQgYXMgcmRhcjovLzEzMDQ4NTg5IC5cblx0XHRpZiAoZGV2aWNlSXNJT1NXaXRoQmFkVGFyZ2V0KSB7XG5cdFx0XHR0b3VjaCA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdO1xuXG5cdFx0XHQvLyBJbiBjZXJ0YWluIGNhc2VzIGFyZ3VtZW50cyBvZiBlbGVtZW50RnJvbVBvaW50IGNhbiBiZSBuZWdhdGl2ZSwgc28gcHJldmVudCBzZXR0aW5nIHRhcmdldEVsZW1lbnQgdG8gbnVsbFxuXHRcdFx0dGFyZ2V0RWxlbWVudCA9IGRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQodG91Y2gucGFnZVggLSB3aW5kb3cucGFnZVhPZmZzZXQsIHRvdWNoLnBhZ2VZIC0gd2luZG93LnBhZ2VZT2Zmc2V0KSB8fCB0YXJnZXRFbGVtZW50O1xuXHRcdFx0dGFyZ2V0RWxlbWVudC5mYXN0Q2xpY2tTY3JvbGxQYXJlbnQgPSB0aGlzLnRhcmdldEVsZW1lbnQuZmFzdENsaWNrU2Nyb2xsUGFyZW50O1xuXHRcdH1cblxuXHRcdHRhcmdldFRhZ05hbWUgPSB0YXJnZXRFbGVtZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRpZiAodGFyZ2V0VGFnTmFtZSA9PT0gJ2xhYmVsJykge1xuXHRcdFx0Zm9yRWxlbWVudCA9IHRoaXMuZmluZENvbnRyb2wodGFyZ2V0RWxlbWVudCk7XG5cdFx0XHRpZiAoZm9yRWxlbWVudCkge1xuXHRcdFx0XHR0aGlzLmZvY3VzKHRhcmdldEVsZW1lbnQpO1xuXHRcdFx0XHRpZiAoZGV2aWNlSXNBbmRyb2lkKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGFyZ2V0RWxlbWVudCA9IGZvckVsZW1lbnQ7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmICh0aGlzLm5lZWRzRm9jdXModGFyZ2V0RWxlbWVudCkpIHtcblxuXHRcdFx0Ly8gQ2FzZSAxOiBJZiB0aGUgdG91Y2ggc3RhcnRlZCBhIHdoaWxlIGFnbyAoYmVzdCBndWVzcyBpcyAxMDBtcyBiYXNlZCBvbiB0ZXN0cyBmb3IgaXNzdWUgIzM2KSB0aGVuIGZvY3VzIHdpbGwgYmUgdHJpZ2dlcmVkIGFueXdheS4gUmV0dXJuIGVhcmx5IGFuZCB1bnNldCB0aGUgdGFyZ2V0IGVsZW1lbnQgcmVmZXJlbmNlIHNvIHRoYXQgdGhlIHN1YnNlcXVlbnQgY2xpY2sgd2lsbCBiZSBhbGxvd2VkIHRocm91Z2guXG5cdFx0XHQvLyBDYXNlIDI6IFdpdGhvdXQgdGhpcyBleGNlcHRpb24gZm9yIGlucHV0IGVsZW1lbnRzIHRhcHBlZCB3aGVuIHRoZSBkb2N1bWVudCBpcyBjb250YWluZWQgaW4gYW4gaWZyYW1lLCB0aGVuIGFueSBpbnB1dHRlZCB0ZXh0IHdvbid0IGJlIHZpc2libGUgZXZlbiB0aG91Z2ggdGhlIHZhbHVlIGF0dHJpYnV0ZSBpcyB1cGRhdGVkIGFzIHRoZSB1c2VyIHR5cGVzIChpc3N1ZSAjMzcpLlxuXHRcdFx0aWYgKChldmVudC50aW1lU3RhbXAgLSB0cmFja2luZ0NsaWNrU3RhcnQpID4gMTAwIHx8IChkZXZpY2VJc0lPUyAmJiB3aW5kb3cudG9wICE9PSB3aW5kb3cgJiYgdGFyZ2V0VGFnTmFtZSA9PT0gJ2lucHV0JykpIHtcblx0XHRcdFx0dGhpcy50YXJnZXRFbGVtZW50ID0gbnVsbDtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmZvY3VzKHRhcmdldEVsZW1lbnQpO1xuXHRcdFx0dGhpcy5zZW5kQ2xpY2sodGFyZ2V0RWxlbWVudCwgZXZlbnQpO1xuXG5cdFx0XHQvLyBTZWxlY3QgZWxlbWVudHMgbmVlZCB0aGUgZXZlbnQgdG8gZ28gdGhyb3VnaCBvbiBpT1MgNCwgb3RoZXJ3aXNlIHRoZSBzZWxlY3RvciBtZW51IHdvbid0IG9wZW4uXG5cdFx0XHQvLyBBbHNvIHRoaXMgYnJlYWtzIG9wZW5pbmcgc2VsZWN0cyB3aGVuIFZvaWNlT3ZlciBpcyBhY3RpdmUgb24gaU9TNiwgaU9TNyAoYW5kIHBvc3NpYmx5IG90aGVycylcblx0XHRcdGlmICghZGV2aWNlSXNJT1MgfHwgdGFyZ2V0VGFnTmFtZSAhPT0gJ3NlbGVjdCcpIHtcblx0XHRcdFx0dGhpcy50YXJnZXRFbGVtZW50ID0gbnVsbDtcblx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdGlmIChkZXZpY2VJc0lPUyAmJiAhZGV2aWNlSXNJT1M0KSB7XG5cblx0XHRcdC8vIERvbid0IHNlbmQgYSBzeW50aGV0aWMgY2xpY2sgZXZlbnQgaWYgdGhlIHRhcmdldCBlbGVtZW50IGlzIGNvbnRhaW5lZCB3aXRoaW4gYSBwYXJlbnQgbGF5ZXIgdGhhdCB3YXMgc2Nyb2xsZWRcblx0XHRcdC8vIGFuZCB0aGlzIHRhcCBpcyBiZWluZyB1c2VkIHRvIHN0b3AgdGhlIHNjcm9sbGluZyAodXN1YWxseSBpbml0aWF0ZWQgYnkgYSBmbGluZyAtIGlzc3VlICM0MikuXG5cdFx0XHRzY3JvbGxQYXJlbnQgPSB0YXJnZXRFbGVtZW50LmZhc3RDbGlja1Njcm9sbFBhcmVudDtcblx0XHRcdGlmIChzY3JvbGxQYXJlbnQgJiYgc2Nyb2xsUGFyZW50LmZhc3RDbGlja0xhc3RTY3JvbGxUb3AgIT09IHNjcm9sbFBhcmVudC5zY3JvbGxUb3ApIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUHJldmVudCB0aGUgYWN0dWFsIGNsaWNrIGZyb20gZ29pbmcgdGhvdWdoIC0gdW5sZXNzIHRoZSB0YXJnZXQgbm9kZSBpcyBtYXJrZWQgYXMgcmVxdWlyaW5nXG5cdFx0Ly8gcmVhbCBjbGlja3Mgb3IgaWYgaXQgaXMgaW4gdGhlIHdoaXRlbGlzdCBpbiB3aGljaCBjYXNlIG9ubHkgbm9uLXByb2dyYW1tYXRpYyBjbGlja3MgYXJlIHBlcm1pdHRlZC5cblx0XHRpZiAoIXRoaXMubmVlZHNDbGljayh0YXJnZXRFbGVtZW50KSkge1xuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdHRoaXMuc2VuZENsaWNrKHRhcmdldEVsZW1lbnQsIGV2ZW50KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG5cblxuXHQvKipcblx0ICogT24gdG91Y2ggY2FuY2VsLCBzdG9wIHRyYWNraW5nIHRoZSBjbGljay5cblx0ICpcblx0ICogQHJldHVybnMge3ZvaWR9XG5cdCAqL1xuXHRGYXN0Q2xpY2sucHJvdG90eXBlLm9uVG91Y2hDYW5jZWwgPSBmdW5jdGlvbigpIHtcblx0XHR0aGlzLnRyYWNraW5nQ2xpY2sgPSBmYWxzZTtcblx0XHR0aGlzLnRhcmdldEVsZW1lbnQgPSBudWxsO1xuXHR9O1xuXG5cblx0LyoqXG5cdCAqIERldGVybWluZSBtb3VzZSBldmVudHMgd2hpY2ggc2hvdWxkIGJlIHBlcm1pdHRlZC5cblx0ICpcblx0ICogQHBhcmFtIHtFdmVudH0gZXZlbnRcblx0ICogQHJldHVybnMge2Jvb2xlYW59XG5cdCAqL1xuXHRGYXN0Q2xpY2sucHJvdG90eXBlLm9uTW91c2UgPSBmdW5jdGlvbihldmVudCkge1xuXG5cdFx0Ly8gSWYgYSB0YXJnZXQgZWxlbWVudCB3YXMgbmV2ZXIgc2V0IChiZWNhdXNlIGEgdG91Y2ggZXZlbnQgd2FzIG5ldmVyIGZpcmVkKSBhbGxvdyB0aGUgZXZlbnRcblx0XHRpZiAoIXRoaXMudGFyZ2V0RWxlbWVudCkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0aWYgKGV2ZW50LmZvcndhcmRlZFRvdWNoRXZlbnQpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdC8vIFByb2dyYW1tYXRpY2FsbHkgZ2VuZXJhdGVkIGV2ZW50cyB0YXJnZXRpbmcgYSBzcGVjaWZpYyBlbGVtZW50IHNob3VsZCBiZSBwZXJtaXR0ZWRcblx0XHRpZiAoIWV2ZW50LmNhbmNlbGFibGUpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdC8vIERlcml2ZSBhbmQgY2hlY2sgdGhlIHRhcmdldCBlbGVtZW50IHRvIHNlZSB3aGV0aGVyIHRoZSBtb3VzZSBldmVudCBuZWVkcyB0byBiZSBwZXJtaXR0ZWQ7XG5cdFx0Ly8gdW5sZXNzIGV4cGxpY2l0bHkgZW5hYmxlZCwgcHJldmVudCBub24tdG91Y2ggY2xpY2sgZXZlbnRzIGZyb20gdHJpZ2dlcmluZyBhY3Rpb25zLFxuXHRcdC8vIHRvIHByZXZlbnQgZ2hvc3QvZG91YmxlY2xpY2tzLlxuXHRcdGlmICghdGhpcy5uZWVkc0NsaWNrKHRoaXMudGFyZ2V0RWxlbWVudCkgfHwgdGhpcy5jYW5jZWxOZXh0Q2xpY2spIHtcblxuXHRcdFx0Ly8gUHJldmVudCBhbnkgdXNlci1hZGRlZCBsaXN0ZW5lcnMgZGVjbGFyZWQgb24gRmFzdENsaWNrIGVsZW1lbnQgZnJvbSBiZWluZyBmaXJlZC5cblx0XHRcdGlmIChldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24pIHtcblx0XHRcdFx0ZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIFBhcnQgb2YgdGhlIGhhY2sgZm9yIGJyb3dzZXJzIHRoYXQgZG9uJ3Qgc3VwcG9ydCBFdmVudCNzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24gKGUuZy4gQW5kcm9pZCAyKVxuXHRcdFx0XHRldmVudC5wcm9wYWdhdGlvblN0b3BwZWQgPSB0cnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDYW5jZWwgdGhlIGV2ZW50XG5cdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBJZiB0aGUgbW91c2UgZXZlbnQgaXMgcGVybWl0dGVkLCByZXR1cm4gdHJ1ZSBmb3IgdGhlIGFjdGlvbiB0byBnbyB0aHJvdWdoLlxuXHRcdHJldHVybiB0cnVlO1xuXHR9O1xuXG5cblx0LyoqXG5cdCAqIE9uIGFjdHVhbCBjbGlja3MsIGRldGVybWluZSB3aGV0aGVyIHRoaXMgaXMgYSB0b3VjaC1nZW5lcmF0ZWQgY2xpY2ssIGEgY2xpY2sgYWN0aW9uIG9jY3VycmluZ1xuXHQgKiBuYXR1cmFsbHkgYWZ0ZXIgYSBkZWxheSBhZnRlciBhIHRvdWNoICh3aGljaCBuZWVkcyB0byBiZSBjYW5jZWxsZWQgdG8gYXZvaWQgZHVwbGljYXRpb24pLCBvclxuXHQgKiBhbiBhY3R1YWwgY2xpY2sgd2hpY2ggc2hvdWxkIGJlIHBlcm1pdHRlZC5cblx0ICpcblx0ICogQHBhcmFtIHtFdmVudH0gZXZlbnRcblx0ICogQHJldHVybnMge2Jvb2xlYW59XG5cdCAqL1xuXHRGYXN0Q2xpY2sucHJvdG90eXBlLm9uQ2xpY2sgPSBmdW5jdGlvbihldmVudCkge1xuXHRcdHZhciBwZXJtaXR0ZWQ7XG5cblx0XHQvLyBJdCdzIHBvc3NpYmxlIGZvciBhbm90aGVyIEZhc3RDbGljay1saWtlIGxpYnJhcnkgZGVsaXZlcmVkIHdpdGggdGhpcmQtcGFydHkgY29kZSB0byBmaXJlIGEgY2xpY2sgZXZlbnQgYmVmb3JlIEZhc3RDbGljayBkb2VzIChpc3N1ZSAjNDQpLiBJbiB0aGF0IGNhc2UsIHNldCB0aGUgY2xpY2stdHJhY2tpbmcgZmxhZyBiYWNrIHRvIGZhbHNlIGFuZCByZXR1cm4gZWFybHkuIFRoaXMgd2lsbCBjYXVzZSBvblRvdWNoRW5kIHRvIHJldHVybiBlYXJseS5cblx0XHRpZiAodGhpcy50cmFja2luZ0NsaWNrKSB7XG5cdFx0XHR0aGlzLnRhcmdldEVsZW1lbnQgPSBudWxsO1xuXHRcdFx0dGhpcy50cmFja2luZ0NsaWNrID0gZmFsc2U7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHQvLyBWZXJ5IG9kZCBiZWhhdmlvdXIgb24gaU9TIChpc3N1ZSAjMTgpOiBpZiBhIHN1Ym1pdCBlbGVtZW50IGlzIHByZXNlbnQgaW5zaWRlIGEgZm9ybSBhbmQgdGhlIHVzZXIgaGl0cyBlbnRlciBpbiB0aGUgaU9TIHNpbXVsYXRvciBvciBjbGlja3MgdGhlIEdvIGJ1dHRvbiBvbiB0aGUgcG9wLXVwIE9TIGtleWJvYXJkIHRoZSBhIGtpbmQgb2YgJ2Zha2UnIGNsaWNrIGV2ZW50IHdpbGwgYmUgdHJpZ2dlcmVkIHdpdGggdGhlIHN1Ym1pdC10eXBlIGlucHV0IGVsZW1lbnQgYXMgdGhlIHRhcmdldC5cblx0XHRpZiAoZXZlbnQudGFyZ2V0LnR5cGUgPT09ICdzdWJtaXQnICYmIGV2ZW50LmRldGFpbCA9PT0gMCkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0cGVybWl0dGVkID0gdGhpcy5vbk1vdXNlKGV2ZW50KTtcblxuXHRcdC8vIE9ubHkgdW5zZXQgdGFyZ2V0RWxlbWVudCBpZiB0aGUgY2xpY2sgaXMgbm90IHBlcm1pdHRlZC4gVGhpcyB3aWxsIGVuc3VyZSB0aGF0IHRoZSBjaGVjayBmb3IgIXRhcmdldEVsZW1lbnQgaW4gb25Nb3VzZSBmYWlscyBhbmQgdGhlIGJyb3dzZXIncyBjbGljayBkb2Vzbid0IGdvIHRocm91Z2guXG5cdFx0aWYgKCFwZXJtaXR0ZWQpIHtcblx0XHRcdHRoaXMudGFyZ2V0RWxlbWVudCA9IG51bGw7XG5cdFx0fVxuXG5cdFx0Ly8gSWYgY2xpY2tzIGFyZSBwZXJtaXR0ZWQsIHJldHVybiB0cnVlIGZvciB0aGUgYWN0aW9uIHRvIGdvIHRocm91Z2guXG5cdFx0cmV0dXJuIHBlcm1pdHRlZDtcblx0fTtcblxuXG5cdC8qKlxuXHQgKiBSZW1vdmUgYWxsIEZhc3RDbGljaydzIGV2ZW50IGxpc3RlbmVycy5cblx0ICpcblx0ICogQHJldHVybnMge3ZvaWR9XG5cdCAqL1xuXHRGYXN0Q2xpY2sucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgbGF5ZXIgPSB0aGlzLmxheWVyO1xuXG5cdFx0aWYgKGRldmljZUlzQW5kcm9pZCkge1xuXHRcdFx0bGF5ZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2VvdmVyJywgdGhpcy5vbk1vdXNlLCB0cnVlKTtcblx0XHRcdGxheWVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMub25Nb3VzZSwgdHJ1ZSk7XG5cdFx0XHRsYXllci5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5vbk1vdXNlLCB0cnVlKTtcblx0XHR9XG5cblx0XHRsYXllci5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25DbGljaywgdHJ1ZSk7XG5cdFx0bGF5ZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMub25Ub3VjaFN0YXJ0LCBmYWxzZSk7XG5cdFx0bGF5ZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdGhpcy5vblRvdWNoTW92ZSwgZmFsc2UpO1xuXHRcdGxheWVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgdGhpcy5vblRvdWNoRW5kLCBmYWxzZSk7XG5cdFx0bGF5ZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hjYW5jZWwnLCB0aGlzLm9uVG91Y2hDYW5jZWwsIGZhbHNlKTtcblx0fTtcblxuXG5cdC8qKlxuXHQgKiBDaGVjayB3aGV0aGVyIEZhc3RDbGljayBpcyBuZWVkZWQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7RWxlbWVudH0gbGF5ZXIgVGhlIGxheWVyIHRvIGxpc3RlbiBvblxuXHQgKi9cblx0RmFzdENsaWNrLm5vdE5lZWRlZCA9IGZ1bmN0aW9uKGxheWVyKSB7XG5cdFx0dmFyIG1ldGFWaWV3cG9ydDtcblx0XHR2YXIgY2hyb21lVmVyc2lvbjtcblx0XHR2YXIgYmxhY2tiZXJyeVZlcnNpb247XG5cdFx0dmFyIGZpcmVmb3hWZXJzaW9uO1xuXG5cdFx0Ly8gRGV2aWNlcyB0aGF0IGRvbid0IHN1cHBvcnQgdG91Y2ggZG9uJ3QgbmVlZCBGYXN0Q2xpY2tcblx0XHRpZiAodHlwZW9mIHdpbmRvdy5vbnRvdWNoc3RhcnQgPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHQvLyBDaHJvbWUgdmVyc2lvbiAtIHplcm8gZm9yIG90aGVyIGJyb3dzZXJzXG5cdFx0Y2hyb21lVmVyc2lvbiA9ICsoL0Nocm9tZVxcLyhbMC05XSspLy5leGVjKG5hdmlnYXRvci51c2VyQWdlbnQpIHx8IFssMF0pWzFdO1xuXG5cdFx0aWYgKGNocm9tZVZlcnNpb24pIHtcblxuXHRcdFx0aWYgKGRldmljZUlzQW5kcm9pZCkge1xuXHRcdFx0XHRtZXRhVmlld3BvcnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdtZXRhW25hbWU9dmlld3BvcnRdJyk7XG5cblx0XHRcdFx0aWYgKG1ldGFWaWV3cG9ydCkge1xuXHRcdFx0XHRcdC8vIENocm9tZSBvbiBBbmRyb2lkIHdpdGggdXNlci1zY2FsYWJsZT1cIm5vXCIgZG9lc24ndCBuZWVkIEZhc3RDbGljayAoaXNzdWUgIzg5KVxuXHRcdFx0XHRcdGlmIChtZXRhVmlld3BvcnQuY29udGVudC5pbmRleE9mKCd1c2VyLXNjYWxhYmxlPW5vJykgIT09IC0xKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Ly8gQ2hyb21lIDMyIGFuZCBhYm92ZSB3aXRoIHdpZHRoPWRldmljZS13aWR0aCBvciBsZXNzIGRvbid0IG5lZWQgRmFzdENsaWNrXG5cdFx0XHRcdFx0aWYgKGNocm9tZVZlcnNpb24gPiAzMSAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsV2lkdGggPD0gd2luZG93Lm91dGVyV2lkdGgpIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBDaHJvbWUgZGVza3RvcCBkb2Vzbid0IG5lZWQgRmFzdENsaWNrIChpc3N1ZSAjMTUpXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZGV2aWNlSXNCbGFja0JlcnJ5MTApIHtcblx0XHRcdGJsYWNrYmVycnlWZXJzaW9uID0gbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvVmVyc2lvblxcLyhbMC05XSopXFwuKFswLTldKikvKTtcblxuXHRcdFx0Ly8gQmxhY2tCZXJyeSAxMC4zKyBkb2VzIG5vdCByZXF1aXJlIEZhc3RjbGljayBsaWJyYXJ5LlxuXHRcdFx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL2Z0bGFicy9mYXN0Y2xpY2svaXNzdWVzLzI1MVxuXHRcdFx0aWYgKGJsYWNrYmVycnlWZXJzaW9uWzFdID49IDEwICYmIGJsYWNrYmVycnlWZXJzaW9uWzJdID49IDMpIHtcblx0XHRcdFx0bWV0YVZpZXdwb3J0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbWV0YVtuYW1lPXZpZXdwb3J0XScpO1xuXG5cdFx0XHRcdGlmIChtZXRhVmlld3BvcnQpIHtcblx0XHRcdFx0XHQvLyB1c2VyLXNjYWxhYmxlPW5vIGVsaW1pbmF0ZXMgY2xpY2sgZGVsYXkuXG5cdFx0XHRcdFx0aWYgKG1ldGFWaWV3cG9ydC5jb250ZW50LmluZGV4T2YoJ3VzZXItc2NhbGFibGU9bm8nKSAhPT0gLTEpIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQvLyB3aWR0aD1kZXZpY2Utd2lkdGggKG9yIGxlc3MgdGhhbiBkZXZpY2Utd2lkdGgpIGVsaW1pbmF0ZXMgY2xpY2sgZGVsYXkuXG5cdFx0XHRcdFx0aWYgKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxXaWR0aCA8PSB3aW5kb3cub3V0ZXJXaWR0aCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gSUUxMCB3aXRoIC1tcy10b3VjaC1hY3Rpb246IG5vbmUgb3IgbWFuaXB1bGF0aW9uLCB3aGljaCBkaXNhYmxlcyBkb3VibGUtdGFwLXRvLXpvb20gKGlzc3VlICM5Nylcblx0XHRpZiAobGF5ZXIuc3R5bGUubXNUb3VjaEFjdGlvbiA9PT0gJ25vbmUnIHx8IGxheWVyLnN0eWxlLnRvdWNoQWN0aW9uID09PSAnbWFuaXB1bGF0aW9uJykge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0Ly8gRmlyZWZveCB2ZXJzaW9uIC0gemVybyBmb3Igb3RoZXIgYnJvd3NlcnNcblx0XHRmaXJlZm94VmVyc2lvbiA9ICsoL0ZpcmVmb3hcXC8oWzAtOV0rKS8uZXhlYyhuYXZpZ2F0b3IudXNlckFnZW50KSB8fCBbLDBdKVsxXTtcblxuXHRcdGlmIChmaXJlZm94VmVyc2lvbiA+PSAyNykge1xuXHRcdFx0Ly8gRmlyZWZveCAyNysgZG9lcyBub3QgaGF2ZSB0YXAgZGVsYXkgaWYgdGhlIGNvbnRlbnQgaXMgbm90IHpvb21hYmxlIC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9OTIyODk2XG5cblx0XHRcdG1ldGFWaWV3cG9ydCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ21ldGFbbmFtZT12aWV3cG9ydF0nKTtcblx0XHRcdGlmIChtZXRhVmlld3BvcnQgJiYgKG1ldGFWaWV3cG9ydC5jb250ZW50LmluZGV4T2YoJ3VzZXItc2NhbGFibGU9bm8nKSAhPT0gLTEgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFdpZHRoIDw9IHdpbmRvdy5vdXRlcldpZHRoKSkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBJRTExOiBwcmVmaXhlZCAtbXMtdG91Y2gtYWN0aW9uIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQgYW5kIGl0J3MgcmVjb21lbmRlZCB0byB1c2Ugbm9uLXByZWZpeGVkIHZlcnNpb25cblx0XHQvLyBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvd2luZG93cy9hcHBzL0hoNzY3MzEzLmFzcHhcblx0XHRpZiAobGF5ZXIuc3R5bGUudG91Y2hBY3Rpb24gPT09ICdub25lJyB8fCBsYXllci5zdHlsZS50b3VjaEFjdGlvbiA9PT0gJ21hbmlwdWxhdGlvbicpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcblxuXG5cdC8qKlxuXHQgKiBGYWN0b3J5IG1ldGhvZCBmb3IgY3JlYXRpbmcgYSBGYXN0Q2xpY2sgb2JqZWN0XG5cdCAqXG5cdCAqIEBwYXJhbSB7RWxlbWVudH0gbGF5ZXIgVGhlIGxheWVyIHRvIGxpc3RlbiBvblxuXHQgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIHRvIG92ZXJyaWRlIHRoZSBkZWZhdWx0c1xuXHQgKi9cblx0RmFzdENsaWNrLmF0dGFjaCA9IGZ1bmN0aW9uKGxheWVyLCBvcHRpb25zKSB7XG5cdFx0cmV0dXJuIG5ldyBGYXN0Q2xpY2sobGF5ZXIsIG9wdGlvbnMpO1xuXHR9O1xuXG5cblx0aWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcblxuXHRcdC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cblx0XHRkZWZpbmUoZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gRmFzdENsaWNrO1xuXHRcdH0pO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBGYXN0Q2xpY2suYXR0YWNoO1xuXHRcdG1vZHVsZS5leHBvcnRzLkZhc3RDbGljayA9IEZhc3RDbGljaztcblx0fSBlbHNlIHtcblx0XHR3aW5kb3cuRmFzdENsaWNrID0gRmFzdENsaWNrO1xuXHR9XG59KCkpO1xuIiwidmFyIGlzRnVuY3Rpb24gPSByZXF1aXJlKCdpcy1mdW5jdGlvbicpXG5cbm1vZHVsZS5leHBvcnRzID0gZm9yRWFjaFxuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5XG5cbmZ1bmN0aW9uIGZvckVhY2gobGlzdCwgaXRlcmF0b3IsIGNvbnRleHQpIHtcbiAgICBpZiAoIWlzRnVuY3Rpb24oaXRlcmF0b3IpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2l0ZXJhdG9yIG11c3QgYmUgYSBmdW5jdGlvbicpXG4gICAgfVxuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAzKSB7XG4gICAgICAgIGNvbnRleHQgPSB0aGlzXG4gICAgfVxuICAgIFxuICAgIGlmICh0b1N0cmluZy5jYWxsKGxpc3QpID09PSAnW29iamVjdCBBcnJheV0nKVxuICAgICAgICBmb3JFYWNoQXJyYXkobGlzdCwgaXRlcmF0b3IsIGNvbnRleHQpXG4gICAgZWxzZSBpZiAodHlwZW9mIGxpc3QgPT09ICdzdHJpbmcnKVxuICAgICAgICBmb3JFYWNoU3RyaW5nKGxpc3QsIGl0ZXJhdG9yLCBjb250ZXh0KVxuICAgIGVsc2VcbiAgICAgICAgZm9yRWFjaE9iamVjdChsaXN0LCBpdGVyYXRvciwgY29udGV4dClcbn1cblxuZnVuY3Rpb24gZm9yRWFjaEFycmF5KGFycmF5LCBpdGVyYXRvciwgY29udGV4dCkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhcnJheS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChhcnJheSwgaSkpIHtcbiAgICAgICAgICAgIGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgYXJyYXlbaV0sIGksIGFycmF5KVxuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBmb3JFYWNoU3RyaW5nKHN0cmluZywgaXRlcmF0b3IsIGNvbnRleHQpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gc3RyaW5nLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIC8vIG5vIHN1Y2ggdGhpbmcgYXMgYSBzcGFyc2Ugc3RyaW5nLlxuICAgICAgICBpdGVyYXRvci5jYWxsKGNvbnRleHQsIHN0cmluZy5jaGFyQXQoaSksIGksIHN0cmluZylcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGZvckVhY2hPYmplY3Qob2JqZWN0LCBpdGVyYXRvciwgY29udGV4dCkge1xuICAgIGZvciAodmFyIGsgaW4gb2JqZWN0KSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgaykpIHtcbiAgICAgICAgICAgIGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgb2JqZWN0W2tdLCBrLCBvYmplY3QpXG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJ2YXIgdG9wTGV2ZWwgPSB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6XG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB7fVxudmFyIG1pbkRvYyA9IHJlcXVpcmUoJ21pbi1kb2N1bWVudCcpO1xuXG5pZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gZG9jdW1lbnQ7XG59IGVsc2Uge1xuICAgIHZhciBkb2NjeSA9IHRvcExldmVsWydfX0dMT0JBTF9ET0NVTUVOVF9DQUNIRUA0J107XG5cbiAgICBpZiAoIWRvY2N5KSB7XG4gICAgICAgIGRvY2N5ID0gdG9wTGV2ZWxbJ19fR0xPQkFMX0RPQ1VNRU5UX0NBQ0hFQDQnXSA9IG1pbkRvYztcbiAgICB9XG5cbiAgICBtb2R1bGUuZXhwb3J0cyA9IGRvY2N5O1xufVxuIiwiaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHdpbmRvdztcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsO1xufSBlbHNlIGlmICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIil7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBzZWxmO1xufSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHt9O1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBoYXNoTWF0Y2ggKGhhc2gsIHByZWZpeCkge1xuICB2YXIgcHJlID0gcHJlZml4IHx8ICcvJztcbiAgaWYgKGhhc2gubGVuZ3RoID09PSAwKSByZXR1cm4gcHJlO1xuICBoYXNoID0gaGFzaC5yZXBsYWNlKCcjJywgJycpO1xuICBoYXNoID0gaGFzaC5yZXBsYWNlKC9cXC8kLywgJycpXG4gIGlmIChoYXNoLmluZGV4T2YoJy8nKSAhPSAwKSBoYXNoID0gJy8nICsgaGFzaDtcbiAgaWYgKHByZSA9PSAnLycpIHJldHVybiBoYXNoO1xuICBlbHNlIHJldHVybiBoYXNoLnJlcGxhY2UocHJlLCAnJyk7XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGF0dHJpYnV0ZVRvUHJvcGVydHlcblxudmFyIHRyYW5zZm9ybSA9IHtcbiAgJ2NsYXNzJzogJ2NsYXNzTmFtZScsXG4gICdmb3InOiAnaHRtbEZvcicsXG4gICdodHRwLWVxdWl2JzogJ2h0dHBFcXVpdidcbn1cblxuZnVuY3Rpb24gYXR0cmlidXRlVG9Qcm9wZXJ0eSAoaCkge1xuICByZXR1cm4gZnVuY3Rpb24gKHRhZ05hbWUsIGF0dHJzLCBjaGlsZHJlbikge1xuICAgIGZvciAodmFyIGF0dHIgaW4gYXR0cnMpIHtcbiAgICAgIGlmIChhdHRyIGluIHRyYW5zZm9ybSkge1xuICAgICAgICBhdHRyc1t0cmFuc2Zvcm1bYXR0cl1dID0gYXR0cnNbYXR0cl1cbiAgICAgICAgZGVsZXRlIGF0dHJzW2F0dHJdXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBoKHRhZ05hbWUsIGF0dHJzLCBjaGlsZHJlbilcbiAgfVxufVxuIiwidmFyIGF0dHJUb1Byb3AgPSByZXF1aXJlKCdoeXBlcnNjcmlwdC1hdHRyaWJ1dGUtdG8tcHJvcGVydHknKVxuXG52YXIgVkFSID0gMCwgVEVYVCA9IDEsIE9QRU4gPSAyLCBDTE9TRSA9IDMsIEFUVFIgPSA0XG52YXIgQVRUUl9LRVkgPSA1LCBBVFRSX0tFWV9XID0gNlxudmFyIEFUVFJfVkFMVUVfVyA9IDcsIEFUVFJfVkFMVUUgPSA4XG52YXIgQVRUUl9WQUxVRV9TUSA9IDksIEFUVFJfVkFMVUVfRFEgPSAxMFxudmFyIEFUVFJfRVEgPSAxMSwgQVRUUl9CUkVBSyA9IDEyXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGgsIG9wdHMpIHtcbiAgaCA9IGF0dHJUb1Byb3AoaClcbiAgaWYgKCFvcHRzKSBvcHRzID0ge31cbiAgdmFyIGNvbmNhdCA9IG9wdHMuY29uY2F0IHx8IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIFN0cmluZyhhKSArIFN0cmluZyhiKVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChzdHJpbmdzKSB7XG4gICAgdmFyIHN0YXRlID0gVEVYVCwgcmVnID0gJydcbiAgICB2YXIgYXJnbGVuID0gYXJndW1lbnRzLmxlbmd0aFxuICAgIHZhciBwYXJ0cyA9IFtdXG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0cmluZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChpIDwgYXJnbGVuIC0gMSkge1xuICAgICAgICB2YXIgYXJnID0gYXJndW1lbnRzW2krMV1cbiAgICAgICAgdmFyIHAgPSBwYXJzZShzdHJpbmdzW2ldKVxuICAgICAgICB2YXIgeHN0YXRlID0gc3RhdGVcbiAgICAgICAgaWYgKHhzdGF0ZSA9PT0gQVRUUl9WQUxVRV9EUSkgeHN0YXRlID0gQVRUUl9WQUxVRVxuICAgICAgICBpZiAoeHN0YXRlID09PSBBVFRSX1ZBTFVFX1NRKSB4c3RhdGUgPSBBVFRSX1ZBTFVFXG4gICAgICAgIGlmICh4c3RhdGUgPT09IEFUVFJfVkFMVUVfVykgeHN0YXRlID0gQVRUUl9WQUxVRVxuICAgICAgICBpZiAoeHN0YXRlID09PSBBVFRSKSB4c3RhdGUgPSBBVFRSX0tFWVxuICAgICAgICBwLnB1c2goWyBWQVIsIHhzdGF0ZSwgYXJnIF0pXG4gICAgICAgIHBhcnRzLnB1c2guYXBwbHkocGFydHMsIHApXG4gICAgICB9IGVsc2UgcGFydHMucHVzaC5hcHBseShwYXJ0cywgcGFyc2Uoc3RyaW5nc1tpXSkpXG4gICAgfVxuXG4gICAgdmFyIHRyZWUgPSBbbnVsbCx7fSxbXV1cbiAgICB2YXIgc3RhY2sgPSBbW3RyZWUsLTFdXVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjdXIgPSBzdGFja1tzdGFjay5sZW5ndGgtMV1bMF1cbiAgICAgIHZhciBwID0gcGFydHNbaV0sIHMgPSBwWzBdXG4gICAgICBpZiAocyA9PT0gT1BFTiAmJiAvXlxcLy8udGVzdChwWzFdKSkge1xuICAgICAgICB2YXIgaXggPSBzdGFja1tzdGFjay5sZW5ndGgtMV1bMV1cbiAgICAgICAgaWYgKHN0YWNrLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBzdGFjay5wb3AoKVxuICAgICAgICAgIHN0YWNrW3N0YWNrLmxlbmd0aC0xXVswXVsyXVtpeF0gPSBoKFxuICAgICAgICAgICAgY3VyWzBdLCBjdXJbMV0sIGN1clsyXS5sZW5ndGggPyBjdXJbMl0gOiB1bmRlZmluZWRcbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocyA9PT0gT1BFTikge1xuICAgICAgICB2YXIgYyA9IFtwWzFdLHt9LFtdXVxuICAgICAgICBjdXJbMl0ucHVzaChjKVxuICAgICAgICBzdGFjay5wdXNoKFtjLGN1clsyXS5sZW5ndGgtMV0pXG4gICAgICB9IGVsc2UgaWYgKHMgPT09IEFUVFJfS0VZIHx8IChzID09PSBWQVIgJiYgcFsxXSA9PT0gQVRUUl9LRVkpKSB7XG4gICAgICAgIHZhciBrZXkgPSAnJ1xuICAgICAgICB2YXIgY29weUtleVxuICAgICAgICBmb3IgKDsgaSA8IHBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKHBhcnRzW2ldWzBdID09PSBBVFRSX0tFWSkge1xuICAgICAgICAgICAga2V5ID0gY29uY2F0KGtleSwgcGFydHNbaV1bMV0pXG4gICAgICAgICAgfSBlbHNlIGlmIChwYXJ0c1tpXVswXSA9PT0gVkFSICYmIHBhcnRzW2ldWzFdID09PSBBVFRSX0tFWSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXJ0c1tpXVsyXSA9PT0gJ29iamVjdCcgJiYgIWtleSkge1xuICAgICAgICAgICAgICBmb3IgKGNvcHlLZXkgaW4gcGFydHNbaV1bMl0pIHtcbiAgICAgICAgICAgICAgICBpZiAocGFydHNbaV1bMl0uaGFzT3duUHJvcGVydHkoY29weUtleSkgJiYgIWN1clsxXVtjb3B5S2V5XSkge1xuICAgICAgICAgICAgICAgICAgY3VyWzFdW2NvcHlLZXldID0gcGFydHNbaV1bMl1bY29weUtleV1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGtleSA9IGNvbmNhdChrZXksIHBhcnRzW2ldWzJdKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBicmVha1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJ0c1tpXVswXSA9PT0gQVRUUl9FUSkgaSsrXG4gICAgICAgIHZhciBqID0gaVxuICAgICAgICBmb3IgKDsgaSA8IHBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKHBhcnRzW2ldWzBdID09PSBBVFRSX1ZBTFVFIHx8IHBhcnRzW2ldWzBdID09PSBBVFRSX0tFWSkge1xuICAgICAgICAgICAgaWYgKCFjdXJbMV1ba2V5XSkgY3VyWzFdW2tleV0gPSBzdHJmbihwYXJ0c1tpXVsxXSlcbiAgICAgICAgICAgIGVsc2UgY3VyWzFdW2tleV0gPSBjb25jYXQoY3VyWzFdW2tleV0sIHBhcnRzW2ldWzFdKVxuICAgICAgICAgIH0gZWxzZSBpZiAocGFydHNbaV1bMF0gPT09IFZBUlxuICAgICAgICAgICYmIChwYXJ0c1tpXVsxXSA9PT0gQVRUUl9WQUxVRSB8fCBwYXJ0c1tpXVsxXSA9PT0gQVRUUl9LRVkpKSB7XG4gICAgICAgICAgICBpZiAoIWN1clsxXVtrZXldKSBjdXJbMV1ba2V5XSA9IHN0cmZuKHBhcnRzW2ldWzJdKVxuICAgICAgICAgICAgZWxzZSBjdXJbMV1ba2V5XSA9IGNvbmNhdChjdXJbMV1ba2V5XSwgcGFydHNbaV1bMl0pXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChrZXkubGVuZ3RoICYmICFjdXJbMV1ba2V5XSAmJiBpID09PSBqXG4gICAgICAgICAgICAmJiAocGFydHNbaV1bMF0gPT09IENMT1NFIHx8IHBhcnRzW2ldWzBdID09PSBBVFRSX0JSRUFLKSkge1xuICAgICAgICAgICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9pbmZyYXN0cnVjdHVyZS5odG1sI2Jvb2xlYW4tYXR0cmlidXRlc1xuICAgICAgICAgICAgICAvLyBlbXB0eSBzdHJpbmcgaXMgZmFsc3ksIG5vdCB3ZWxsIGJlaGF2ZWQgdmFsdWUgaW4gYnJvd3NlclxuICAgICAgICAgICAgICBjdXJbMV1ba2V5XSA9IGtleS50b0xvd2VyQ2FzZSgpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChzID09PSBBVFRSX0tFWSkge1xuICAgICAgICBjdXJbMV1bcFsxXV0gPSB0cnVlXG4gICAgICB9IGVsc2UgaWYgKHMgPT09IFZBUiAmJiBwWzFdID09PSBBVFRSX0tFWSkge1xuICAgICAgICBjdXJbMV1bcFsyXV0gPSB0cnVlXG4gICAgICB9IGVsc2UgaWYgKHMgPT09IENMT1NFKSB7XG4gICAgICAgIGlmIChzZWxmQ2xvc2luZyhjdXJbMF0pICYmIHN0YWNrLmxlbmd0aCkge1xuICAgICAgICAgIHZhciBpeCA9IHN0YWNrW3N0YWNrLmxlbmd0aC0xXVsxXVxuICAgICAgICAgIHN0YWNrLnBvcCgpXG4gICAgICAgICAgc3RhY2tbc3RhY2subGVuZ3RoLTFdWzBdWzJdW2l4XSA9IGgoXG4gICAgICAgICAgICBjdXJbMF0sIGN1clsxXSwgY3VyWzJdLmxlbmd0aCA/IGN1clsyXSA6IHVuZGVmaW5lZFxuICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChzID09PSBWQVIgJiYgcFsxXSA9PT0gVEVYVCkge1xuICAgICAgICBpZiAocFsyXSA9PT0gdW5kZWZpbmVkIHx8IHBbMl0gPT09IG51bGwpIHBbMl0gPSAnJ1xuICAgICAgICBlbHNlIGlmICghcFsyXSkgcFsyXSA9IGNvbmNhdCgnJywgcFsyXSlcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocFsyXVswXSkpIHtcbiAgICAgICAgICBjdXJbMl0ucHVzaC5hcHBseShjdXJbMl0sIHBbMl0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY3VyWzJdLnB1c2gocFsyXSlcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChzID09PSBURVhUKSB7XG4gICAgICAgIGN1clsyXS5wdXNoKHBbMV0pXG4gICAgICB9IGVsc2UgaWYgKHMgPT09IEFUVFJfRVEgfHwgcyA9PT0gQVRUUl9CUkVBSykge1xuICAgICAgICAvLyBuby1vcFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmhhbmRsZWQ6ICcgKyBzKVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0cmVlWzJdLmxlbmd0aCA+IDEgJiYgL15cXHMqJC8udGVzdCh0cmVlWzJdWzBdKSkge1xuICAgICAgdHJlZVsyXS5zaGlmdCgpXG4gICAgfVxuXG4gICAgaWYgKHRyZWVbMl0ubGVuZ3RoID4gMlxuICAgIHx8ICh0cmVlWzJdLmxlbmd0aCA9PT0gMiAmJiAvXFxTLy50ZXN0KHRyZWVbMl1bMV0pKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnbXVsdGlwbGUgcm9vdCBlbGVtZW50cyBtdXN0IGJlIHdyYXBwZWQgaW4gYW4gZW5jbG9zaW5nIHRhZydcbiAgICAgIClcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodHJlZVsyXVswXSkgJiYgdHlwZW9mIHRyZWVbMl1bMF1bMF0gPT09ICdzdHJpbmcnXG4gICAgJiYgQXJyYXkuaXNBcnJheSh0cmVlWzJdWzBdWzJdKSkge1xuICAgICAgdHJlZVsyXVswXSA9IGgodHJlZVsyXVswXVswXSwgdHJlZVsyXVswXVsxXSwgdHJlZVsyXVswXVsyXSlcbiAgICB9XG4gICAgcmV0dXJuIHRyZWVbMl1bMF1cblxuICAgIGZ1bmN0aW9uIHBhcnNlIChzdHIpIHtcbiAgICAgIHZhciByZXMgPSBbXVxuICAgICAgaWYgKHN0YXRlID09PSBBVFRSX1ZBTFVFX1cpIHN0YXRlID0gQVRUUlxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGMgPSBzdHIuY2hhckF0KGkpXG4gICAgICAgIGlmIChzdGF0ZSA9PT0gVEVYVCAmJiBjID09PSAnPCcpIHtcbiAgICAgICAgICBpZiAocmVnLmxlbmd0aCkgcmVzLnB1c2goW1RFWFQsIHJlZ10pXG4gICAgICAgICAgcmVnID0gJydcbiAgICAgICAgICBzdGF0ZSA9IE9QRU5cbiAgICAgICAgfSBlbHNlIGlmIChjID09PSAnPicgJiYgIXF1b3Qoc3RhdGUpKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBPUEVOKSB7XG4gICAgICAgICAgICByZXMucHVzaChbT1BFTixyZWddKVxuICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdGUgPT09IEFUVFJfS0VZKSB7XG4gICAgICAgICAgICByZXMucHVzaChbQVRUUl9LRVkscmVnXSlcbiAgICAgICAgICB9IGVsc2UgaWYgKHN0YXRlID09PSBBVFRSX1ZBTFVFICYmIHJlZy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJlcy5wdXNoKFtBVFRSX1ZBTFVFLHJlZ10pXG4gICAgICAgICAgfVxuICAgICAgICAgIHJlcy5wdXNoKFtDTE9TRV0pXG4gICAgICAgICAgcmVnID0gJydcbiAgICAgICAgICBzdGF0ZSA9IFRFWFRcbiAgICAgICAgfSBlbHNlIGlmIChzdGF0ZSA9PT0gVEVYVCkge1xuICAgICAgICAgIHJlZyArPSBjXG4gICAgICAgIH0gZWxzZSBpZiAoc3RhdGUgPT09IE9QRU4gJiYgL1xccy8udGVzdChjKSkge1xuICAgICAgICAgIHJlcy5wdXNoKFtPUEVOLCByZWddKVxuICAgICAgICAgIHJlZyA9ICcnXG4gICAgICAgICAgc3RhdGUgPSBBVFRSXG4gICAgICAgIH0gZWxzZSBpZiAoc3RhdGUgPT09IE9QRU4pIHtcbiAgICAgICAgICByZWcgKz0gY1xuICAgICAgICB9IGVsc2UgaWYgKHN0YXRlID09PSBBVFRSICYmIC9bXFx3LV0vLnRlc3QoYykpIHtcbiAgICAgICAgICBzdGF0ZSA9IEFUVFJfS0VZXG4gICAgICAgICAgcmVnID0gY1xuICAgICAgICB9IGVsc2UgaWYgKHN0YXRlID09PSBBVFRSICYmIC9cXHMvLnRlc3QoYykpIHtcbiAgICAgICAgICBpZiAocmVnLmxlbmd0aCkgcmVzLnB1c2goW0FUVFJfS0VZLHJlZ10pXG4gICAgICAgICAgcmVzLnB1c2goW0FUVFJfQlJFQUtdKVxuICAgICAgICB9IGVsc2UgaWYgKHN0YXRlID09PSBBVFRSX0tFWSAmJiAvXFxzLy50ZXN0KGMpKSB7XG4gICAgICAgICAgcmVzLnB1c2goW0FUVFJfS0VZLHJlZ10pXG4gICAgICAgICAgcmVnID0gJydcbiAgICAgICAgICBzdGF0ZSA9IEFUVFJfS0VZX1dcbiAgICAgICAgfSBlbHNlIGlmIChzdGF0ZSA9PT0gQVRUUl9LRVkgJiYgYyA9PT0gJz0nKSB7XG4gICAgICAgICAgcmVzLnB1c2goW0FUVFJfS0VZLHJlZ10sW0FUVFJfRVFdKVxuICAgICAgICAgIHJlZyA9ICcnXG4gICAgICAgICAgc3RhdGUgPSBBVFRSX1ZBTFVFX1dcbiAgICAgICAgfSBlbHNlIGlmIChzdGF0ZSA9PT0gQVRUUl9LRVkpIHtcbiAgICAgICAgICByZWcgKz0gY1xuICAgICAgICB9IGVsc2UgaWYgKChzdGF0ZSA9PT0gQVRUUl9LRVlfVyB8fCBzdGF0ZSA9PT0gQVRUUikgJiYgYyA9PT0gJz0nKSB7XG4gICAgICAgICAgcmVzLnB1c2goW0FUVFJfRVFdKVxuICAgICAgICAgIHN0YXRlID0gQVRUUl9WQUxVRV9XXG4gICAgICAgIH0gZWxzZSBpZiAoKHN0YXRlID09PSBBVFRSX0tFWV9XIHx8IHN0YXRlID09PSBBVFRSKSAmJiAhL1xccy8udGVzdChjKSkge1xuICAgICAgICAgIHJlcy5wdXNoKFtBVFRSX0JSRUFLXSlcbiAgICAgICAgICBpZiAoL1tcXHctXS8udGVzdChjKSkge1xuICAgICAgICAgICAgcmVnICs9IGNcbiAgICAgICAgICAgIHN0YXRlID0gQVRUUl9LRVlcbiAgICAgICAgICB9IGVsc2Ugc3RhdGUgPSBBVFRSXG4gICAgICAgIH0gZWxzZSBpZiAoc3RhdGUgPT09IEFUVFJfVkFMVUVfVyAmJiBjID09PSAnXCInKSB7XG4gICAgICAgICAgc3RhdGUgPSBBVFRSX1ZBTFVFX0RRXG4gICAgICAgIH0gZWxzZSBpZiAoc3RhdGUgPT09IEFUVFJfVkFMVUVfVyAmJiBjID09PSBcIidcIikge1xuICAgICAgICAgIHN0YXRlID0gQVRUUl9WQUxVRV9TUVxuICAgICAgICB9IGVsc2UgaWYgKHN0YXRlID09PSBBVFRSX1ZBTFVFX0RRICYmIGMgPT09ICdcIicpIHtcbiAgICAgICAgICByZXMucHVzaChbQVRUUl9WQUxVRSxyZWddLFtBVFRSX0JSRUFLXSlcbiAgICAgICAgICByZWcgPSAnJ1xuICAgICAgICAgIHN0YXRlID0gQVRUUlxuICAgICAgICB9IGVsc2UgaWYgKHN0YXRlID09PSBBVFRSX1ZBTFVFX1NRICYmIGMgPT09IFwiJ1wiKSB7XG4gICAgICAgICAgcmVzLnB1c2goW0FUVFJfVkFMVUUscmVnXSxbQVRUUl9CUkVBS10pXG4gICAgICAgICAgcmVnID0gJydcbiAgICAgICAgICBzdGF0ZSA9IEFUVFJcbiAgICAgICAgfSBlbHNlIGlmIChzdGF0ZSA9PT0gQVRUUl9WQUxVRV9XICYmICEvXFxzLy50ZXN0KGMpKSB7XG4gICAgICAgICAgc3RhdGUgPSBBVFRSX1ZBTFVFXG4gICAgICAgICAgaS0tXG4gICAgICAgIH0gZWxzZSBpZiAoc3RhdGUgPT09IEFUVFJfVkFMVUUgJiYgL1xccy8udGVzdChjKSkge1xuICAgICAgICAgIHJlcy5wdXNoKFtBVFRSX1ZBTFVFLHJlZ10sW0FUVFJfQlJFQUtdKVxuICAgICAgICAgIHJlZyA9ICcnXG4gICAgICAgICAgc3RhdGUgPSBBVFRSXG4gICAgICAgIH0gZWxzZSBpZiAoc3RhdGUgPT09IEFUVFJfVkFMVUUgfHwgc3RhdGUgPT09IEFUVFJfVkFMVUVfU1FcbiAgICAgICAgfHwgc3RhdGUgPT09IEFUVFJfVkFMVUVfRFEpIHtcbiAgICAgICAgICByZWcgKz0gY1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3RhdGUgPT09IFRFWFQgJiYgcmVnLmxlbmd0aCkge1xuICAgICAgICByZXMucHVzaChbVEVYVCxyZWddKVxuICAgICAgICByZWcgPSAnJ1xuICAgICAgfSBlbHNlIGlmIChzdGF0ZSA9PT0gQVRUUl9WQUxVRSAmJiByZWcubGVuZ3RoKSB7XG4gICAgICAgIHJlcy5wdXNoKFtBVFRSX1ZBTFVFLHJlZ10pXG4gICAgICAgIHJlZyA9ICcnXG4gICAgICB9IGVsc2UgaWYgKHN0YXRlID09PSBBVFRSX1ZBTFVFX0RRICYmIHJlZy5sZW5ndGgpIHtcbiAgICAgICAgcmVzLnB1c2goW0FUVFJfVkFMVUUscmVnXSlcbiAgICAgICAgcmVnID0gJydcbiAgICAgIH0gZWxzZSBpZiAoc3RhdGUgPT09IEFUVFJfVkFMVUVfU1EgJiYgcmVnLmxlbmd0aCkge1xuICAgICAgICByZXMucHVzaChbQVRUUl9WQUxVRSxyZWddKVxuICAgICAgICByZWcgPSAnJ1xuICAgICAgfSBlbHNlIGlmIChzdGF0ZSA9PT0gQVRUUl9LRVkpIHtcbiAgICAgICAgcmVzLnB1c2goW0FUVFJfS0VZLHJlZ10pXG4gICAgICAgIHJlZyA9ICcnXG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc3RyZm4gKHgpIHtcbiAgICBpZiAodHlwZW9mIHggPT09ICdmdW5jdGlvbicpIHJldHVybiB4XG4gICAgZWxzZSBpZiAodHlwZW9mIHggPT09ICdzdHJpbmcnKSByZXR1cm4geFxuICAgIGVsc2UgaWYgKHggJiYgdHlwZW9mIHggPT09ICdvYmplY3QnKSByZXR1cm4geFxuICAgIGVsc2UgcmV0dXJuIGNvbmNhdCgnJywgeClcbiAgfVxufVxuXG5mdW5jdGlvbiBxdW90IChzdGF0ZSkge1xuICByZXR1cm4gc3RhdGUgPT09IEFUVFJfVkFMVUVfU1EgfHwgc3RhdGUgPT09IEFUVFJfVkFMVUVfRFFcbn1cblxudmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHlcbmZ1bmN0aW9uIGhhcyAob2JqLCBrZXkpIHsgcmV0dXJuIGhhc093bi5jYWxsKG9iaiwga2V5KSB9XG5cbnZhciBjbG9zZVJFID0gUmVnRXhwKCdeKCcgKyBbXG4gICdhcmVhJywgJ2Jhc2UnLCAnYmFzZWZvbnQnLCAnYmdzb3VuZCcsICdicicsICdjb2wnLCAnY29tbWFuZCcsICdlbWJlZCcsXG4gICdmcmFtZScsICdocicsICdpbWcnLCAnaW5wdXQnLCAnaXNpbmRleCcsICdrZXlnZW4nLCAnbGluaycsICdtZXRhJywgJ3BhcmFtJyxcbiAgJ3NvdXJjZScsICd0cmFjaycsICd3YnInLFxuICAvLyBTVkcgVEFHU1xuICAnYW5pbWF0ZScsICdhbmltYXRlVHJhbnNmb3JtJywgJ2NpcmNsZScsICdjdXJzb3InLCAnZGVzYycsICdlbGxpcHNlJyxcbiAgJ2ZlQmxlbmQnLCAnZmVDb2xvck1hdHJpeCcsICdmZUNvbXBvc2l0ZScsXG4gICdmZUNvbnZvbHZlTWF0cml4JywgJ2ZlRGlmZnVzZUxpZ2h0aW5nJywgJ2ZlRGlzcGxhY2VtZW50TWFwJyxcbiAgJ2ZlRGlzdGFudExpZ2h0JywgJ2ZlRmxvb2QnLCAnZmVGdW5jQScsICdmZUZ1bmNCJywgJ2ZlRnVuY0cnLCAnZmVGdW5jUicsXG4gICdmZUdhdXNzaWFuQmx1cicsICdmZUltYWdlJywgJ2ZlTWVyZ2VOb2RlJywgJ2ZlTW9ycGhvbG9neScsXG4gICdmZU9mZnNldCcsICdmZVBvaW50TGlnaHQnLCAnZmVTcGVjdWxhckxpZ2h0aW5nJywgJ2ZlU3BvdExpZ2h0JywgJ2ZlVGlsZScsXG4gICdmZVR1cmJ1bGVuY2UnLCAnZm9udC1mYWNlLWZvcm1hdCcsICdmb250LWZhY2UtbmFtZScsICdmb250LWZhY2UtdXJpJyxcbiAgJ2dseXBoJywgJ2dseXBoUmVmJywgJ2hrZXJuJywgJ2ltYWdlJywgJ2xpbmUnLCAnbWlzc2luZy1nbHlwaCcsICdtcGF0aCcsXG4gICdwYXRoJywgJ3BvbHlnb24nLCAncG9seWxpbmUnLCAncmVjdCcsICdzZXQnLCAnc3RvcCcsICd0cmVmJywgJ3VzZScsICd2aWV3JyxcbiAgJ3ZrZXJuJ1xuXS5qb2luKCd8JykgKyAnKSg/OltcXC4jXVthLXpBLVowLTlcXHUwMDdGLVxcdUZGRkZfOi1dKykqJCcpXG5mdW5jdGlvbiBzZWxmQ2xvc2luZyAodGFnKSB7IHJldHVybiBjbG9zZVJFLnRlc3QodGFnKSB9XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGlzRnVuY3Rpb25cblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ1xuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uIChmbikge1xuICB2YXIgc3RyaW5nID0gdG9TdHJpbmcuY2FsbChmbilcbiAgcmV0dXJuIHN0cmluZyA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJyB8fFxuICAgICh0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicgJiYgc3RyaW5nICE9PSAnW29iamVjdCBSZWdFeHBdJykgfHxcbiAgICAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgLy8gSUU4IGFuZCBiZWxvd1xuICAgICAoZm4gPT09IHdpbmRvdy5zZXRUaW1lb3V0IHx8XG4gICAgICBmbiA9PT0gd2luZG93LmFsZXJ0IHx8XG4gICAgICBmbiA9PT0gd2luZG93LmNvbmZpcm0gfHxcbiAgICAgIGZuID09PSB3aW5kb3cucHJvbXB0KSlcbn07XG4iLCJtb2R1bGUuZXhwb3J0cz1bXG4gIHtcbiAgICBcImlkXCI6IFwiYWF0cm94XCIsXG4gICAgXCJrZXlcIjogXCIyNjZcIixcbiAgICBcIm5hbWVcIjogXCJBYXRyb3hcIixcbiAgICBcInRpdGxlXCI6IFwidGhlIERhcmtpbiBCbGFkZVwiLFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcIkZpZ2h0ZXJcIixcbiAgICAgIFwiVGFua1wiXG4gICAgXSxcbiAgICBcInN0YXRzXCI6IHtcbiAgICAgIFwiaHBcIjogNTM3LjgsXG4gICAgICBcImhwcGVybGV2ZWxcIjogODUsXG4gICAgICBcIm1wXCI6IDEwNS42LFxuICAgICAgXCJtcHBlcmxldmVsXCI6IDQ1LFxuICAgICAgXCJtb3Zlc3BlZWRcIjogMzQ1LFxuICAgICAgXCJhcm1vclwiOiAyNC4zODQsXG4gICAgICBcImFybW9ycGVybGV2ZWxcIjogMy44LFxuICAgICAgXCJzcGVsbGJsb2NrXCI6IDMyLjEsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAxLjI1LFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiAxNTAsXG4gICAgICBcImhwcmVnZW5cIjogNi41OSxcbiAgICAgIFwiaHByZWdlbnBlcmxldmVsXCI6IDAuNSxcbiAgICAgIFwibXByZWdlblwiOiAwLFxuICAgICAgXCJtcHJlZ2VucGVybGV2ZWxcIjogMCxcbiAgICAgIFwiY3JpdFwiOiAwLFxuICAgICAgXCJjcml0cGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlXCI6IDYwLjM3NixcbiAgICAgIFwiYXR0YWNrZGFtYWdlcGVybGV2ZWxcIjogMy4yLFxuICAgICAgXCJhdHRhY2tzcGVlZG9mZnNldFwiOiAtMC4wNCxcbiAgICAgIFwiYXR0YWNrc3BlZWRwZXJsZXZlbFwiOiAzXG4gICAgfSxcbiAgICBcImljb25cIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL2NoYW1waW9uL0FhdHJveC5wbmdcIixcbiAgICBcInNwcml0ZVwiOiB7XG4gICAgICBcInVybFwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvc3ByaXRlL2NoYW1waW9uMC5wbmdcIixcbiAgICAgIFwieFwiOiAwLFxuICAgICAgXCJ5XCI6IDBcbiAgICB9LFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJBYXRyb3ggaXMgYSBsZWdlbmRhcnkgd2Fycmlvciwgb25lIG9mIG9ubHkgZml2ZSB0aGF0IHJlbWFpbiBvZiBhbiBhbmNpZW50IHJhY2Uga25vd24gYXMgdGhlIERhcmtpbi4gSGUgd2llbGRzIGhpcyBtYXNzaXZlIGJsYWRlIHdpdGggZ3JhY2UgYW5kIHBvaXNlLCBzbGljaW5nIHRocm91Z2ggbGVnaW9ucyBpbiBhIHN0eWxlIHRoYXQgaXMgaHlwbm90aWMgdG8gYmVob2xkLiBXaXRoIGVhY2ggZm9lIGZlbGxlZCwgQWF0cm94J3MgLi4uXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJhaHJpXCIsXG4gICAgXCJrZXlcIjogXCIxMDNcIixcbiAgICBcIm5hbWVcIjogXCJBaHJpXCIsXG4gICAgXCJ0aXRsZVwiOiBcInRoZSBOaW5lLVRhaWxlZCBGb3hcIixcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJNYWdlXCIsXG4gICAgICBcIkFzc2Fzc2luXCJcbiAgICBdLFxuICAgIFwic3RhdHNcIjoge1xuICAgICAgXCJocFwiOiA1MTQuNCxcbiAgICAgIFwiaHBwZXJsZXZlbFwiOiA4MCxcbiAgICAgIFwibXBcIjogMzM0LFxuICAgICAgXCJtcHBlcmxldmVsXCI6IDUwLFxuICAgICAgXCJtb3Zlc3BlZWRcIjogMzMwLFxuICAgICAgXCJhcm1vclwiOiAyMC44OCxcbiAgICAgIFwiYXJtb3JwZXJsZXZlbFwiOiAzLjUsXG4gICAgICBcInNwZWxsYmxvY2tcIjogMzAsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiA1NTAsXG4gICAgICBcImhwcmVnZW5cIjogNi41MDUsXG4gICAgICBcImhwcmVnZW5wZXJsZXZlbFwiOiAwLjYsXG4gICAgICBcIm1wcmVnZW5cIjogNixcbiAgICAgIFwibXByZWdlbnBlcmxldmVsXCI6IDAuOCxcbiAgICAgIFwiY3JpdFwiOiAwLFxuICAgICAgXCJjcml0cGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlXCI6IDUzLjA0LFxuICAgICAgXCJhdHRhY2tkYW1hZ2VwZXJsZXZlbFwiOiAzLFxuICAgICAgXCJhdHRhY2tzcGVlZG9mZnNldFwiOiAtMC4wNjUsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMlxuICAgIH0sXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9jaGFtcGlvbi9BaHJpLnBuZ1wiLFxuICAgIFwic3ByaXRlXCI6IHtcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcHJpdGUvY2hhbXBpb24wLnBuZ1wiLFxuICAgICAgXCJ4XCI6IDQ4LFxuICAgICAgXCJ5XCI6IDBcbiAgICB9LFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJVbmxpa2Ugb3RoZXIgZm94ZXMgdGhhdCByb2FtZWQgdGhlIHdvb2RzIG9mIHNvdXRoZXJuIElvbmlhLCBBaHJpIGhhZCBhbHdheXMgZmVsdCBhIHN0cmFuZ2UgY29ubmVjdGlvbiB0byB0aGUgbWFnaWNhbCB3b3JsZCBhcm91bmQgaGVyOyBhIGNvbm5lY3Rpb24gdGhhdCB3YXMgc29tZWhvdyBpbmNvbXBsZXRlLiBEZWVwIGluc2lkZSwgc2hlIGZlbHQgdGhlIHNraW4gc2hlIGhhZCBiZWVuIGJvcm4gaW50byB3YXMgYW4gaWxsIGZpdCBmb3IgLi4uXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJha2FsaVwiLFxuICAgIFwia2V5XCI6IFwiODRcIixcbiAgICBcIm5hbWVcIjogXCJBa2FsaVwiLFxuICAgIFwidGl0bGVcIjogXCJ0aGUgRmlzdCBvZiBTaGFkb3dcIixcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJBc3Nhc3NpblwiXG4gICAgXSxcbiAgICBcInN0YXRzXCI6IHtcbiAgICAgIFwiaHBcIjogNTg3LjgsXG4gICAgICBcImhwcGVybGV2ZWxcIjogODUsXG4gICAgICBcIm1wXCI6IDIwMCxcbiAgICAgIFwibXBwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJtb3Zlc3BlZWRcIjogMzUwLFxuICAgICAgXCJhcm1vclwiOiAyNi4zOCxcbiAgICAgIFwiYXJtb3JwZXJsZXZlbFwiOiAzLjUsXG4gICAgICBcInNwZWxsYmxvY2tcIjogMzIuMSxcbiAgICAgIFwic3BlbGxibG9ja3BlcmxldmVsXCI6IDEuMjUsXG4gICAgICBcImF0dGFja3JhbmdlXCI6IDEyNSxcbiAgICAgIFwiaHByZWdlblwiOiA4LjM0LFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC42NSxcbiAgICAgIFwibXByZWdlblwiOiA1MCxcbiAgICAgIFwibXByZWdlbnBlcmxldmVsXCI6IDAsXG4gICAgICBcImNyaXRcIjogMCxcbiAgICAgIFwiY3JpdHBlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja2RhbWFnZVwiOiA1OC4zNzYsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDMuMixcbiAgICAgIFwiYXR0YWNrc3BlZWRvZmZzZXRcIjogLTAuMSxcbiAgICAgIFwiYXR0YWNrc3BlZWRwZXJsZXZlbFwiOiAzLjFcbiAgICB9LFxuICAgIFwiaWNvblwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvY2hhbXBpb24vQWthbGkucG5nXCIsXG4gICAgXCJzcHJpdGVcIjoge1xuICAgICAgXCJ1cmxcIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3Nwcml0ZS9jaGFtcGlvbjAucG5nXCIsXG4gICAgICBcInhcIjogOTYsXG4gICAgICBcInlcIjogMFxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZXJlIGV4aXN0cyBhbiBhbmNpZW50IG9yZGVyIG9yaWdpbmF0aW5nIGluIHRoZSBJb25pYW4gSXNsZXMgZGVkaWNhdGVkIHRvIHRoZSBwcmVzZXJ2YXRpb24gb2YgYmFsYW5jZS4gT3JkZXIsIGNoYW9zLCBsaWdodCwgZGFya25lc3MgLS0gYWxsIHRoaW5ncyBtdXN0IGV4aXN0IGluIHBlcmZlY3QgaGFybW9ueSBmb3Igc3VjaCBpcyB0aGUgd2F5IG9mIHRoZSB1bml2ZXJzZS4gVGhpcyBvcmRlciBpcyBrbm93biBhcyB0aGUgS2lua291IC4uLlwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwiYWxpc3RhclwiLFxuICAgIFwia2V5XCI6IFwiMTJcIixcbiAgICBcIm5hbWVcIjogXCJBbGlzdGFyXCIsXG4gICAgXCJ0aXRsZVwiOiBcInRoZSBNaW5vdGF1clwiLFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcIlRhbmtcIixcbiAgICAgIFwiU3VwcG9ydFwiXG4gICAgXSxcbiAgICBcInN0YXRzXCI6IHtcbiAgICAgIFwiaHBcIjogNjEzLjM2LFxuICAgICAgXCJocHBlcmxldmVsXCI6IDEwNixcbiAgICAgIFwibXBcIjogMjc4Ljg0LFxuICAgICAgXCJtcHBlcmxldmVsXCI6IDM4LFxuICAgICAgXCJtb3Zlc3BlZWRcIjogMzMwLFxuICAgICAgXCJhcm1vclwiOiAyNC4zOCxcbiAgICAgIFwiYXJtb3JwZXJsZXZlbFwiOiAzLjUsXG4gICAgICBcInNwZWxsYmxvY2tcIjogMzIuMSxcbiAgICAgIFwic3BlbGxibG9ja3BlcmxldmVsXCI6IDEuMjUsXG4gICAgICBcImF0dGFja3JhbmdlXCI6IDEyNSxcbiAgICAgIFwiaHByZWdlblwiOiA4LjY3NSxcbiAgICAgIFwiaHByZWdlbnBlcmxldmVsXCI6IDAuODUsXG4gICAgICBcIm1wcmVnZW5cIjogOC41LFxuICAgICAgXCJtcHJlZ2VucGVybGV2ZWxcIjogMC44LFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNjEuMTExNixcbiAgICAgIFwiYXR0YWNrZGFtYWdlcGVybGV2ZWxcIjogMy42MixcbiAgICAgIFwiYXR0YWNrc3BlZWRvZmZzZXRcIjogMCxcbiAgICAgIFwiYXR0YWNrc3BlZWRwZXJsZXZlbFwiOiAyLjEyNVxuICAgIH0sXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9jaGFtcGlvbi9BbGlzdGFyLnBuZ1wiLFxuICAgIFwic3ByaXRlXCI6IHtcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcHJpdGUvY2hhbXBpb24wLnBuZ1wiLFxuICAgICAgXCJ4XCI6IDE0NCxcbiAgICAgIFwieVwiOiAwXG4gICAgfSxcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiQXMgdGhlIG1pZ2h0aWVzdCB3YXJyaW9yIHRvIGV2ZXIgZW1lcmdlIGZyb20gdGhlIE1pbm90YXVyIHRyaWJlcyBvZiB0aGUgR3JlYXQgQmFycmllciwgQWxpc3RhciBkZWZlbmRlZCBoaXMgdHJpYmUgZnJvbSBWYWxvcmFuJ3MgbWFueSBkYW5nZXJzOyB0aGF0IGlzLCB1bnRpbCB0aGUgY29taW5nIG9mIHRoZSBOb3hpYW4gYXJteS4gQWxpc3RhciB3YXMgbHVyZWQgZnJvbSBoaXMgdmlsbGFnZSBieSB0aGUgbWFjaGluYXRpb25zIG9mIC4uLlwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwiYW11bXVcIixcbiAgICBcImtleVwiOiBcIjMyXCIsXG4gICAgXCJuYW1lXCI6IFwiQW11bXVcIixcbiAgICBcInRpdGxlXCI6IFwidGhlIFNhZCBNdW1teVwiLFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcIlRhbmtcIixcbiAgICAgIFwiTWFnZVwiXG4gICAgXSxcbiAgICBcInN0YXRzXCI6IHtcbiAgICAgIFwiaHBcIjogNjEzLjEyLFxuICAgICAgXCJocHBlcmxldmVsXCI6IDg0LFxuICAgICAgXCJtcFwiOiAyODcuMixcbiAgICAgIFwibXBwZXJsZXZlbFwiOiA0MCxcbiAgICAgIFwibW92ZXNwZWVkXCI6IDMzNSxcbiAgICAgIFwiYXJtb3JcIjogMjMuNTQ0LFxuICAgICAgXCJhcm1vcnBlcmxldmVsXCI6IDMuOCxcbiAgICAgIFwic3BlbGxibG9ja1wiOiAzMi4xLFxuICAgICAgXCJzcGVsbGJsb2NrcGVybGV2ZWxcIjogMS4yNSxcbiAgICAgIFwiYXR0YWNrcmFuZ2VcIjogMTI1LFxuICAgICAgXCJocHJlZ2VuXCI6IDguODc1LFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC44NSxcbiAgICAgIFwibXByZWdlblwiOiA3LjM4LFxuICAgICAgXCJtcHJlZ2VucGVybGV2ZWxcIjogMC41MjUsXG4gICAgICBcImNyaXRcIjogMCxcbiAgICAgIFwiY3JpdHBlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja2RhbWFnZVwiOiA1My4zODQsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDMuOCxcbiAgICAgIFwiYXR0YWNrc3BlZWRvZmZzZXRcIjogLTAuMDIsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMi4xOFxuICAgIH0sXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9jaGFtcGlvbi9BbXVtdS5wbmdcIixcbiAgICBcInNwcml0ZVwiOiB7XG4gICAgICBcInVybFwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvc3ByaXRlL2NoYW1waW9uMC5wbmdcIixcbiAgICAgIFwieFwiOiAxOTIsXG4gICAgICBcInlcIjogMFxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIicnU29saXR1ZGUgY2FuIGJlIGxvbmVsaWVyIHRoYW4gZGVhdGguJyc8YnI+PGJyPkEgbG9uZWx5IGFuZCBtZWxhbmNob2x5IHNvdWwgZnJvbSBhbmNpZW50IFNodXJpbWEsIEFtdW11IHJvYW1zIHRoZSB3b3JsZCBpbiBzZWFyY2ggb2YgYSBmcmllbmQuIEN1cnNlZCBieSBhbiBhbmNpZW50IHNwZWxsLCBoZSBpcyBkb29tZWQgdG8gcmVtYWluIGFsb25lIGZvcmV2ZXIsIGFzIGhpcyB0b3VjaCBpcyBkZWF0aCBhbmQgaGlzIGFmZmVjdGlvbiAuLi5cIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcImFuaXZpYVwiLFxuICAgIFwia2V5XCI6IFwiMzRcIixcbiAgICBcIm5hbWVcIjogXCJBbml2aWFcIixcbiAgICBcInRpdGxlXCI6IFwidGhlIENyeW9waG9lbml4XCIsXG4gICAgXCJ0YWdzXCI6IFtcbiAgICAgIFwiTWFnZVwiLFxuICAgICAgXCJTdXBwb3J0XCJcbiAgICBdLFxuICAgIFwic3RhdHNcIjoge1xuICAgICAgXCJocFwiOiA0NjcuNixcbiAgICAgIFwiaHBwZXJsZXZlbFwiOiA3MCxcbiAgICAgIFwibXBcIjogMzk2LjA0LFxuICAgICAgXCJtcHBlcmxldmVsXCI6IDUwLFxuICAgICAgXCJtb3Zlc3BlZWRcIjogMzI1LFxuICAgICAgXCJhcm1vclwiOiAyMS4yMixcbiAgICAgIFwiYXJtb3JwZXJsZXZlbFwiOiA0LFxuICAgICAgXCJzcGVsbGJsb2NrXCI6IDMwLFxuICAgICAgXCJzcGVsbGJsb2NrcGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrcmFuZ2VcIjogNjAwLFxuICAgICAgXCJocHJlZ2VuXCI6IDUuNTcsXG4gICAgICBcImhwcmVnZW5wZXJsZXZlbFwiOiAwLjU1LFxuICAgICAgXCJtcHJlZ2VuXCI6IDYsXG4gICAgICBcIm1wcmVnZW5wZXJsZXZlbFwiOiAwLjgsXG4gICAgICBcImNyaXRcIjogMCxcbiAgICAgIFwiY3JpdHBlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja2RhbWFnZVwiOiA1MS4zNzYsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDMuMixcbiAgICAgIFwiYXR0YWNrc3BlZWRvZmZzZXRcIjogMCxcbiAgICAgIFwiYXR0YWNrc3BlZWRwZXJsZXZlbFwiOiAxLjY4XG4gICAgfSxcbiAgICBcImljb25cIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL2NoYW1waW9uL0FuaXZpYS5wbmdcIixcbiAgICBcInNwcml0ZVwiOiB7XG4gICAgICBcInVybFwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvc3ByaXRlL2NoYW1waW9uMC5wbmdcIixcbiAgICAgIFwieFwiOiAyNDAsXG4gICAgICBcInlcIjogMFxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIkFuaXZpYSBpcyBhIGJlaW5nIG9mIHRoZSBjb2xkZXN0IHdpbnRlciwgYSBteXN0aWNhbCBlbWJvZGltZW50IG9mIGljZSBtYWdpYywgYW5kIGFuIGFuY2llbnQgcHJvdGVjdG9yIG9mIHRoZSBGcmVsam9yZC4gU2hlIGNvbW1hbmRzIGFsbCB0aGUgcG93ZXIgYW5kIGZ1cnkgb2YgdGhlIGxhbmQgaXRzZWxmLCBjYWxsaW5nIHRoZSBzbm93IGFuZCBiaXR0ZXIgd2luZCB0byBkZWZlbmQgaGVyIGhvbWUgZnJvbSB0aG9zZSB3aG8gd291bGQgLi4uXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJhbm5pZVwiLFxuICAgIFwia2V5XCI6IFwiMVwiLFxuICAgIFwibmFtZVwiOiBcIkFubmllXCIsXG4gICAgXCJ0aXRsZVwiOiBcInRoZSBEYXJrIENoaWxkXCIsXG4gICAgXCJ0YWdzXCI6IFtcbiAgICAgIFwiTWFnZVwiXG4gICAgXSxcbiAgICBcInN0YXRzXCI6IHtcbiAgICAgIFwiaHBcIjogNTExLjY4LFxuICAgICAgXCJocHBlcmxldmVsXCI6IDc2LFxuICAgICAgXCJtcFwiOiAzMzQsXG4gICAgICBcIm1wcGVybGV2ZWxcIjogNTAsXG4gICAgICBcIm1vdmVzcGVlZFwiOiAzMzUsXG4gICAgICBcImFybW9yXCI6IDE5LjIyLFxuICAgICAgXCJhcm1vcnBlcmxldmVsXCI6IDQsXG4gICAgICBcInNwZWxsYmxvY2tcIjogMzAsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiA1NzUsXG4gICAgICBcImhwcmVnZW5cIjogNS40MixcbiAgICAgIFwiaHByZWdlbnBlcmxldmVsXCI6IDAuNTUsXG4gICAgICBcIm1wcmVnZW5cIjogNixcbiAgICAgIFwibXByZWdlbnBlcmxldmVsXCI6IDAuOCxcbiAgICAgIFwiY3JpdFwiOiAwLFxuICAgICAgXCJjcml0cGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlXCI6IDUwLjQxLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VwZXJsZXZlbFwiOiAyLjYyNSxcbiAgICAgIFwiYXR0YWNrc3BlZWRvZmZzZXRcIjogMC4wOCxcbiAgICAgIFwiYXR0YWNrc3BlZWRwZXJsZXZlbFwiOiAxLjM2XG4gICAgfSxcbiAgICBcImljb25cIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL2NoYW1waW9uL0FubmllLnBuZ1wiLFxuICAgIFwic3ByaXRlXCI6IHtcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcHJpdGUvY2hhbXBpb24wLnBuZ1wiLFxuICAgICAgXCJ4XCI6IDI4OCxcbiAgICAgIFwieVwiOiAwXG4gICAgfSxcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlcmUgaGF2ZSBhbHdheXMgYmVlbiB0aG9zZSB3aXRoaW4gTm94dXMgd2hvIGRpZCBub3QgYWdyZWUgd2l0aCB0aGUgZXZpbHMgcGVycGV0cmF0ZWQgYnkgdGhlIE5veGlhbiBIaWdoIENvbW1hbmQuIFRoZSBIaWdoIENvbW1hbmQgaGFkIGp1c3QgcHV0IGRvd24gYSBjb3VwIGF0dGVtcHQgZnJvbSB0aGUgc2VsZi1wcm9jbGFpbWVkIENyb3duIFByaW5jZSBSYXNjaGFsbGlvbiwgYW5kIGEgY3JhY2tkb3duIG9uIGFueSBmb3JtIG9mIC4uLlwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwiYXNoZVwiLFxuICAgIFwia2V5XCI6IFwiMjJcIixcbiAgICBcIm5hbWVcIjogXCJBc2hlXCIsXG4gICAgXCJ0aXRsZVwiOiBcInRoZSBGcm9zdCBBcmNoZXJcIixcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJNYXJrc21hblwiLFxuICAgICAgXCJTdXBwb3J0XCJcbiAgICBdLFxuICAgIFwic3RhdHNcIjoge1xuICAgICAgXCJocFwiOiA1MjcuNzIsXG4gICAgICBcImhwcGVybGV2ZWxcIjogNzksXG4gICAgICBcIm1wXCI6IDI4MCxcbiAgICAgIFwibXBwZXJsZXZlbFwiOiAzMixcbiAgICAgIFwibW92ZXNwZWVkXCI6IDMyNSxcbiAgICAgIFwiYXJtb3JcIjogMjEuMjEyLFxuICAgICAgXCJhcm1vcnBlcmxldmVsXCI6IDMuNCxcbiAgICAgIFwic3BlbGxibG9ja1wiOiAzMCxcbiAgICAgIFwic3BlbGxibG9ja3BlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja3JhbmdlXCI6IDYwMCxcbiAgICAgIFwiaHByZWdlblwiOiA1LjQyLFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC41NSxcbiAgICAgIFwibXByZWdlblwiOiA2Ljk3LFxuICAgICAgXCJtcHJlZ2VucGVybGV2ZWxcIjogMC40LFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNTYuNTA4LFxuICAgICAgXCJhdHRhY2tkYW1hZ2VwZXJsZXZlbFwiOiAyLjI2LFxuICAgICAgXCJhdHRhY2tzcGVlZG9mZnNldFwiOiAtMC4wNSxcbiAgICAgIFwiYXR0YWNrc3BlZWRwZXJsZXZlbFwiOiAzLjMzXG4gICAgfSxcbiAgICBcImljb25cIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL2NoYW1waW9uL0FzaGUucG5nXCIsXG4gICAgXCJzcHJpdGVcIjoge1xuICAgICAgXCJ1cmxcIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3Nwcml0ZS9jaGFtcGlvbjAucG5nXCIsXG4gICAgICBcInhcIjogMzM2LFxuICAgICAgXCJ5XCI6IDBcbiAgICB9LFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJXaXRoIGVhY2ggYXJyb3cgc2hlIGZpcmVzIGZyb20gaGVyIGFuY2llbnQgaWNlLWVuY2hhbnRlZCBib3csIEFzaGUgcHJvdmVzIHNoZSBpcyBhIG1hc3RlciBhcmNoZXIuIFNoZSBjaG9vc2VzIGVhY2ggdGFyZ2V0IGNhcmVmdWxseSwgd2FpdHMgZm9yIHRoZSByaWdodCBtb21lbnQsIGFuZCB0aGVuIHN0cmlrZXMgd2l0aCBwb3dlciBhbmQgcHJlY2lzaW9uLiBJdCBpcyB3aXRoIHRoaXMgc2FtZSB2aXNpb24gYW5kIGZvY3VzIHRoYXQgc2hlIC4uLlwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwiYXVyZWxpb25zb2xcIixcbiAgICBcImtleVwiOiBcIjEzNlwiLFxuICAgIFwibmFtZVwiOiBcIkF1cmVsaW9uIFNvbFwiLFxuICAgIFwidGl0bGVcIjogXCJUaGUgU3RhciBGb3JnZXJcIixcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJNYWdlXCIsXG4gICAgICBcIkZpZ2h0ZXJcIlxuICAgIF0sXG4gICAgXCJzdGF0c1wiOiB7XG4gICAgICBcImhwXCI6IDU1MCxcbiAgICAgIFwiaHBwZXJsZXZlbFwiOiA4MCxcbiAgICAgIFwibXBcIjogMzUwLFxuICAgICAgXCJtcHBlcmxldmVsXCI6IDUwLFxuICAgICAgXCJtb3Zlc3BlZWRcIjogMzI1LFxuICAgICAgXCJhcm1vclwiOiAxOSxcbiAgICAgIFwiYXJtb3JwZXJsZXZlbFwiOiAzLjYsXG4gICAgICBcInNwZWxsYmxvY2tcIjogMzAsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiA1NTAsXG4gICAgICBcImhwcmVnZW5cIjogNi41LFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC42LFxuICAgICAgXCJtcHJlZ2VuXCI6IDYsXG4gICAgICBcIm1wcmVnZW5wZXJsZXZlbFwiOiAwLjgsXG4gICAgICBcImNyaXRcIjogMCxcbiAgICAgIFwiY3JpdHBlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja2RhbWFnZVwiOiA1NyxcbiAgICAgIFwiYXR0YWNrZGFtYWdlcGVybGV2ZWxcIjogMy4yLFxuICAgICAgXCJhdHRhY2tzcGVlZG9mZnNldFwiOiAwLFxuICAgICAgXCJhdHRhY2tzcGVlZHBlcmxldmVsXCI6IDEuMzZcbiAgICB9LFxuICAgIFwiaWNvblwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvY2hhbXBpb24vQXVyZWxpb25Tb2wucG5nXCIsXG4gICAgXCJzcHJpdGVcIjoge1xuICAgICAgXCJ1cmxcIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3Nwcml0ZS9jaGFtcGlvbjAucG5nXCIsXG4gICAgICBcInhcIjogMzg0LFxuICAgICAgXCJ5XCI6IDBcbiAgICB9LFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJBdXJlbGlvbiBTb2zCoG9uY2XCoGdyYWNlZCB0aGUgdmFzdCBlbXB0aW5lc3Mgb2YgdGhlIGNvc21vcyB3aXRoIGNlbGVzdGlhbCB3b25kZXJzIG9mIGhpcyBvd24gZGV2aXNpbmcuIE5vdywgaGUgaXMgZm9yY2VkIHRvIHdpZWxkIGhpcyBhd2Vzb21lIHBvd2VyIGF0IHRoZSBiZWhlc3Qgb2YgYSBzcGFjZS1mYXJpbmcgZW1waXJlIHRoYXQgdHJpY2tlZCBoaW0gaW50byBzZXJ2aXR1ZGUuIERlc2lyaW5nIGEgcmV0dXJuIHRvIGhpcyAuLi5cIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcImF6aXJcIixcbiAgICBcImtleVwiOiBcIjI2OFwiLFxuICAgIFwibmFtZVwiOiBcIkF6aXJcIixcbiAgICBcInRpdGxlXCI6IFwidGhlIEVtcGVyb3Igb2YgdGhlIFNhbmRzXCIsXG4gICAgXCJ0YWdzXCI6IFtcbiAgICAgIFwiTWFnZVwiLFxuICAgICAgXCJNYXJrc21hblwiXG4gICAgXSxcbiAgICBcInN0YXRzXCI6IHtcbiAgICAgIFwiaHBcIjogNTI0LjQsXG4gICAgICBcImhwcGVybGV2ZWxcIjogODAsXG4gICAgICBcIm1wXCI6IDM1MC41NixcbiAgICAgIFwibXBwZXJsZXZlbFwiOiA0MixcbiAgICAgIFwibW92ZXNwZWVkXCI6IDMyNSxcbiAgICAgIFwiYXJtb3JcIjogMTkuMDQsXG4gICAgICBcImFybW9ycGVybGV2ZWxcIjogMyxcbiAgICAgIFwic3BlbGxibG9ja1wiOiAzMCxcbiAgICAgIFwic3BlbGxibG9ja3BlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja3JhbmdlXCI6IDUyNSxcbiAgICAgIFwiaHByZWdlblwiOiA2LjkyLFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC41NSxcbiAgICAgIFwibXByZWdlblwiOiA2LFxuICAgICAgXCJtcHJlZ2VucGVybGV2ZWxcIjogMC44LFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNTIsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDIuOCxcbiAgICAgIFwiYXR0YWNrc3BlZWRvZmZzZXRcIjogLTAuMDIsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMS41XG4gICAgfSxcbiAgICBcImljb25cIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL2NoYW1waW9uL0F6aXIucG5nXCIsXG4gICAgXCJzcHJpdGVcIjoge1xuICAgICAgXCJ1cmxcIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3Nwcml0ZS9jaGFtcGlvbjAucG5nXCIsXG4gICAgICBcInhcIjogNDMyLFxuICAgICAgXCJ5XCI6IDBcbiAgICB9LFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCInJ1NodXJpbWEgd2FzIG9uY2UgdGhlIGdsb3J5IG9mIFJ1bmV0ZXJyYS4gSSB3aWxsIG1ha2UgaXQgc28gYWdhaW4uJyc8YnI+PGJyPkF6aXIgd2FzIGEgbW9ydGFsIGVtcGVyb3Igb2YgU2h1cmltYSBpbiBhIGZhciBkaXN0YW50IGFnZSwgYSBwcm91ZCBtYW4gd2hvIHN0b29kIGF0IHRoZSBjdXNwIG9mIGltbW9ydGFsaXR5LiBIaXMgaHVicmlzIHNhdyBoaW0gYmV0cmF5ZWQgYW5kIG11cmRlcmVkIGF0IHRoZSBtb21lbnQgb2YgaGlzIC4uLlwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwiYmFyZFwiLFxuICAgIFwia2V5XCI6IFwiNDMyXCIsXG4gICAgXCJuYW1lXCI6IFwiQmFyZFwiLFxuICAgIFwidGl0bGVcIjogXCJ0aGUgV2FuZGVyaW5nIENhcmV0YWtlclwiLFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcIlN1cHBvcnRcIixcbiAgICAgIFwiTWFnZVwiXG4gICAgXSxcbiAgICBcInN0YXRzXCI6IHtcbiAgICAgIFwiaHBcIjogNTM1LFxuICAgICAgXCJocHBlcmxldmVsXCI6IDg5LFxuICAgICAgXCJtcFwiOiAzNTAsXG4gICAgICBcIm1wcGVybGV2ZWxcIjogNTAsXG4gICAgICBcIm1vdmVzcGVlZFwiOiAzMzAsXG4gICAgICBcImFybW9yXCI6IDI1LFxuICAgICAgXCJhcm1vcnBlcmxldmVsXCI6IDQsXG4gICAgICBcInNwZWxsYmxvY2tcIjogMzAsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiA1MDAsXG4gICAgICBcImhwcmVnZW5cIjogNS40LFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC41NSxcbiAgICAgIFwibXByZWdlblwiOiA2LFxuICAgICAgXCJtcHJlZ2VucGVybGV2ZWxcIjogMC40NSxcbiAgICAgIFwiY3JpdFwiOiAwLFxuICAgICAgXCJjcml0cGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlXCI6IDUyLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VwZXJsZXZlbFwiOiAzLFxuICAgICAgXCJhdHRhY2tzcGVlZG9mZnNldFwiOiAwLFxuICAgICAgXCJhdHRhY2tzcGVlZHBlcmxldmVsXCI6IDJcbiAgICB9LFxuICAgIFwiaWNvblwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvY2hhbXBpb24vQmFyZC5wbmdcIixcbiAgICBcInNwcml0ZVwiOiB7XG4gICAgICBcInVybFwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvc3ByaXRlL2NoYW1waW9uMC5wbmdcIixcbiAgICAgIFwieFwiOiAwLFxuICAgICAgXCJ5XCI6IDQ4XG4gICAgfSxcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiQmFyZCB0cmF2ZWxzIHRocm91Z2ggcmVhbG1zIGJleW9uZCB0aGUgaW1hZ2luYXRpb24gb2YgbW9ydGFsIGJlaW5ncy4gU29tZSBvZiBWYWxvcmFuJ3MgZ3JlYXRlc3Qgc2Nob2xhcnMgaGF2ZSBzcGVudCB0aGVpciBsaXZlcyB0cnlpbmcgdG8gdW5kZXJzdGFuZCB0aGUgbXlzdGVyaWVzIGhlIGVtYm9kaWVzLiBUaGlzIGVuaWdtYXRpYyBzcGlyaXQgaGFzIGJlZW4gZ2l2ZW4gbWFueSBuYW1lcyB0aHJvdWdob3V0IHRoZSBoaXN0b3J5IG9mIC4uLlwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwiYmxpdHpjcmFua1wiLFxuICAgIFwia2V5XCI6IFwiNTNcIixcbiAgICBcIm5hbWVcIjogXCJCbGl0emNyYW5rXCIsXG4gICAgXCJ0aXRsZVwiOiBcInRoZSBHcmVhdCBTdGVhbSBHb2xlbVwiLFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcIlRhbmtcIixcbiAgICAgIFwiRmlnaHRlclwiXG4gICAgXSxcbiAgICBcInN0YXRzXCI6IHtcbiAgICAgIFwiaHBcIjogNTgyLjYsXG4gICAgICBcImhwcGVybGV2ZWxcIjogOTUsXG4gICAgICBcIm1wXCI6IDI2Ny4yLFxuICAgICAgXCJtcHBlcmxldmVsXCI6IDQwLFxuICAgICAgXCJtb3Zlc3BlZWRcIjogMzI1LFxuICAgICAgXCJhcm1vclwiOiAyNC4zOCxcbiAgICAgIFwiYXJtb3JwZXJsZXZlbFwiOiA0LFxuICAgICAgXCJzcGVsbGJsb2NrXCI6IDMyLjEsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAxLjI1LFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiAxMjUsXG4gICAgICBcImhwcmVnZW5cIjogOC41MSxcbiAgICAgIFwiaHByZWdlbnBlcmxldmVsXCI6IDAuNzUsXG4gICAgICBcIm1wcmVnZW5cIjogOC41LFxuICAgICAgXCJtcHJlZ2VucGVybGV2ZWxcIjogMC44LFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNjEuNTQsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDMuNSxcbiAgICAgIFwiYXR0YWNrc3BlZWRvZmZzZXRcIjogMCxcbiAgICAgIFwiYXR0YWNrc3BlZWRwZXJsZXZlbFwiOiAxLjEzXG4gICAgfSxcbiAgICBcImljb25cIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL2NoYW1waW9uL0JsaXR6Y3JhbmsucG5nXCIsXG4gICAgXCJzcHJpdGVcIjoge1xuICAgICAgXCJ1cmxcIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3Nwcml0ZS9jaGFtcGlvbjAucG5nXCIsXG4gICAgICBcInhcIjogNDgsXG4gICAgICBcInlcIjogNDhcbiAgICB9LFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJaYXVuIGlzIGEgcGxhY2Ugd2hlcmUgYm90aCBtYWdpYyBhbmQgc2NpZW5jZSBoYXZlIGdvbmUgYXdyeSwgYW5kIHRoZSB1bmNoZWNrZWQgbmF0dXJlIG9mIGV4cGVyaW1lbnRhdGlvbiBoYXMgdGFrZW4gaXRzIHRvbGwuIEhvd2V2ZXIsIFphdW4ncyBsZW5pZW50IHJlc3RyaWN0aW9ucyBhbGxvdyB0aGVpciByZXNlYXJjaGVycyBhbmQgaW52ZW50b3JzIHRoZSBsZWV3YXkgdG8gcHVzaCB0aGUgYm91bmRzIG9mIHNjaWVuY2UgYXQgYW4gLi4uXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJicmFuZFwiLFxuICAgIFwia2V5XCI6IFwiNjNcIixcbiAgICBcIm5hbWVcIjogXCJCcmFuZFwiLFxuICAgIFwidGl0bGVcIjogXCJ0aGUgQnVybmluZyBWZW5nZWFuY2VcIixcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJNYWdlXCJcbiAgICBdLFxuICAgIFwic3RhdHNcIjoge1xuICAgICAgXCJocFwiOiA1MDcuNjgsXG4gICAgICBcImhwcGVybGV2ZWxcIjogNzYsXG4gICAgICBcIm1wXCI6IDM3NS42LFxuICAgICAgXCJtcHBlcmxldmVsXCI6IDQyLFxuICAgICAgXCJtb3Zlc3BlZWRcIjogMzQwLFxuICAgICAgXCJhcm1vclwiOiAyMS44OCxcbiAgICAgIFwiYXJtb3JwZXJsZXZlbFwiOiAzLjUsXG4gICAgICBcInNwZWxsYmxvY2tcIjogMzAsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiA1NTAsXG4gICAgICBcImhwcmVnZW5cIjogNS40MixcbiAgICAgIFwiaHByZWdlbnBlcmxldmVsXCI6IDAuNTUsXG4gICAgICBcIm1wcmVnZW5cIjogOC4wMDUsXG4gICAgICBcIm1wcmVnZW5wZXJsZXZlbFwiOiAwLjYsXG4gICAgICBcImNyaXRcIjogMCxcbiAgICAgIFwiY3JpdHBlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja2RhbWFnZVwiOiA1Ny4wNCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlcGVybGV2ZWxcIjogMyxcbiAgICAgIFwiYXR0YWNrc3BlZWRvZmZzZXRcIjogMCxcbiAgICAgIFwiYXR0YWNrc3BlZWRwZXJsZXZlbFwiOiAxLjM2XG4gICAgfSxcbiAgICBcImljb25cIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL2NoYW1waW9uL0JyYW5kLnBuZ1wiLFxuICAgIFwic3ByaXRlXCI6IHtcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcHJpdGUvY2hhbXBpb24wLnBuZ1wiLFxuICAgICAgXCJ4XCI6IDk2LFxuICAgICAgXCJ5XCI6IDQ4XG4gICAgfSxcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiSW4gYSBmYXJhd2F5IHBsYWNlIGtub3duIGFzIExva2ZhciB0aGVyZSB3YXMgYSBzZWFmYXJpbmcgbWFyYXVkZXIgY2FsbGVkIEtlZ2FuIFJvZGhlLiBBcyB3YXMgaGlzIHBlb3BsZSdzIHdheSwgS2VnYW4gc2FpbGVkIGZhciBhbmQgd2lkZSB3aXRoIGhpcyBmZWxsb3dzLCBzdGVhbGluZyB0cmVhc3VyZXMgZnJvbSB0aG9zZSB1bmx1Y2t5IGVub3VnaCB0byBjYXRjaCB0aGVpciBhdHRlbnRpb24uIFRvIHNvbWUsIGhlIHdhcyBhIC4uLlwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwiYnJhdW1cIixcbiAgICBcImtleVwiOiBcIjIwMVwiLFxuICAgIFwibmFtZVwiOiBcIkJyYXVtXCIsXG4gICAgXCJ0aXRsZVwiOiBcInRoZSBIZWFydCBvZiB0aGUgRnJlbGpvcmRcIixcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJTdXBwb3J0XCIsXG4gICAgICBcIlRhbmtcIlxuICAgIF0sXG4gICAgXCJzdGF0c1wiOiB7XG4gICAgICBcImhwXCI6IDU3Ni4xNixcbiAgICAgIFwiaHBwZXJsZXZlbFwiOiA4NyxcbiAgICAgIFwibXBcIjogMzEwLjYsXG4gICAgICBcIm1wcGVybGV2ZWxcIjogNDUsXG4gICAgICBcIm1vdmVzcGVlZFwiOiAzMzUsXG4gICAgICBcImFybW9yXCI6IDI2LjcyLFxuICAgICAgXCJhcm1vcnBlcmxldmVsXCI6IDQuNSxcbiAgICAgIFwic3BlbGxibG9ja1wiOiAzMi4xLFxuICAgICAgXCJzcGVsbGJsb2NrcGVybGV2ZWxcIjogMS4yNSxcbiAgICAgIFwiYXR0YWNrcmFuZ2VcIjogMTI1LFxuICAgICAgXCJocHJlZ2VuXCI6IDguMTgsXG4gICAgICBcImhwcmVnZW5wZXJsZXZlbFwiOiAxLFxuICAgICAgXCJtcHJlZ2VuXCI6IDYsXG4gICAgICBcIm1wcmVnZW5wZXJsZXZlbFwiOiAwLjgsXG4gICAgICBcImNyaXRcIjogMCxcbiAgICAgIFwiY3JpdHBlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja2RhbWFnZVwiOiA1NS4zNzYsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDMuMixcbiAgICAgIFwiYXR0YWNrc3BlZWRvZmZzZXRcIjogLTAuMDMsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMy41XG4gICAgfSxcbiAgICBcImljb25cIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL2NoYW1waW9uL0JyYXVtLnBuZ1wiLFxuICAgIFwic3ByaXRlXCI6IHtcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcHJpdGUvY2hhbXBpb24wLnBuZ1wiLFxuICAgICAgXCJ4XCI6IDE0NCxcbiAgICAgIFwieVwiOiA0OFxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIicnV291bGQgeW91IGxpa2UgYSBiZWR0aW1lIHN0b3J5PycnPGJyPjxicj4nJ0dyYW5kbWEsIEknbSB0b28gb2xkIGZvciB0aGF0LicnPGJyPjxicj4nJ1lvdSdyZSBuZXZlciB0b28gb2xkIHRvIGJlIHRvbGQgYSBzdG9yeS4nJzxicj48YnI+VGhlIGdpcmwgcmVsdWN0YW50bHkgY3Jhd2xzIGludG8gYmVkIGFuZCB3YWl0cywga25vd2luZyBzaGUgd29uJ3Qgd2luIHRoaXMgYmF0dGxlLiBBIGJpdHRlciB3aW5kIGhvd2xzIG91dHNpZGUsIC4uLlwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwiY2FpdGx5blwiLFxuICAgIFwia2V5XCI6IFwiNTFcIixcbiAgICBcIm5hbWVcIjogXCJDYWl0bHluXCIsXG4gICAgXCJ0aXRsZVwiOiBcInRoZSBTaGVyaWZmIG9mIFBpbHRvdmVyXCIsXG4gICAgXCJ0YWdzXCI6IFtcbiAgICAgIFwiTWFya3NtYW5cIlxuICAgIF0sXG4gICAgXCJzdGF0c1wiOiB7XG4gICAgICBcImhwXCI6IDUyNC40LFxuICAgICAgXCJocHBlcmxldmVsXCI6IDgwLFxuICAgICAgXCJtcFwiOiAzMTMuNyxcbiAgICAgIFwibXBwZXJsZXZlbFwiOiAzNSxcbiAgICAgIFwibW92ZXNwZWVkXCI6IDMyNSxcbiAgICAgIFwiYXJtb3JcIjogMjIuODgsXG4gICAgICBcImFybW9ycGVybGV2ZWxcIjogMy41LFxuICAgICAgXCJzcGVsbGJsb2NrXCI6IDMwLFxuICAgICAgXCJzcGVsbGJsb2NrcGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrcmFuZ2VcIjogNjUwLFxuICAgICAgXCJocHJlZ2VuXCI6IDUuNjcsXG4gICAgICBcImhwcmVnZW5wZXJsZXZlbFwiOiAwLjU1LFxuICAgICAgXCJtcHJlZ2VuXCI6IDcuNCxcbiAgICAgIFwibXByZWdlbnBlcmxldmVsXCI6IDAuNTUsXG4gICAgICBcImNyaXRcIjogMCxcbiAgICAgIFwiY3JpdHBlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja2RhbWFnZVwiOiA1My42NixcbiAgICAgIFwiYXR0YWNrZGFtYWdlcGVybGV2ZWxcIjogMi4xOCxcbiAgICAgIFwiYXR0YWNrc3BlZWRvZmZzZXRcIjogMC4xLFxuICAgICAgXCJhdHRhY2tzcGVlZHBlcmxldmVsXCI6IDRcbiAgICB9LFxuICAgIFwiaWNvblwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvY2hhbXBpb24vQ2FpdGx5bi5wbmdcIixcbiAgICBcInNwcml0ZVwiOiB7XG4gICAgICBcInVybFwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvc3ByaXRlL2NoYW1waW9uMC5wbmdcIixcbiAgICAgIFwieFwiOiAxOTIsXG4gICAgICBcInlcIjogNDhcbiAgICB9LFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCInJ0dvIGFoZWFkLCBydW4uIEknbGwgZ2l2ZSB5b3UgYSBmaXZlIG1pbnV0ZSBoZWFkIHN0YXJ0LicnPGJyPjxicj5PbmUgb2YgdGhlIHJlYXNvbnMgUGlsdG92ZXIgaXMga25vd24gYXMgdGhlIENpdHkgb2YgUHJvZ3Jlc3MgaXMgYmVjYXVzZSBpdCBoYXMgYW4gZXh0cmFvcmRpbmFyaWx5IGxvdyBjcmltZSByYXRlLiBUaGlzIGhhc24ndCBhbHdheXMgYmVlbiB0aGUgY2FzZTsgYnJpZ2FuZHMgYW5kIHRoaWV2ZXMgb2YgYWxsIHNvcnRzIC4uLlwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwiY2Fzc2lvcGVpYVwiLFxuICAgIFwia2V5XCI6IFwiNjlcIixcbiAgICBcIm5hbWVcIjogXCJDYXNzaW9wZWlhXCIsXG4gICAgXCJ0aXRsZVwiOiBcInRoZSBTZXJwZW50J3MgRW1icmFjZVwiLFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcIk1hZ2VcIlxuICAgIF0sXG4gICAgXCJzdGF0c1wiOiB7XG4gICAgICBcImhwXCI6IDUyNSxcbiAgICAgIFwiaHBwZXJsZXZlbFwiOiA3NSxcbiAgICAgIFwibXBcIjogMzc1LFxuICAgICAgXCJtcHBlcmxldmVsXCI6IDYwLFxuICAgICAgXCJtb3Zlc3BlZWRcIjogMzI4LFxuICAgICAgXCJhcm1vclwiOiAyNSxcbiAgICAgIFwiYXJtb3JwZXJsZXZlbFwiOiAzLjUsXG4gICAgICBcInNwZWxsYmxvY2tcIjogMzAsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiA1NTAsXG4gICAgICBcImhwcmVnZW5cIjogNS41LFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC41LFxuICAgICAgXCJtcHJlZ2VuXCI6IDYsXG4gICAgICBcIm1wcmVnZW5wZXJsZXZlbFwiOiAwLjgsXG4gICAgICBcImNyaXRcIjogMCxcbiAgICAgIFwiY3JpdHBlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja2RhbWFnZVwiOiA1MyxcbiAgICAgIFwiYXR0YWNrZGFtYWdlcGVybGV2ZWxcIjogMyxcbiAgICAgIFwiYXR0YWNrc3BlZWRvZmZzZXRcIjogLTAuMDM0LFxuICAgICAgXCJhdHRhY2tzcGVlZHBlcmxldmVsXCI6IDEuNVxuICAgIH0sXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9jaGFtcGlvbi9DYXNzaW9wZWlhLnBuZ1wiLFxuICAgIFwic3ByaXRlXCI6IHtcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcHJpdGUvY2hhbXBpb24wLnBuZ1wiLFxuICAgICAgXCJ4XCI6IDI0MCxcbiAgICAgIFwieVwiOiA0OFxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIkNhc3Npb3BlaWEgaXMgYSB0ZXJyaWZ5aW5nIGNyZWF0dXJlIC0gaGFsZiB3b21hbiwgaGFsZiBzbmFrZSAtIHdob3NlIHNsaWdodGVzdCBnbGFuY2UgYnJpbmdzIGRlYXRoLiBUaGUgeW91bmdlc3QgZGF1Z2h0ZXIgb2Ygb25lIG9mIE5veHVzJyBtb3N0IGluZmx1ZW50aWFsIGZhbWlsaWVzLCBzaGUgd2FzIG9uY2UgYSBiZWF1dGlmdWwgYW5kIGN1bm5pbmcgdGVtcHRyZXNzIGNhcGFibGUgb2YgbWFuaXB1bGF0aW5nIHRoZSBoYXJkZXN0IC4uLlwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwiY2hvZ2F0aFwiLFxuICAgIFwia2V5XCI6IFwiMzFcIixcbiAgICBcIm5hbWVcIjogXCJDaG8nR2F0aFwiLFxuICAgIFwidGl0bGVcIjogXCJ0aGUgVGVycm9yIG9mIHRoZSBWb2lkXCIsXG4gICAgXCJ0YWdzXCI6IFtcbiAgICAgIFwiVGFua1wiLFxuICAgICAgXCJNYWdlXCJcbiAgICBdLFxuICAgIFwic3RhdHNcIjoge1xuICAgICAgXCJocFwiOiA1NzQuNCxcbiAgICAgIFwiaHBwZXJsZXZlbFwiOiA4MCxcbiAgICAgIFwibXBcIjogMjcyLjIsXG4gICAgICBcIm1wcGVybGV2ZWxcIjogNDAsXG4gICAgICBcIm1vdmVzcGVlZFwiOiAzNDUsXG4gICAgICBcImFybW9yXCI6IDI4Ljg4LFxuICAgICAgXCJhcm1vcnBlcmxldmVsXCI6IDMuNSxcbiAgICAgIFwic3BlbGxibG9ja1wiOiAzMi4xLFxuICAgICAgXCJzcGVsbGJsb2NrcGVybGV2ZWxcIjogMS4yNSxcbiAgICAgIFwiYXR0YWNrcmFuZ2VcIjogMTI1LFxuICAgICAgXCJocHJlZ2VuXCI6IDguOTI1LFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC44NSxcbiAgICAgIFwibXByZWdlblwiOiA3LjIwNSxcbiAgICAgIFwibXByZWdlbnBlcmxldmVsXCI6IDAuNDUsXG4gICAgICBcImNyaXRcIjogMCxcbiAgICAgIFwiY3JpdHBlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja2RhbWFnZVwiOiA2MS4xNTYsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDQuMixcbiAgICAgIFwiYXR0YWNrc3BlZWRvZmZzZXRcIjogMCxcbiAgICAgIFwiYXR0YWNrc3BlZWRwZXJsZXZlbFwiOiAxLjQ0XG4gICAgfSxcbiAgICBcImljb25cIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL2NoYW1waW9uL0Nob2dhdGgucG5nXCIsXG4gICAgXCJzcHJpdGVcIjoge1xuICAgICAgXCJ1cmxcIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3Nwcml0ZS9jaGFtcGlvbjAucG5nXCIsXG4gICAgICBcInhcIjogMjg4LFxuICAgICAgXCJ5XCI6IDQ4XG4gICAgfSxcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlcmUgaXMgYSBwbGFjZSBiZXR3ZWVuIGRpbWVuc2lvbnMsIGJldHdlZW4gd29ybGRzLiBUbyBzb21lIGl0IGlzIGtub3duIGFzIHRoZSBPdXRzaWRlLCB0byBvdGhlcnMgaXQgaXMgdGhlIFVua25vd24uIFRvIHRob3NlIHRoYXQgdHJ1bHkga25vdywgaG93ZXZlciwgaXQgaXMgY2FsbGVkIHRoZSBWb2lkLiBEZXNwaXRlIGl0cyBuYW1lLCB0aGUgVm9pZCBpcyBub3QgYW4gZW1wdHkgcGxhY2UsIGJ1dCByYXRoZXIgdGhlIGhvbWUgb2YgLi4uXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJjb3JraVwiLFxuICAgIFwia2V5XCI6IFwiNDJcIixcbiAgICBcIm5hbWVcIjogXCJDb3JraVwiLFxuICAgIFwidGl0bGVcIjogXCJ0aGUgRGFyaW5nIEJvbWJhcmRpZXJcIixcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJNYXJrc21hblwiXG4gICAgXSxcbiAgICBcInN0YXRzXCI6IHtcbiAgICAgIFwiaHBcIjogNTEyLjc2LFxuICAgICAgXCJocHBlcmxldmVsXCI6IDgyLFxuICAgICAgXCJtcFwiOiAzNTAuMTYsXG4gICAgICBcIm1wcGVybGV2ZWxcIjogMzQsXG4gICAgICBcIm1vdmVzcGVlZFwiOiAzMjUsXG4gICAgICBcImFybW9yXCI6IDIzLjM4LFxuICAgICAgXCJhcm1vcnBlcmxldmVsXCI6IDMuNSxcbiAgICAgIFwic3BlbGxibG9ja1wiOiAzMCxcbiAgICAgIFwic3BlbGxibG9ja3BlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja3JhbmdlXCI6IDU1MCxcbiAgICAgIFwiaHByZWdlblwiOiA1LjQyLFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC41NSxcbiAgICAgIFwibXByZWdlblwiOiA3LjQyLFxuICAgICAgXCJtcHJlZ2VucGVybGV2ZWxcIjogMC41NSxcbiAgICAgIFwiY3JpdFwiOiAwLFxuICAgICAgXCJjcml0cGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlXCI6IDU2LFxuICAgICAgXCJhdHRhY2tkYW1hZ2VwZXJsZXZlbFwiOiAzLjUsXG4gICAgICBcImF0dGFja3NwZWVkb2Zmc2V0XCI6IDAsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMi4zXG4gICAgfSxcbiAgICBcImljb25cIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL2NoYW1waW9uL0NvcmtpLnBuZ1wiLFxuICAgIFwic3ByaXRlXCI6IHtcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcHJpdGUvY2hhbXBpb24wLnBuZ1wiLFxuICAgICAgXCJ4XCI6IDMzNixcbiAgICAgIFwieVwiOiA0OFxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIldoZW4gSGVpbWVyZGluZ2VyIGFuZCBoaXMgeW9yZGxlIGNvbGxlYWd1ZXMgbWlncmF0ZWQgdG8gUGlsdG92ZXIsIHRoZXkgZW1icmFjZWQgc2NpZW5jZSBhcyBhIHdheSBvZiBsaWZlLCBhbmQgdGhleSBpbW1lZGlhdGVseSBtYWRlIHNldmVyYWwgZ3JvdW5kYnJlYWtpbmcgY29udHJpYnV0aW9ucyB0byB0aGUgdGVjaG1hdHVyZ2ljYWwgY29tbXVuaXR5LiBXaGF0IHlvcmRsZXMgbGFjayBpbiBzdGF0dXJlLCB0aGV5IG1ha2UgdXAgZm9yIC4uLlwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwiZGFyaXVzXCIsXG4gICAgXCJrZXlcIjogXCIxMjJcIixcbiAgICBcIm5hbWVcIjogXCJEYXJpdXNcIixcbiAgICBcInRpdGxlXCI6IFwidGhlIEhhbmQgb2YgTm94dXNcIixcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJGaWdodGVyXCIsXG4gICAgICBcIlRhbmtcIlxuICAgIF0sXG4gICAgXCJzdGF0c1wiOiB7XG4gICAgICBcImhwXCI6IDU4Mi4yNCxcbiAgICAgIFwiaHBwZXJsZXZlbFwiOiAxMDAsXG4gICAgICBcIm1wXCI6IDI2MyxcbiAgICAgIFwibXBwZXJsZXZlbFwiOiAzNy41LFxuICAgICAgXCJtb3Zlc3BlZWRcIjogMzQwLFxuICAgICAgXCJhcm1vclwiOiAzMCxcbiAgICAgIFwiYXJtb3JwZXJsZXZlbFwiOiA0LFxuICAgICAgXCJzcGVsbGJsb2NrXCI6IDMyLjEsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAxLjI1LFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiAxNzUsXG4gICAgICBcImhwcmVnZW5cIjogOS44NDUsXG4gICAgICBcImhwcmVnZW5wZXJsZXZlbFwiOiAwLjk1LFxuICAgICAgXCJtcHJlZ2VuXCI6IDYuNTg1LFxuICAgICAgXCJtcHJlZ2VucGVybGV2ZWxcIjogMC4zNSxcbiAgICAgIFwiY3JpdFwiOiAwLFxuICAgICAgXCJjcml0cGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlXCI6IDU2LFxuICAgICAgXCJhdHRhY2tkYW1hZ2VwZXJsZXZlbFwiOiA1LFxuICAgICAgXCJhdHRhY2tzcGVlZG9mZnNldFwiOiAwLFxuICAgICAgXCJhdHRhY2tzcGVlZHBlcmxldmVsXCI6IDFcbiAgICB9LFxuICAgIFwiaWNvblwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvY2hhbXBpb24vRGFyaXVzLnBuZ1wiLFxuICAgIFwic3ByaXRlXCI6IHtcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcHJpdGUvY2hhbXBpb24wLnBuZ1wiLFxuICAgICAgXCJ4XCI6IDM4NCxcbiAgICAgIFwieVwiOiA0OFxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZXJlIGlzIG5vIGdyZWF0ZXIgc3ltYm9sIG9mIE5veGlhbiBtaWdodCB0aGFuIERhcml1cywgdGhlIG5hdGlvbidzIG1vc3QgZmVhcmVkIGFuZCBiYXR0bGUtaGFyZGVuZWQgd2Fycmlvci4gT3JwaGFuZWQgYXQgYSB5b3VuZyBhZ2UsIERhcml1cyBoYWQgdG8gZmlnaHQgdG8ga2VlcCBoaW1zZWxmIGFuZCBoaXMgeW91bmdlciBicm90aGVyIGFsaXZlLiBCeSB0aGUgdGltZSBoZSBqb2luZWQgdGhlIG1pbGl0YXJ5LCBoZSBoYWQgLi4uXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJkaWFuYVwiLFxuICAgIFwia2V5XCI6IFwiMTMxXCIsXG4gICAgXCJuYW1lXCI6IFwiRGlhbmFcIixcbiAgICBcInRpdGxlXCI6IFwiU2Nvcm4gb2YgdGhlIE1vb25cIixcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJGaWdodGVyXCIsXG4gICAgICBcIk1hZ2VcIlxuICAgIF0sXG4gICAgXCJzdGF0c1wiOiB7XG4gICAgICBcImhwXCI6IDU4OS4yLFxuICAgICAgXCJocHBlcmxldmVsXCI6IDkwLFxuICAgICAgXCJtcFwiOiAyOTcuMixcbiAgICAgIFwibXBwZXJsZXZlbFwiOiA0MCxcbiAgICAgIFwibW92ZXNwZWVkXCI6IDM0NSxcbiAgICAgIFwiYXJtb3JcIjogMjYuMDQ4LFxuICAgICAgXCJhcm1vcnBlcmxldmVsXCI6IDMuNixcbiAgICAgIFwic3BlbGxibG9ja1wiOiAzMi4xLFxuICAgICAgXCJzcGVsbGJsb2NrcGVybGV2ZWxcIjogMS4yNSxcbiAgICAgIFwiYXR0YWNrcmFuZ2VcIjogMTUwLFxuICAgICAgXCJocHJlZ2VuXCI6IDcuNDI1LFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC44NSxcbiAgICAgIFwibXByZWdlblwiOiA2LFxuICAgICAgXCJtcHJlZ2VucGVybGV2ZWxcIjogMC44LFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNTMuMDQsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDMsXG4gICAgICBcImF0dGFja3NwZWVkb2Zmc2V0XCI6IDAsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMi4yNVxuICAgIH0sXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9jaGFtcGlvbi9EaWFuYS5wbmdcIixcbiAgICBcInNwcml0ZVwiOiB7XG4gICAgICBcInVybFwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvc3ByaXRlL2NoYW1waW9uMC5wbmdcIixcbiAgICAgIFwieFwiOiA0MzIsXG4gICAgICBcInlcIjogNDhcbiAgICB9LFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCInJ0kgYW0gdGhlIGxpZ2h0IGNvdXJzaW5nIGluIHRoZSBzb3VsIG9mIHRoZSBtb29uLicnPGJyPjxicj5CZWFyaW5nIGhlciBjcmVzY2VudCBtb29uYmxhZGUsIERpYW5hIGZpZ2h0cyBhcyBhIHdhcnJpb3Igb2YgdGhlIEx1bmFyaSwgYSBmYWl0aCBhbGwgYnV0IHF1YXNoZWQgaW4gdGhlIGxhbmRzIGFyb3VuZCBNb3VudCBUYXJnb24uIENsYWQgaW4gc2hpbW1lcmluZyBhcm1vciB0aGUgY29sb3Igb2Ygd2ludGVyIHNub3cgYXQgbmlnaHQsIC4uLlwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwiZHJhdmVuXCIsXG4gICAgXCJrZXlcIjogXCIxMTlcIixcbiAgICBcIm5hbWVcIjogXCJEcmF2ZW5cIixcbiAgICBcInRpdGxlXCI6IFwidGhlIEdsb3Jpb3VzIEV4ZWN1dGlvbmVyXCIsXG4gICAgXCJ0YWdzXCI6IFtcbiAgICAgIFwiTWFya3NtYW5cIlxuICAgIF0sXG4gICAgXCJzdGF0c1wiOiB7XG4gICAgICBcImhwXCI6IDU1Ny43NixcbiAgICAgIFwiaHBwZXJsZXZlbFwiOiA4MixcbiAgICAgIFwibXBcIjogMzYwLjU2LFxuICAgICAgXCJtcHBlcmxldmVsXCI6IDM5LFxuICAgICAgXCJtb3Zlc3BlZWRcIjogMzMwLFxuICAgICAgXCJhcm1vclwiOiAyNS41NDQsXG4gICAgICBcImFybW9ycGVybGV2ZWxcIjogMy4zLFxuICAgICAgXCJzcGVsbGJsb2NrXCI6IDMwLFxuICAgICAgXCJzcGVsbGJsb2NrcGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrcmFuZ2VcIjogNTUwLFxuICAgICAgXCJocHJlZ2VuXCI6IDYuMTc1LFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC43LFxuICAgICAgXCJtcHJlZ2VuXCI6IDguMDQsXG4gICAgICBcIm1wcmVnZW5wZXJsZXZlbFwiOiAwLjY1LFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNTUuOCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlcGVybGV2ZWxcIjogMi45MSxcbiAgICAgIFwiYXR0YWNrc3BlZWRvZmZzZXRcIjogLTAuMDgsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMi43XG4gICAgfSxcbiAgICBcImljb25cIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL2NoYW1waW9uL0RyYXZlbi5wbmdcIixcbiAgICBcInNwcml0ZVwiOiB7XG4gICAgICBcInVybFwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvc3ByaXRlL2NoYW1waW9uMC5wbmdcIixcbiAgICAgIFwieFwiOiAwLFxuICAgICAgXCJ5XCI6IDk2XG4gICAgfSxcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiVW5saWtlIGhpcyBicm90aGVyIERhcml1cywgdmljdG9yeSBpbiBiYXR0bGUgd2FzIG5ldmVyIGVub3VnaCBmb3IgRHJhdmVuLiBIZSBjcmF2ZWQgcmVjb2duaXRpb24sIGFjY2xhaW0sIGFuZCBnbG9yeS4gSGUgZmlyc3Qgc291Z2h0IGdyZWF0bmVzcyBpbiB0aGUgTm94aWFuIG1pbGl0YXJ5LCBidXQgaGlzIGZsYWlyIGZvciB0aGUgZHJhbWF0aWMgd2VudCBzZXZlcmVseSB1bmRlcmFwcHJlY2lhdGVkLiBUaGlyc3RpbmcgZm9yIGEgLi4uXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJkcm11bmRvXCIsXG4gICAgXCJrZXlcIjogXCIzNlwiLFxuICAgIFwibmFtZVwiOiBcIkRyLiBNdW5kb1wiLFxuICAgIFwidGl0bGVcIjogXCJ0aGUgTWFkbWFuIG9mIFphdW5cIixcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJGaWdodGVyXCIsXG4gICAgICBcIlRhbmtcIlxuICAgIF0sXG4gICAgXCJzdGF0c1wiOiB7XG4gICAgICBcImhwXCI6IDU4Mi41MixcbiAgICAgIFwiaHBwZXJsZXZlbFwiOiA4OSxcbiAgICAgIFwibXBcIjogMCxcbiAgICAgIFwibXBwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJtb3Zlc3BlZWRcIjogMzQ1LFxuICAgICAgXCJhcm1vclwiOiAyNi44OCxcbiAgICAgIFwiYXJtb3JwZXJsZXZlbFwiOiAzLjUsXG4gICAgICBcInNwZWxsYmxvY2tcIjogMzIuMSxcbiAgICAgIFwic3BlbGxibG9ja3BlcmxldmVsXCI6IDEuMjUsXG4gICAgICBcImF0dGFja3JhbmdlXCI6IDEyNSxcbiAgICAgIFwiaHByZWdlblwiOiA3Ljc2LFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC43NSxcbiAgICAgIFwibXByZWdlblwiOiAwLFxuICAgICAgXCJtcHJlZ2VucGVybGV2ZWxcIjogMCxcbiAgICAgIFwiY3JpdFwiOiAwLFxuICAgICAgXCJjcml0cGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlXCI6IDYxLjI3LFxuICAgICAgXCJhdHRhY2tkYW1hZ2VwZXJsZXZlbFwiOiAzLFxuICAgICAgXCJhdHRhY2tzcGVlZG9mZnNldFwiOiAwLFxuICAgICAgXCJhdHRhY2tzcGVlZHBlcmxldmVsXCI6IDIuOFxuICAgIH0sXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9jaGFtcGlvbi9Eck11bmRvLnBuZ1wiLFxuICAgIFwic3ByaXRlXCI6IHtcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcHJpdGUvY2hhbXBpb24wLnBuZ1wiLFxuICAgICAgXCJ4XCI6IDQ4LFxuICAgICAgXCJ5XCI6IDk2XG4gICAgfSxcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiJydCZXdhcmUgdGhlIE1hZG1hbiBvZiBaYXVuLiBJbiBoaXMgZXllcywgeW91IGFyZSBhbHJlYWR5IGRlYWQnJzxicj48YnI+SXQgaXMgc2FpZCB0aGF0IHRoZSBtYW4gbm93IGtub3duIGFzIERyLiBNdW5kbyB3YXMgYm9ybiB3aXRob3V0IGFueSBzb3J0IG9mIGNvbnNjaWVuY2UuIEluc3RlYWQsIGhlIGhhZCBhbiB1bnF1ZW5jaGFibGUgZGVzaXJlIHRvIGluZmxpY3QgcGFpbiB0aHJvdWdoIGV4cGVyaW1lbnRhdGlvbi4gQnkgdGhlIHRpbWUgLi4uXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJla2tvXCIsXG4gICAgXCJrZXlcIjogXCIyNDVcIixcbiAgICBcIm5hbWVcIjogXCJFa2tvXCIsXG4gICAgXCJ0aXRsZVwiOiBcInRoZSBCb3kgV2hvIFNoYXR0ZXJlZCBUaW1lXCIsXG4gICAgXCJ0YWdzXCI6IFtcbiAgICAgIFwiQXNzYXNzaW5cIixcbiAgICAgIFwiRmlnaHRlclwiXG4gICAgXSxcbiAgICBcInN0YXRzXCI6IHtcbiAgICAgIFwiaHBcIjogNTgwLFxuICAgICAgXCJocHBlcmxldmVsXCI6IDgwLFxuICAgICAgXCJtcFwiOiAyODAsXG4gICAgICBcIm1wcGVybGV2ZWxcIjogNTAsXG4gICAgICBcIm1vdmVzcGVlZFwiOiAzNDAsXG4gICAgICBcImFybW9yXCI6IDI3LFxuICAgICAgXCJhcm1vcnBlcmxldmVsXCI6IDMsXG4gICAgICBcInNwZWxsYmxvY2tcIjogMzIsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAxLjI1LFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiAxMjUsXG4gICAgICBcImhwcmVnZW5cIjogOSxcbiAgICAgIFwiaHByZWdlbnBlcmxldmVsXCI6IDAuOSxcbiAgICAgIFwibXByZWdlblwiOiA2LFxuICAgICAgXCJtcHJlZ2VucGVybGV2ZWxcIjogMC44LFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNTUsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDMsXG4gICAgICBcImF0dGFja3NwZWVkb2Zmc2V0XCI6IDAsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMy4zXG4gICAgfSxcbiAgICBcImljb25cIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL2NoYW1waW9uL0Vra28ucG5nXCIsXG4gICAgXCJzcHJpdGVcIjoge1xuICAgICAgXCJ1cmxcIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3Nwcml0ZS9jaGFtcGlvbjAucG5nXCIsXG4gICAgICBcInhcIjogOTYsXG4gICAgICBcInlcIjogOTZcbiAgICB9LFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJBIHByb2RpZ3kgZnJvbSB0aGUgcm91Z2ggc3RyZWV0cyBvZiBaYXVuLCBFa2tvIG1hbmlwdWxhdGVzIHRpbWUgdG8gc3BpbiBhbnkgc2l0dWF0aW9uIHRvIGhpcyBhZHZhbnRhZ2UuIFVzaW5nIGhpcyBvd24gaW52ZW50aW9uLCB0aGUgWmVyby1Ecml2ZSwgaGUgZXhwbG9yZXMgdGhlIGJyYW5jaGluZyBwb3NzaWJpbGl0aWVzIG9mIHJlYWxpdHkuIEFzIHdlbGwgYXMgZXhwZXJpbWVudGluZyB3aXRoIG11bHRpLWRpbWVuc2lvbmFsIC4uLlwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwiZWxpc2VcIixcbiAgICBcImtleVwiOiBcIjYwXCIsXG4gICAgXCJuYW1lXCI6IFwiRWxpc2VcIixcbiAgICBcInRpdGxlXCI6IFwidGhlIFNwaWRlciBRdWVlblwiLFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcIk1hZ2VcIixcbiAgICAgIFwiRmlnaHRlclwiXG4gICAgXSxcbiAgICBcInN0YXRzXCI6IHtcbiAgICAgIFwiaHBcIjogNTI5LjQsXG4gICAgICBcImhwcGVybGV2ZWxcIjogODAsXG4gICAgICBcIm1wXCI6IDMyNCxcbiAgICAgIFwibXBwZXJsZXZlbFwiOiA1MCxcbiAgICAgIFwibW92ZXNwZWVkXCI6IDMyNSxcbiAgICAgIFwiYXJtb3JcIjogMjIuMTI4LFxuICAgICAgXCJhcm1vcnBlcmxldmVsXCI6IDMuMzUsXG4gICAgICBcInNwZWxsYmxvY2tcIjogMzAsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiA1NTAsXG4gICAgICBcImhwcmVnZW5cIjogNS43MDUsXG4gICAgICBcImhwcmVnZW5wZXJsZXZlbFwiOiAwLjYsXG4gICAgICBcIm1wcmVnZW5cIjogNixcbiAgICAgIFwibXByZWdlbnBlcmxldmVsXCI6IDAuOCxcbiAgICAgIFwiY3JpdFwiOiAwLFxuICAgICAgXCJjcml0cGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlXCI6IDUwLjU0LFxuICAgICAgXCJhdHRhY2tkYW1hZ2VwZXJsZXZlbFwiOiAzLFxuICAgICAgXCJhdHRhY2tzcGVlZG9mZnNldFwiOiAwLFxuICAgICAgXCJhdHRhY2tzcGVlZHBlcmxldmVsXCI6IDEuNzVcbiAgICB9LFxuICAgIFwiaWNvblwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvY2hhbXBpb24vRWxpc2UucG5nXCIsXG4gICAgXCJzcHJpdGVcIjoge1xuICAgICAgXCJ1cmxcIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3Nwcml0ZS9jaGFtcGlvbjAucG5nXCIsXG4gICAgICBcInhcIjogMTQ0LFxuICAgICAgXCJ5XCI6IDk2XG4gICAgfSxcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiJydCZWF1dHkgaXMgcG93ZXIgdG9vLCBhbmQgY2FuIHN0cmlrZSBzd2lmdGVyIHRoYW4gYW55IHN3b3JkLicnPGJyPjxicj5FbGlzZSBpcyBhIGRlYWRseSBwcmVkYXRvciB3aG8gZHdlbGxzIGluIGEgc2h1dHRlcmVkLCBsaWdodGxlc3MgcGFsYWNlLCBkZWVwIGluIHRoZSBJbW1vcnRhbCBCYXN0aW9uIG9mIE5veHVzLiBPbmNlIHNoZSB3YXMgbW9ydGFsLCB0aGUgbWlzdHJlc3Mgb2YgYSBvbmNlLXBvd2VyZnVsIGhvdXNlLCBidXQgdGhlIC4uLlwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwiZXZlbHlublwiLFxuICAgIFwia2V5XCI6IFwiMjhcIixcbiAgICBcIm5hbWVcIjogXCJFdmVseW5uXCIsXG4gICAgXCJ0aXRsZVwiOiBcInRoZSBXaWRvd21ha2VyXCIsXG4gICAgXCJ0YWdzXCI6IFtcbiAgICAgIFwiQXNzYXNzaW5cIixcbiAgICAgIFwiTWFnZVwiXG4gICAgXSxcbiAgICBcInN0YXRzXCI6IHtcbiAgICAgIFwiaHBcIjogNTMxLjIsXG4gICAgICBcImhwcGVybGV2ZWxcIjogOTAsXG4gICAgICBcIm1wXCI6IDMxNS42LFxuICAgICAgXCJtcHBlcmxldmVsXCI6IDQyLFxuICAgICAgXCJtb3Zlc3BlZWRcIjogMzQwLFxuICAgICAgXCJhcm1vclwiOiAyNi41LFxuICAgICAgXCJhcm1vcnBlcmxldmVsXCI6IDMuOCxcbiAgICAgIFwic3BlbGxibG9ja1wiOiAzMi4xLFxuICAgICAgXCJzcGVsbGJsb2NrcGVybGV2ZWxcIjogMS4yNSxcbiAgICAgIFwiYXR0YWNrcmFuZ2VcIjogMTI1LFxuICAgICAgXCJocHJlZ2VuXCI6IDkuODIsXG4gICAgICBcImhwcmVnZW5wZXJsZXZlbFwiOiAwLjU1LFxuICAgICAgXCJtcHJlZ2VuXCI6IDguMTA1LFxuICAgICAgXCJtcHJlZ2VucGVybGV2ZWxcIjogMC42LFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNTMuODgsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDMuNSxcbiAgICAgIFwiYXR0YWNrc3BlZWRvZmZzZXRcIjogMCxcbiAgICAgIFwiYXR0YWNrc3BlZWRwZXJsZXZlbFwiOiAzLjZcbiAgICB9LFxuICAgIFwiaWNvblwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvY2hhbXBpb24vRXZlbHlubi5wbmdcIixcbiAgICBcInNwcml0ZVwiOiB7XG4gICAgICBcInVybFwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvc3ByaXRlL2NoYW1waW9uMC5wbmdcIixcbiAgICAgIFwieFwiOiAxOTIsXG4gICAgICBcInlcIjogOTZcbiAgICB9LFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJTd2lmdCBhbmQgbGV0aGFsLCBFdmVseW5uIGlzIG9uZSBvZiB0aGUgbW9zdCBkZWFkbHkgLSBhbmQgZXhwZW5zaXZlIC0gYXNzYXNzaW5zIGluIGFsbCBvZiBSdW5ldGVycmEuIEFibGUgdG8gbWVyZ2Ugd2l0aCB0aGUgc2hhZG93cyBhdCB3aWxsLCBzaGUgcGF0aWVudGx5IHN0YWxrcyBoZXIgcHJleSwgd2FpdGluZyBmb3IgdGhlIHJpZ2h0IG1vbWVudCB0byBzdHJpa2UuIFdoaWxlIEV2ZWx5bm4gaXMgY2xlYXJseSBub3QgZW50aXJlbHkgLi4uXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJlenJlYWxcIixcbiAgICBcImtleVwiOiBcIjgxXCIsXG4gICAgXCJuYW1lXCI6IFwiRXpyZWFsXCIsXG4gICAgXCJ0aXRsZVwiOiBcInRoZSBQcm9kaWdhbCBFeHBsb3JlclwiLFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcIk1hcmtzbWFuXCIsXG4gICAgICBcIk1hZ2VcIlxuICAgIF0sXG4gICAgXCJzdGF0c1wiOiB7XG4gICAgICBcImhwXCI6IDQ4NC40LFxuICAgICAgXCJocHBlcmxldmVsXCI6IDgwLFxuICAgICAgXCJtcFwiOiAzNjAuNixcbiAgICAgIFwibXBwZXJsZXZlbFwiOiA0MixcbiAgICAgIFwibW92ZXNwZWVkXCI6IDMyNSxcbiAgICAgIFwiYXJtb3JcIjogMjEuODgsXG4gICAgICBcImFybW9ycGVybGV2ZWxcIjogMy41LFxuICAgICAgXCJzcGVsbGJsb2NrXCI6IDMwLFxuICAgICAgXCJzcGVsbGJsb2NrcGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrcmFuZ2VcIjogNTUwLFxuICAgICAgXCJocHJlZ2VuXCI6IDYuNDIsXG4gICAgICBcImhwcmVnZW5wZXJsZXZlbFwiOiAwLjU1LFxuICAgICAgXCJtcHJlZ2VuXCI6IDguMDksXG4gICAgICBcIm1wcmVnZW5wZXJsZXZlbFwiOiAwLjY1LFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNTUuNjYsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDIuNDEsXG4gICAgICBcImF0dGFja3NwZWVkb2Zmc2V0XCI6IDAsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMi44XG4gICAgfSxcbiAgICBcImljb25cIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL2NoYW1waW9uL0V6cmVhbC5wbmdcIixcbiAgICBcInNwcml0ZVwiOiB7XG4gICAgICBcInVybFwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvc3ByaXRlL2NoYW1waW9uMC5wbmdcIixcbiAgICAgIFwieFwiOiAyNDAsXG4gICAgICBcInlcIjogOTZcbiAgICB9LFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgaW50cmVwaWQgeW91bmcgYWR2ZW50dXJlciBFenJlYWwgaGFzIGV4cGxvcmVkIHNvbWUgb2YgdGhlIG1vc3QgcmVtb3RlIGFuZCBhYmFuZG9uZWQgbG9jYXRpb25zIG9uIFJ1bmV0ZXJyYS4gRHVyaW5nIGFuIGV4cGVkaXRpb24gdG8gdGhlIGJ1cmllZCBydWlucyBvZiBhbmNpZW50IFNodXJpbWEsIGhlIHJlY292ZXJlZCBhbiBhbXVsZXQgb2YgaW5jcmVkaWJsZSBteXN0aWNhbCBwb3dlci4gTGlrZWx5IGNvbnN0cnVjdGVkIHRvIGJlIC4uLlwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwiZmlkZGxlc3RpY2tzXCIsXG4gICAgXCJrZXlcIjogXCI5XCIsXG4gICAgXCJuYW1lXCI6IFwiRmlkZGxlc3RpY2tzXCIsXG4gICAgXCJ0aXRsZVwiOiBcInRoZSBIYXJiaW5nZXIgb2YgRG9vbVwiLFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcIk1hZ2VcIixcbiAgICAgIFwiU3VwcG9ydFwiXG4gICAgXSxcbiAgICBcInN0YXRzXCI6IHtcbiAgICAgIFwiaHBcIjogNTI0LjQsXG4gICAgICBcImhwcGVybGV2ZWxcIjogODAsXG4gICAgICBcIm1wXCI6IDQwMC4xMixcbiAgICAgIFwibXBwZXJsZXZlbFwiOiA1NixcbiAgICAgIFwibW92ZXNwZWVkXCI6IDMzNSxcbiAgICAgIFwiYXJtb3JcIjogMjAuODgsXG4gICAgICBcImFybW9ycGVybGV2ZWxcIjogMy41LFxuICAgICAgXCJzcGVsbGJsb2NrXCI6IDMwLFxuICAgICAgXCJzcGVsbGJsb2NrcGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrcmFuZ2VcIjogNDgwLFxuICAgICAgXCJocHJlZ2VuXCI6IDUuNjA1LFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC42LFxuICAgICAgXCJtcHJlZ2VuXCI6IDYsXG4gICAgICBcIm1wcmVnZW5wZXJsZXZlbFwiOiAwLjgsXG4gICAgICBcImNyaXRcIjogMCxcbiAgICAgIFwiY3JpdHBlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja2RhbWFnZVwiOiA0OC4zNixcbiAgICAgIFwiYXR0YWNrZGFtYWdlcGVybGV2ZWxcIjogMi42MjUsXG4gICAgICBcImF0dGFja3NwZWVkb2Zmc2V0XCI6IDAsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMi4xMVxuICAgIH0sXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9jaGFtcGlvbi9GaWRkbGVTdGlja3MucG5nXCIsXG4gICAgXCJzcHJpdGVcIjoge1xuICAgICAgXCJ1cmxcIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3Nwcml0ZS9jaGFtcGlvbjAucG5nXCIsXG4gICAgICBcInhcIjogMjg4LFxuICAgICAgXCJ5XCI6IDk2XG4gICAgfSxcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiRm9yIG5lYXJseSB0d2VudHkgeWVhcnMsIEZpZGRsZXN0aWNrcyBoYXMgc3Rvb2QgYWxvbmUgaW4gdGhlIGVhc3Rlcm5tb3N0IHN1bW1vbmluZyBjaGFtYmVyIG9mIHRoZSBJbnN0aXR1dGUgb2YgV2FyLiBPbmx5IHRoZSBidXJuaW5nIGVtZXJhbGQgbGlnaHQgb2YgaGlzIHVuZWFydGhseSBnYXplIHBpZXJjZXMgdGhlIG11c3R5IGRhcmtuZXNzIG9mIGhpcyBkdXN0LWNvdmVyZWQgaG9tZS4gSXQgaXMgaGVyZSB0aGF0IHRoZSBIYXJiaW5nZXIgLi4uXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJmaW9yYVwiLFxuICAgIFwia2V5XCI6IFwiMTE0XCIsXG4gICAgXCJuYW1lXCI6IFwiRmlvcmFcIixcbiAgICBcInRpdGxlXCI6IFwidGhlIEdyYW5kIER1ZWxpc3RcIixcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJGaWdodGVyXCIsXG4gICAgICBcIkFzc2Fzc2luXCJcbiAgICBdLFxuICAgIFwic3RhdHNcIjoge1xuICAgICAgXCJocFwiOiA1NTAsXG4gICAgICBcImhwcGVybGV2ZWxcIjogODUsXG4gICAgICBcIm1wXCI6IDMwMCxcbiAgICAgIFwibXBwZXJsZXZlbFwiOiA0MCxcbiAgICAgIFwibW92ZXNwZWVkXCI6IDM0NSxcbiAgICAgIFwiYXJtb3JcIjogMjQsXG4gICAgICBcImFybW9ycGVybGV2ZWxcIjogMy41LFxuICAgICAgXCJzcGVsbGJsb2NrXCI6IDMyLjEsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAxLjI1LFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiAxNTAsXG4gICAgICBcImhwcmVnZW5cIjogOC4yNSxcbiAgICAgIFwiaHByZWdlbnBlcmxldmVsXCI6IDAuNTUsXG4gICAgICBcIm1wcmVnZW5cIjogOCxcbiAgICAgIFwibXByZWdlbnBlcmxldmVsXCI6IDAuNyxcbiAgICAgIFwiY3JpdFwiOiAwLFxuICAgICAgXCJjcml0cGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlXCI6IDYwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VwZXJsZXZlbFwiOiAzLjMsXG4gICAgICBcImF0dGFja3NwZWVkb2Zmc2V0XCI6IDAsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMy4yXG4gICAgfSxcbiAgICBcImljb25cIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL2NoYW1waW9uL0Zpb3JhLnBuZ1wiLFxuICAgIFwic3ByaXRlXCI6IHtcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcHJpdGUvY2hhbXBpb24wLnBuZ1wiLFxuICAgICAgXCJ4XCI6IDMzNixcbiAgICAgIFwieVwiOiA5NlxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIicnSSBoYXZlIGNvbWUgdG8ga2lsbCB5b3UgZm9yIHRoZSBzYWtlIG9mIGhvbm9yLiBBbmQgdGhvdWdoIHlvdSBwb3NzZXNzIG5vbmUsIHN0aWxsIHlvdSBkaWUuJyc8YnI+VGhlIG1vc3QgZmVhcmVkIGR1ZWxpc3QgaW4gYWxsIFZhbG9yYW4sIEZpb3JhIGlzIGFzIHJlbm93bmVkIGZvciBoZXIgYnJ1c3F1ZSBtYW5uZXIgYW5kIGN1bm5pbmcgbWluZCBhcyBzaGUgaXMgZm9yIHRoZSBzcGVlZCBvZiBoZXIgYmx1ZXN0ZWVsIHJhcGllci4gLi4uXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJmaXp6XCIsXG4gICAgXCJrZXlcIjogXCIxMDVcIixcbiAgICBcIm5hbWVcIjogXCJGaXp6XCIsXG4gICAgXCJ0aXRsZVwiOiBcInRoZSBUaWRhbCBUcmlja3N0ZXJcIixcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJBc3Nhc3NpblwiLFxuICAgICAgXCJGaWdodGVyXCJcbiAgICBdLFxuICAgIFwic3RhdHNcIjoge1xuICAgICAgXCJocFwiOiA1NTguNDgsXG4gICAgICBcImhwcGVybGV2ZWxcIjogODYsXG4gICAgICBcIm1wXCI6IDMxNy4yLFxuICAgICAgXCJtcHBlcmxldmVsXCI6IDM3LFxuICAgICAgXCJtb3Zlc3BlZWRcIjogMzM1LFxuICAgICAgXCJhcm1vclwiOiAyMi40MTIsXG4gICAgICBcImFybW9ycGVybGV2ZWxcIjogMy40LFxuICAgICAgXCJzcGVsbGJsb2NrXCI6IDMyLjEsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAxLjI1LFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiAxNzUsXG4gICAgICBcImhwcmVnZW5cIjogOC4xNzUsXG4gICAgICBcImhwcmVnZW5wZXJsZXZlbFwiOiAwLjcsXG4gICAgICBcIm1wcmVnZW5cIjogNixcbiAgICAgIFwibXByZWdlbnBlcmxldmVsXCI6IDAuOCxcbiAgICAgIFwiY3JpdFwiOiAwLFxuICAgICAgXCJjcml0cGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlXCI6IDU4LjA0LFxuICAgICAgXCJhdHRhY2tkYW1hZ2VwZXJsZXZlbFwiOiAzLFxuICAgICAgXCJhdHRhY2tzcGVlZG9mZnNldFwiOiAtMC4wNSxcbiAgICAgIFwiYXR0YWNrc3BlZWRwZXJsZXZlbFwiOiAzLjFcbiAgICB9LFxuICAgIFwiaWNvblwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvY2hhbXBpb24vRml6ei5wbmdcIixcbiAgICBcInNwcml0ZVwiOiB7XG4gICAgICBcInVybFwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvc3ByaXRlL2NoYW1waW9uMC5wbmdcIixcbiAgICAgIFwieFwiOiAzODQsXG4gICAgICBcInlcIjogOTZcbiAgICB9LFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJDZW50dXJpZXMgYWdvLCBhbiBhbmNpZW50IHdhdGVyLWR3ZWxsaW5nIHJhY2UgYnVpbHQgYSBoaWRkZW4gY2l0eSBiZW5lYXRoIGEgbW91bnRhaW4gaW4gdGhlIHNlYS4gVGhvdWdoIHRoZXNlIGNyZWF0dXJlcyBoYWQgdGhlaXIgZW5lbWllcywgdGhlIGNpdHkgd2FzIGFuIGltcGVuZXRyYWJsZSBmb3J0cmVzcywgYW5kLCBpbiB0aGUgc2FmZXR5IGl0IHByb3ZpZGVkLCB0aGV5IGdyZXcgY29tcGxhY2VudC4gRml6eiwgaG93ZXZlciwgLi4uXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJnYWxpb1wiLFxuICAgIFwia2V5XCI6IFwiM1wiLFxuICAgIFwibmFtZVwiOiBcIkdhbGlvXCIsXG4gICAgXCJ0aXRsZVwiOiBcInRoZSBTZW50aW5lbCdzIFNvcnJvd1wiLFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcIlRhbmtcIixcbiAgICAgIFwiTWFnZVwiXG4gICAgXSxcbiAgICBcInN0YXRzXCI6IHtcbiAgICAgIFwiaHBcIjogNTc3LjgsXG4gICAgICBcImhwcGVybGV2ZWxcIjogODUsXG4gICAgICBcIm1wXCI6IDM2OSxcbiAgICAgIFwibXBwZXJsZXZlbFwiOiA0NyxcbiAgICAgIFwibW92ZXNwZWVkXCI6IDMzNSxcbiAgICAgIFwiYXJtb3JcIjogMjYuODgsXG4gICAgICBcImFybW9ycGVybGV2ZWxcIjogMy41LFxuICAgICAgXCJzcGVsbGJsb2NrXCI6IDMyLjEsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAxLjI1LFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiAxMjUsXG4gICAgICBcImhwcmVnZW5cIjogOC43MSxcbiAgICAgIFwiaHByZWdlbnBlcmxldmVsXCI6IDAuNzUsXG4gICAgICBcIm1wcmVnZW5cIjogNixcbiAgICAgIFwibXByZWdlbnBlcmxldmVsXCI6IDAuOCxcbiAgICAgIFwiY3JpdFwiOiAwLFxuICAgICAgXCJjcml0cGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlXCI6IDYxLjk3LFxuICAgICAgXCJhdHRhY2tkYW1hZ2VwZXJsZXZlbFwiOiAzLjM3NSxcbiAgICAgIFwiYXR0YWNrc3BlZWRvZmZzZXRcIjogLTAuMDIsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMS4yXG4gICAgfSxcbiAgICBcImljb25cIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL2NoYW1waW9uL0dhbGlvLnBuZ1wiLFxuICAgIFwic3ByaXRlXCI6IHtcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcHJpdGUvY2hhbXBpb24wLnBuZ1wiLFxuICAgICAgXCJ4XCI6IDQzMixcbiAgICAgIFwieVwiOiA5NlxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIicnVGhlcmUgaXMgbm8gc3VjaCB0aGluZyBhcyByZWRlbXB0aW9uLiBPbmx5IHBlbmFuY2UuJyc8YnI+PGJyPkxvbmcgYmVmb3JlIHRoZSByZWd1bGF0aW9uIG9mIG1hZ2ljLCBtYWdlcyBleHBlcmltZW50ZWQgd2l0aCB0aGUgY3JlYXRpb24gb2YgYXJ0aWZpY2lhbCBsaWZlLiBOb3cgZm9yYmlkZGVuLCBpbnN0aWxsaW5nIGdvbGVtcyB3aXRoIHJlYXNvbiB3YXMgb25jZSBub3Qgc28gdW5jb21tb24gYSBwcmFjdGljZSBhbW9uZ3N0IHRoZSAuLi5cIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcImdhbmdwbGFua1wiLFxuICAgIFwia2V5XCI6IFwiNDFcIixcbiAgICBcIm5hbWVcIjogXCJHYW5ncGxhbmtcIixcbiAgICBcInRpdGxlXCI6IFwidGhlIFNhbHR3YXRlciBTY291cmdlXCIsXG4gICAgXCJ0YWdzXCI6IFtcbiAgICAgIFwiRmlnaHRlclwiXG4gICAgXSxcbiAgICBcInN0YXRzXCI6IHtcbiAgICAgIFwiaHBcIjogNTQwLFxuICAgICAgXCJocHBlcmxldmVsXCI6IDgyLFxuICAgICAgXCJtcFwiOiAyODIsXG4gICAgICBcIm1wcGVybGV2ZWxcIjogNDAsXG4gICAgICBcIm1vdmVzcGVlZFwiOiAzNDUsXG4gICAgICBcImFybW9yXCI6IDI2LFxuICAgICAgXCJhcm1vcnBlcmxldmVsXCI6IDMsXG4gICAgICBcInNwZWxsYmxvY2tcIjogMzIuMSxcbiAgICAgIFwic3BlbGxibG9ja3BlcmxldmVsXCI6IDEuMjUsXG4gICAgICBcImF0dGFja3JhbmdlXCI6IDEyNSxcbiAgICAgIFwiaHByZWdlblwiOiA2LFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC42LFxuICAgICAgXCJtcHJlZ2VuXCI6IDcuNSxcbiAgICAgIFwibXByZWdlbnBlcmxldmVsXCI6IDAuNyxcbiAgICAgIFwiY3JpdFwiOiAwLFxuICAgICAgXCJjcml0cGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlXCI6IDU2LFxuICAgICAgXCJhdHRhY2tkYW1hZ2VwZXJsZXZlbFwiOiAzLFxuICAgICAgXCJhdHRhY2tzcGVlZG9mZnNldFwiOiAwLFxuICAgICAgXCJhdHRhY2tzcGVlZHBlcmxldmVsXCI6IDMuMlxuICAgIH0sXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9jaGFtcGlvbi9HYW5ncGxhbmsucG5nXCIsXG4gICAgXCJzcHJpdGVcIjoge1xuICAgICAgXCJ1cmxcIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3Nwcml0ZS9jaGFtcGlvbjEucG5nXCIsXG4gICAgICBcInhcIjogMCxcbiAgICAgIFwieVwiOiAwXG4gICAgfSxcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiJydJIHdhcyBjdXR0aW5nIHRocm9hdHMgYW5kIHNpbmtpbmcgTm94aWFuIHdhciBnYWxsZXlzIHdoZW4geW91IHdlcmUgc3RpbGwgcGlzc2luZyB5b3VyIGJyaXRjaGVzLCBib3kuIFlvdSBkb24ndCB3YW50IHRvIHRha2UgbWUgb24uJyc8YnI+PGJyPkFzIHVucHJlZGljdGFibGUgYXMgaGUgaXMgYnJ1dGFsLCB0aGUgZGV0aHJvbmVkIHJlYXZlciBraW5nIGtub3duIGFzIEdhbmdwbGFuayBpcyBmZWFyZWQgZmFyIGFuZCB3aWRlLiBXaGVyZSAuLi5cIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcImdhcmVuXCIsXG4gICAgXCJrZXlcIjogXCI4NlwiLFxuICAgIFwibmFtZVwiOiBcIkdhcmVuXCIsXG4gICAgXCJ0aXRsZVwiOiBcIlRoZSBNaWdodCBvZiBEZW1hY2lhXCIsXG4gICAgXCJ0YWdzXCI6IFtcbiAgICAgIFwiRmlnaHRlclwiLFxuICAgICAgXCJUYW5rXCJcbiAgICBdLFxuICAgIFwic3RhdHNcIjoge1xuICAgICAgXCJocFwiOiA2MTYuMjgsXG4gICAgICBcImhwcGVybGV2ZWxcIjogODQuMjUsXG4gICAgICBcIm1wXCI6IDAsXG4gICAgICBcIm1wcGVybGV2ZWxcIjogMCxcbiAgICAgIFwibW92ZXNwZWVkXCI6IDM0MCxcbiAgICAgIFwiYXJtb3JcIjogMjcuNTM2LFxuICAgICAgXCJhcm1vcnBlcmxldmVsXCI6IDMsXG4gICAgICBcInNwZWxsYmxvY2tcIjogMzIuMSxcbiAgICAgIFwic3BlbGxibG9ja3BlcmxldmVsXCI6IDEuMjUsXG4gICAgICBcImF0dGFja3JhbmdlXCI6IDE3NSxcbiAgICAgIFwiaHByZWdlblwiOiA3Ljg0LFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC41LFxuICAgICAgXCJtcHJlZ2VuXCI6IDAsXG4gICAgICBcIm1wcmVnZW5wZXJsZXZlbFwiOiAwLFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNTcuODgsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDQuNSxcbiAgICAgIFwiYXR0YWNrc3BlZWRvZmZzZXRcIjogMCxcbiAgICAgIFwiYXR0YWNrc3BlZWRwZXJsZXZlbFwiOiAyLjlcbiAgICB9LFxuICAgIFwiaWNvblwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvY2hhbXBpb24vR2FyZW4ucG5nXCIsXG4gICAgXCJzcHJpdGVcIjoge1xuICAgICAgXCJ1cmxcIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3Nwcml0ZS9jaGFtcGlvbjEucG5nXCIsXG4gICAgICBcInhcIjogNDgsXG4gICAgICBcInlcIjogMFxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIlRocm91Z2hvdXQgVmFsb3JhbiwgdGhlIHJlc29sdmUgb2YgRGVtYWNpYSdzIG1pbGl0YXJ5IGlzIGFsdGVybmF0ZWx5IGNlbGVicmF0ZWQgb3IgZGVzcGlzZWQsIGJ1dCBhbHdheXMgcmVzcGVjdGVkLiBUaGVpciAnJ3plcm8gdG9sZXJhbmNlJycgbW9yYWwgY29kZSBpcyBzdHJpY3RseSB1cGhlbGQgYnkgY2l2aWxpYW5zIGFuZCBzb2xkaWVycyBhbGlrZS4gSW4gY29tYmF0LCB0aGlzIG1lYW5zIERlbWFjaWFuIHRyb29wcyBtYXkgbm90IC4uLlwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwiZ25hclwiLFxuICAgIFwia2V5XCI6IFwiMTUwXCIsXG4gICAgXCJuYW1lXCI6IFwiR25hclwiLFxuICAgIFwidGl0bGVcIjogXCJ0aGUgTWlzc2luZyBMaW5rXCIsXG4gICAgXCJ0YWdzXCI6IFtcbiAgICAgIFwiRmlnaHRlclwiLFxuICAgICAgXCJUYW5rXCJcbiAgICBdLFxuICAgIFwic3RhdHNcIjoge1xuICAgICAgXCJocFwiOiA1NDAsXG4gICAgICBcImhwcGVybGV2ZWxcIjogNjUsXG4gICAgICBcIm1wXCI6IDEwMCxcbiAgICAgIFwibXBwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJtb3Zlc3BlZWRcIjogMzI1LFxuICAgICAgXCJhcm1vclwiOiAyMyxcbiAgICAgIFwiYXJtb3JwZXJsZXZlbFwiOiAyLjUsXG4gICAgICBcInNwZWxsYmxvY2tcIjogMzAsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiAxNzUsXG4gICAgICBcImhwcmVnZW5cIjogMi41LFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC41LFxuICAgICAgXCJtcHJlZ2VuXCI6IDAsXG4gICAgICBcIm1wcmVnZW5wZXJsZXZlbFwiOiAwLFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNTEsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDMsXG4gICAgICBcImF0dGFja3NwZWVkb2Zmc2V0XCI6IDAsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogNlxuICAgIH0sXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9jaGFtcGlvbi9HbmFyLnBuZ1wiLFxuICAgIFwic3ByaXRlXCI6IHtcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcHJpdGUvY2hhbXBpb24xLnBuZ1wiLFxuICAgICAgXCJ4XCI6IDk2LFxuICAgICAgXCJ5XCI6IDBcbiAgICB9LFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUganVuZ2xlIGRvZXMgbm90IGZvcmdpdmUgYmxpbmRuZXNzLiBFdmVyeSBicm9rZW4gYnJhbmNoIHRlbGxzIGEgc3RvcnkuPGJyPjxicj5JJ3ZlIGh1bnRlZCBldmVyeSBjcmVhdHVyZSB0aGlzIGp1bmdsZSBoYXMgdG8gb2ZmZXIuIEkgd2FzIGNlcnRhaW4gdGhlcmUgd2VyZSBubyBjaGFsbGVuZ2VzIGxlZnQgaGVyZSwgYnV0IG5vdyB0aGVyZSBpcyBzb21ldGhpbmcgbmV3LiBFYWNoIHRyYWNrIGlzIHRoZSBzaXplIG9mIGEgLi4uXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJncmFnYXNcIixcbiAgICBcImtleVwiOiBcIjc5XCIsXG4gICAgXCJuYW1lXCI6IFwiR3JhZ2FzXCIsXG4gICAgXCJ0aXRsZVwiOiBcInRoZSBSYWJibGUgUm91c2VyXCIsXG4gICAgXCJ0YWdzXCI6IFtcbiAgICAgIFwiRmlnaHRlclwiLFxuICAgICAgXCJNYWdlXCJcbiAgICBdLFxuICAgIFwic3RhdHNcIjoge1xuICAgICAgXCJocFwiOiA1ODMuNTIsXG4gICAgICBcImhwcGVybGV2ZWxcIjogODksXG4gICAgICBcIm1wXCI6IDQwMCxcbiAgICAgIFwibXBwZXJsZXZlbFwiOiA0NyxcbiAgICAgIFwibW92ZXNwZWVkXCI6IDMzMCxcbiAgICAgIFwiYXJtb3JcIjogMjYuMDQ4LFxuICAgICAgXCJhcm1vcnBlcmxldmVsXCI6IDMuNixcbiAgICAgIFwic3BlbGxibG9ja1wiOiAzMi4xLFxuICAgICAgXCJzcGVsbGJsb2NrcGVybGV2ZWxcIjogMS4yNSxcbiAgICAgIFwiYXR0YWNrcmFuZ2VcIjogMTI1LFxuICAgICAgXCJocHJlZ2VuXCI6IDUuNSxcbiAgICAgIFwiaHByZWdlbnBlcmxldmVsXCI6IDAuNSxcbiAgICAgIFwibXByZWdlblwiOiA2LFxuICAgICAgXCJtcHJlZ2VucGVybGV2ZWxcIjogMC44LFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNjEuMzgsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDMuNSxcbiAgICAgIFwiYXR0YWNrc3BlZWRvZmZzZXRcIjogLTAuMDQsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMi4wNVxuICAgIH0sXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9jaGFtcGlvbi9HcmFnYXMucG5nXCIsXG4gICAgXCJzcHJpdGVcIjoge1xuICAgICAgXCJ1cmxcIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3Nwcml0ZS9jaGFtcGlvbjEucG5nXCIsXG4gICAgICBcInhcIjogMTQ0LFxuICAgICAgXCJ5XCI6IDBcbiAgICB9LFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgb25seSB0aGluZyBtb3JlIGltcG9ydGFudCB0byBHcmFnYXMgdGhhbiBmaWdodGluZyBpcyBkcmlua2luZy4gSGlzIHVucXVlbmNoYWJsZSB0aGlyc3QgZm9yIHN0cm9uZ2VyIGFsZSBoYXMgbGVkIGhpbSBpbiBzZWFyY2ggb2YgdGhlIG1vc3QgcG90ZW50IGFuZCB1bmNvbnZlbnRpb25hbCBpbmdyZWRpZW50cyB0byB0b3NzIGluIGhpcyBzdGlsbC4gSW1wdWxzaXZlIGFuZCB1bnByZWRpY3RhYmxlLCB0aGlzIHJvd2R5IGNhcm91c2VyIC4uLlwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwiZ3JhdmVzXCIsXG4gICAgXCJrZXlcIjogXCIxMDRcIixcbiAgICBcIm5hbWVcIjogXCJHcmF2ZXNcIixcbiAgICBcInRpdGxlXCI6IFwidGhlIE91dGxhd1wiLFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcIk1hcmtzbWFuXCJcbiAgICBdLFxuICAgIFwic3RhdHNcIjoge1xuICAgICAgXCJocFwiOiA1NTEuMTIsXG4gICAgICBcImhwcGVybGV2ZWxcIjogODQsXG4gICAgICBcIm1wXCI6IDMyMi4yLFxuICAgICAgXCJtcHBlcmxldmVsXCI6IDQwLFxuICAgICAgXCJtb3Zlc3BlZWRcIjogMzQwLFxuICAgICAgXCJhcm1vclwiOiAyNC4zNzYsXG4gICAgICBcImFybW9ycGVybGV2ZWxcIjogMy40LFxuICAgICAgXCJzcGVsbGJsb2NrXCI6IDMwLFxuICAgICAgXCJzcGVsbGJsb2NrcGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrcmFuZ2VcIjogNDI1LFxuICAgICAgXCJocHJlZ2VuXCI6IDYuNjc1LFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC43LFxuICAgICAgXCJtcHJlZ2VuXCI6IDcuOSxcbiAgICAgIFwibXByZWdlbnBlcmxldmVsXCI6IDAuNyxcbiAgICAgIFwiY3JpdFwiOiAwLFxuICAgICAgXCJjcml0cGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlXCI6IDYwLjgzLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VwZXJsZXZlbFwiOiAyLjQxLFxuICAgICAgXCJhdHRhY2tzcGVlZG9mZnNldFwiOiAwLjMsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMi42XG4gICAgfSxcbiAgICBcImljb25cIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL2NoYW1waW9uL0dyYXZlcy5wbmdcIixcbiAgICBcInNwcml0ZVwiOiB7XG4gICAgICBcInVybFwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvc3ByaXRlL2NoYW1waW9uMS5wbmdcIixcbiAgICAgIFwieFwiOiAxOTIsXG4gICAgICBcInlcIjogMFxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIk1hbGNvbG0gR3JhdmVzIGlzIGEgd2FudGVkIG1hbiBpbiBldmVyeSByZWFsbSwgY2l0eSBhbmQgZW1waXJlIGhlIGhhcyB2aXNpdGVkLiBUb3VnaCwgc3Ryb25nLXdpbGxlZCwgYW5kIGFib3ZlIGFsbCwgcmVsZW50bGVzcywgdGhyb3VnaCBoaXMgbGlmZSBvZiBjcmltZSBoZSBoYXMgYW1hc3NlZCAodGhlbiBpbnZhcmlhYmx5IGxvc3QpIGEgc21hbGwgZm9ydHVuZS5cIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcImhlY2FyaW1cIixcbiAgICBcImtleVwiOiBcIjEyMFwiLFxuICAgIFwibmFtZVwiOiBcIkhlY2FyaW1cIixcbiAgICBcInRpdGxlXCI6IFwidGhlIFNoYWRvdyBvZiBXYXJcIixcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJGaWdodGVyXCIsXG4gICAgICBcIlRhbmtcIlxuICAgIF0sXG4gICAgXCJzdGF0c1wiOiB7XG4gICAgICBcImhwXCI6IDU4MCxcbiAgICAgIFwiaHBwZXJsZXZlbFwiOiA5MCxcbiAgICAgIFwibXBcIjogMjc3LjIsXG4gICAgICBcIm1wcGVybGV2ZWxcIjogNDAsXG4gICAgICBcIm1vdmVzcGVlZFwiOiAzNDUsXG4gICAgICBcImFybW9yXCI6IDI2LjcyLFxuICAgICAgXCJhcm1vcnBlcmxldmVsXCI6IDQsXG4gICAgICBcInNwZWxsYmxvY2tcIjogMzIuMSxcbiAgICAgIFwic3BlbGxibG9ja3BlcmxldmVsXCI6IDEuMjUsXG4gICAgICBcImF0dGFja3JhbmdlXCI6IDE3NSxcbiAgICAgIFwiaHByZWdlblwiOiA3LFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC43NSxcbiAgICAgIFwibXByZWdlblwiOiA2LjUsXG4gICAgICBcIm1wcmVnZW5wZXJsZXZlbFwiOiAwLjYsXG4gICAgICBcImNyaXRcIjogMCxcbiAgICAgIFwiY3JpdHBlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja2RhbWFnZVwiOiA1OCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlcGVybGV2ZWxcIjogMy4yLFxuICAgICAgXCJhdHRhY2tzcGVlZG9mZnNldFwiOiAtMC4wNjcyLFxuICAgICAgXCJhdHRhY2tzcGVlZHBlcmxldmVsXCI6IDIuNVxuICAgIH0sXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9jaGFtcGlvbi9IZWNhcmltLnBuZ1wiLFxuICAgIFwic3ByaXRlXCI6IHtcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcHJpdGUvY2hhbXBpb24xLnBuZ1wiLFxuICAgICAgXCJ4XCI6IDI0MCxcbiAgICAgIFwieVwiOiAwXG4gICAgfSxcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiJydCcmVhayB0aGVpciByYW5rcyBhbmQgcmlkZSB0aGVtIGRvd24gd2l0aG91dCBtZXJjeS4gQ3J1c2ggdGhlIGxpdmluZyBhbmQgZmVhc3Qgb24gdGhlaXIgdGVycm9yLicnPGJyPjxicj5IZWNhcmltIGlzIGFuIGFybW9yZWQgY29sb3NzdXMgd2hvIGNoYXJnZXMgZnJvbSB0aGUgU2hhZG93IElzbGVzIGF0IHRoZSBoZWFkIG9mIGEgZGVhdGhseSBob3N0IG9mIHNwZWN0cmFsIGhvcnNlbWVuIHRvIGh1bnQgdGhlIGxpdmluZy4gQSAuLi5cIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcImhlaW1lcmRpbmdlclwiLFxuICAgIFwia2V5XCI6IFwiNzRcIixcbiAgICBcIm5hbWVcIjogXCJIZWltZXJkaW5nZXJcIixcbiAgICBcInRpdGxlXCI6IFwidGhlIFJldmVyZWQgSW52ZW50b3JcIixcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJNYWdlXCIsXG4gICAgICBcIlN1cHBvcnRcIlxuICAgIF0sXG4gICAgXCJzdGF0c1wiOiB7XG4gICAgICBcImhwXCI6IDQ3NixcbiAgICAgIFwiaHBwZXJsZXZlbFwiOiA3NSxcbiAgICAgIFwibXBcIjogMzA3LjIsXG4gICAgICBcIm1wcGVybGV2ZWxcIjogNDAsXG4gICAgICBcIm1vdmVzcGVlZFwiOiAzNDAsXG4gICAgICBcImFybW9yXCI6IDE5LjA0LFxuICAgICAgXCJhcm1vcnBlcmxldmVsXCI6IDMsXG4gICAgICBcInNwZWxsYmxvY2tcIjogMzAsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiA1NTAsXG4gICAgICBcImhwcmVnZW5cIjogMTEuMDA1LFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMS43NSxcbiAgICAgIFwibXByZWdlblwiOiA2LFxuICAgICAgXCJtcHJlZ2VucGVybGV2ZWxcIjogMC44LFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNTUuNTM2LFxuICAgICAgXCJhdHRhY2tkYW1hZ2VwZXJsZXZlbFwiOiAyLjcsXG4gICAgICBcImF0dGFja3NwZWVkb2Zmc2V0XCI6IDAsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMS4zNlxuICAgIH0sXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9jaGFtcGlvbi9IZWltZXJkaW5nZXIucG5nXCIsXG4gICAgXCJzcHJpdGVcIjoge1xuICAgICAgXCJ1cmxcIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3Nwcml0ZS9jaGFtcGlvbjEucG5nXCIsXG4gICAgICBcInhcIjogMjg4LFxuICAgICAgXCJ5XCI6IDBcbiAgICB9LFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJGcm9tIHRoZSBKb3VybmFsIG9mIFByb2Zlc3NvciBDZWNpbCBCLiBIZWltZXJkaW5nZXI8YnI+PGJyPjEwLjE0PGJyPjxicj4wOToxNTxicj48YnI+Q3VycmVudCBtZXRlb3JvbG9naWNhbCBjb25kaXRpb25zIGluIEJhbmRsZSBDaXR5IHNlZW0gb3B0aW1hbC4gQXRtb3NwaGVyaWMgcHJlc3N1cmUgaXMgaWRlYWwgZm9yIHRvZGF5J3MgZXhwZXJpbWVudHMhPGJyPjxicj5SdW5uaW5nIGEgZmlmdGggdHJpYWwgZm9yIG15IC4uLlwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwiaWxsYW9pXCIsXG4gICAgXCJrZXlcIjogXCI0MjBcIixcbiAgICBcIm5hbWVcIjogXCJJbGxhb2lcIixcbiAgICBcInRpdGxlXCI6IFwidGhlIEtyYWtlbiBQcmllc3Rlc3NcIixcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJGaWdodGVyXCIsXG4gICAgICBcIlRhbmtcIlxuICAgIF0sXG4gICAgXCJzdGF0c1wiOiB7XG4gICAgICBcImhwXCI6IDU4NS42LFxuICAgICAgXCJocHBlcmxldmVsXCI6IDk1LFxuICAgICAgXCJtcFwiOiAzMDAsXG4gICAgICBcIm1wcGVybGV2ZWxcIjogNDAsXG4gICAgICBcIm1vdmVzcGVlZFwiOiAzNDAsXG4gICAgICBcImFybW9yXCI6IDI2LFxuICAgICAgXCJhcm1vcnBlcmxldmVsXCI6IDMuOCxcbiAgICAgIFwic3BlbGxibG9ja1wiOiAzMi4xLFxuICAgICAgXCJzcGVsbGJsb2NrcGVybGV2ZWxcIjogMS4yNSxcbiAgICAgIFwiYXR0YWNrcmFuZ2VcIjogMTI1LFxuICAgICAgXCJocHJlZ2VuXCI6IDkuNSxcbiAgICAgIFwiaHByZWdlbnBlcmxldmVsXCI6IDAuOCxcbiAgICAgIFwibXByZWdlblwiOiA3LjUsXG4gICAgICBcIm1wcmVnZW5wZXJsZXZlbFwiOiAwLjc1LFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNjAsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDUsXG4gICAgICBcImF0dGFja3NwZWVkb2Zmc2V0XCI6IDAsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMi41XG4gICAgfSxcbiAgICBcImljb25cIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL2NoYW1waW9uL0lsbGFvaS5wbmdcIixcbiAgICBcInNwcml0ZVwiOiB7XG4gICAgICBcInVybFwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvc3ByaXRlL2NoYW1waW9uMS5wbmdcIixcbiAgICAgIFwieFwiOiAzMzYsXG4gICAgICBcInlcIjogMFxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIicnSSdtIG5vdCBiaWcgb24gc2VybW9ucy4gQnJva2VuIGJvbmVzIHRlYWNoIGJldHRlciBsZXNzb25zLicnPGJyPklsbGFvaSdzIHBvd2VyZnVsIHBoeXNpcXVlIGlzIGR3YXJmZWQgb25seSBieSBoZXIgaW5kb21pdGFibGUgZmFpdGguIEFzIHRoZSBwcm9waGV0IG9mIHRoZSBHcmVhdCBLcmFrZW4sIHNoZSB1c2VzIGEgaHVnZSwgZ29sZGVuIGlkb2wgdG8gcmlwIGhlciBmb2VzJyBzcGlyaXRzIGZyb20gdGhlaXIgYm9kaWVzIGFuZCAuLi5cIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcImlyZWxpYVwiLFxuICAgIFwia2V5XCI6IFwiMzlcIixcbiAgICBcIm5hbWVcIjogXCJJcmVsaWFcIixcbiAgICBcInRpdGxlXCI6IFwidGhlIFdpbGwgb2YgdGhlIEJsYWRlc1wiLFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcIkZpZ2h0ZXJcIixcbiAgICAgIFwiQXNzYXNzaW5cIlxuICAgIF0sXG4gICAgXCJzdGF0c1wiOiB7XG4gICAgICBcImhwXCI6IDYwNy4yLFxuICAgICAgXCJocHBlcmxldmVsXCI6IDkwLFxuICAgICAgXCJtcFwiOiAzMzguOCxcbiAgICAgIFwibXBwZXJsZXZlbFwiOiAzMixcbiAgICAgIFwibW92ZXNwZWVkXCI6IDM0NSxcbiAgICAgIFwiYXJtb3JcIjogMjUuMyxcbiAgICAgIFwiYXJtb3JwZXJsZXZlbFwiOiAzLjc1LFxuICAgICAgXCJzcGVsbGJsb2NrXCI6IDMyLjEsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAxLjI1LFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiAxMjUsXG4gICAgICBcImhwcmVnZW5cIjogOC41OSxcbiAgICAgIFwiaHByZWdlbnBlcmxldmVsXCI6IDAuNjUsXG4gICAgICBcIm1wcmVnZW5cIjogOC4xLFxuICAgICAgXCJtcHJlZ2VucGVybGV2ZWxcIjogMC42NSxcbiAgICAgIFwiY3JpdFwiOiAwLFxuICAgICAgXCJjcml0cGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlXCI6IDYxLjU0NCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlcGVybGV2ZWxcIjogMy4zLFxuICAgICAgXCJhdHRhY2tzcGVlZG9mZnNldFwiOiAtMC4wNixcbiAgICAgIFwiYXR0YWNrc3BlZWRwZXJsZXZlbFwiOiAzLjJcbiAgICB9LFxuICAgIFwiaWNvblwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvY2hhbXBpb24vSXJlbGlhLnBuZ1wiLFxuICAgIFwic3ByaXRlXCI6IHtcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcHJpdGUvY2hhbXBpb24xLnBuZ1wiLFxuICAgICAgXCJ4XCI6IDM4NCxcbiAgICAgIFwieVwiOiAwXG4gICAgfSxcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiJydUaGUgc3dvcmQgZmxvdXJpc2hlcywgYXMgdGhvdWdoIHBhaW50aW5nIHdpdGggYmxvb2QuJyc8YnI+PGJyPlRoZSBJb25pYW5zIGhhdmUgZGV2ZWxvcGVkIHNvbWUgb2YgdGhlIG1vc3QgYnJlYXRodGFraW5nIGFuZCBkZWFkbHkgbWFydGlhbCBhcnRzIGluIGFsbCBvZiBSdW5ldGVycmEgLSBqdXN0IG9uZSBtYW5pZmVzdGF0aW9uIG9mIHRoZWlyIHB1cnN1aXQgb2YgZW5saWdodGVubWVudC4gVGhlIG1vc3QgcmVtYXJrYWJsZSBibGFkZSAuLi5cIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcIml2ZXJuXCIsXG4gICAgXCJrZXlcIjogXCI0MjdcIixcbiAgICBcIm5hbWVcIjogXCJJdmVyblwiLFxuICAgIFwidGl0bGVcIjogXCJ0aGUgR3JlZW4gRmF0aGVyXCIsXG4gICAgXCJ0YWdzXCI6IFtcbiAgICAgIFwiU3VwcG9ydFwiLFxuICAgICAgXCJNYWdlXCJcbiAgICBdLFxuICAgIFwic3RhdHNcIjoge1xuICAgICAgXCJocFwiOiA1ODAsXG4gICAgICBcImhwcGVybGV2ZWxcIjogOTAsXG4gICAgICBcIm1wXCI6IDQ1MCxcbiAgICAgIFwibXBwZXJsZXZlbFwiOiA2MCxcbiAgICAgIFwibW92ZXNwZWVkXCI6IDMzMCxcbiAgICAgIFwiYXJtb3JcIjogMjIsXG4gICAgICBcImFybW9ycGVybGV2ZWxcIjogMy41LFxuICAgICAgXCJzcGVsbGJsb2NrXCI6IDMyLjEsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAxLjI1LFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiAxMjUsXG4gICAgICBcImhwcmVnZW5cIjogNi45LFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC44NSxcbiAgICAgIFwibXByZWdlblwiOiA2LFxuICAgICAgXCJtcHJlZ2VucGVybGV2ZWxcIjogMC43NSxcbiAgICAgIFwiY3JpdFwiOiAwLFxuICAgICAgXCJjcml0cGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlXCI6IDUwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VwZXJsZXZlbFwiOiAzLFxuICAgICAgXCJhdHRhY2tzcGVlZG9mZnNldFwiOiAtMC4wMyxcbiAgICAgIFwiYXR0YWNrc3BlZWRwZXJsZXZlbFwiOiAzLjRcbiAgICB9LFxuICAgIFwiaWNvblwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvY2hhbXBpb24vSXZlcm4ucG5nXCIsXG4gICAgXCJzcHJpdGVcIjoge1xuICAgICAgXCJ1cmxcIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3Nwcml0ZS9jaGFtcGlvbjQucG5nXCIsXG4gICAgICBcInhcIjogOTYsXG4gICAgICBcInlcIjogNDhcbiAgICB9LFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJJdmVybiBCcmFtYmxlZm9vdCwga25vd24gdG8gbWFueSBhcyB0aGUgR3JlZW4gRmF0aGVyLCBpcyBhIHBlY3VsaWFyIGhhbGYgbWFuLCBoYWxmIHRyZWUgd2hvIHJvYW1zIFJ1bmV0ZXJyYSdzIGZvcmVzdHMsIGN1bHRpdmF0aW5nIGxpZmUgZXZlcnl3aGVyZSBoZSBnb2VzLiBIZSBrbm93cyB0aGUgc2VjcmV0cyBvZiB0aGUgbmF0dXJhbCB3b3JsZCwgYW5kIGhvbGRzIGRlZXAgZnJpZW5kc2hpcHMgd2l0aCBhbGwgdGhpbmdzIHRoYXQgZ3JvdywuLi5cIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcImphbm5hXCIsXG4gICAgXCJrZXlcIjogXCI0MFwiLFxuICAgIFwibmFtZVwiOiBcIkphbm5hXCIsXG4gICAgXCJ0aXRsZVwiOiBcInRoZSBTdG9ybSdzIEZ1cnlcIixcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJTdXBwb3J0XCIsXG4gICAgICBcIk1hZ2VcIlxuICAgIF0sXG4gICAgXCJzdGF0c1wiOiB7XG4gICAgICBcImhwXCI6IDQ4Ny4wNCxcbiAgICAgIFwiaHBwZXJsZXZlbFwiOiA3OCxcbiAgICAgIFwibXBcIjogNDA5LjUyLFxuICAgICAgXCJtcHBlcmxldmVsXCI6IDY0LFxuICAgICAgXCJtb3Zlc3BlZWRcIjogMzM1LFxuICAgICAgXCJhcm1vclwiOiAxOS4zODQsXG4gICAgICBcImFybW9ycGVybGV2ZWxcIjogMy44LFxuICAgICAgXCJzcGVsbGJsb2NrXCI6IDMwLFxuICAgICAgXCJzcGVsbGJsb2NrcGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrcmFuZ2VcIjogNDc1LFxuICAgICAgXCJocHJlZ2VuXCI6IDUuNDIsXG4gICAgICBcImhwcmVnZW5wZXJsZXZlbFwiOiAwLjU1LFxuICAgICAgXCJtcHJlZ2VuXCI6IDExLjUsXG4gICAgICBcIm1wcmVnZW5wZXJsZXZlbFwiOiAwLjQsXG4gICAgICBcImNyaXRcIjogMCxcbiAgICAgIFwiY3JpdHBlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja2RhbWFnZVwiOiA1MS45NTYsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDIuOTUsXG4gICAgICBcImF0dGFja3NwZWVkb2Zmc2V0XCI6IDAsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMi42MVxuICAgIH0sXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9jaGFtcGlvbi9KYW5uYS5wbmdcIixcbiAgICBcInNwcml0ZVwiOiB7XG4gICAgICBcInVybFwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvc3ByaXRlL2NoYW1waW9uMS5wbmdcIixcbiAgICAgIFwieFwiOiA0MzIsXG4gICAgICBcInlcIjogMFxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZXJlIGFyZSB0aG9zZSBzb3JjZXJlcnMgd2hvIGdpdmUgdGhlbXNlbHZlcyBvdmVyIHRvIHRoZSBwcmltYWwgcG93ZXJzIG9mIG5hdHVyZSwgZm9yZ29pbmcgdGhlIGxlYXJuZWQgcHJhY3RpY2Ugb2YgbWFnaWMuIFN1Y2ggYSBzb3JjZXJlc3MgaXMgSmFubmEsIHdobyBmaXJzdCBsZWFybmVkIG1hZ2ljIGFzIGFuIG9ycGhhbiBncm93aW5nIHVwIGFtaWRzdCB0aGUgY2hhb3MgdGhhdCBpcyB0aGUgY2l0eS1zdGF0ZSBvZiBaYXVuLiAuLi5cIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcImphcnZhbml2XCIsXG4gICAgXCJrZXlcIjogXCI1OVwiLFxuICAgIFwibmFtZVwiOiBcIkphcnZhbiBJVlwiLFxuICAgIFwidGl0bGVcIjogXCJ0aGUgRXhlbXBsYXIgb2YgRGVtYWNpYVwiLFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcIlRhbmtcIixcbiAgICAgIFwiRmlnaHRlclwiXG4gICAgXSxcbiAgICBcInN0YXRzXCI6IHtcbiAgICAgIFwiaHBcIjogNTcxLjIsXG4gICAgICBcImhwcGVybGV2ZWxcIjogOTAsXG4gICAgICBcIm1wXCI6IDMwMi4yLFxuICAgICAgXCJtcHBlcmxldmVsXCI6IDQwLFxuICAgICAgXCJtb3Zlc3BlZWRcIjogMzQwLFxuICAgICAgXCJhcm1vclwiOiAyOSxcbiAgICAgIFwiYXJtb3JwZXJsZXZlbFwiOiAzLjYsXG4gICAgICBcInNwZWxsYmxvY2tcIjogMzIuMSxcbiAgICAgIFwic3BlbGxibG9ja3BlcmxldmVsXCI6IDEuMjUsXG4gICAgICBcImF0dGFja3JhbmdlXCI6IDE3NSxcbiAgICAgIFwiaHByZWdlblwiOiA4LjE3NSxcbiAgICAgIFwiaHByZWdlbnBlcmxldmVsXCI6IDAuNyxcbiAgICAgIFwibXByZWdlblwiOiA2Ljc1NSxcbiAgICAgIFwibXByZWdlbnBlcmxldmVsXCI6IDAuNDUsXG4gICAgICBcImNyaXRcIjogMCxcbiAgICAgIFwiY3JpdHBlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja2RhbWFnZVwiOiA1NS43MTIsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDMuNCxcbiAgICAgIFwiYXR0YWNrc3BlZWRvZmZzZXRcIjogLTAuMDUsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMi41XG4gICAgfSxcbiAgICBcImljb25cIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL2NoYW1waW9uL0phcnZhbklWLnBuZ1wiLFxuICAgIFwic3ByaXRlXCI6IHtcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcHJpdGUvY2hhbXBpb24xLnBuZ1wiLFxuICAgICAgXCJ4XCI6IDAsXG4gICAgICBcInlcIjogNDhcbiAgICB9LFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCInJ1RoZXJlIGlzIG9ubHkgb25lIHRydXRoLCBhbmQgeW91IHdpbGwgZmluZCBpdCBhdCB0aGUgcG9pbnQgb2YgbXkgbGFuY2UuJyc8YnI+PGJyPkFzIHRoZSByb3lhbCBmYW1pbHkgb2YgRGVtYWNpYSBmb3IgY2VudHVyaWVzLCBtZW1iZXJzIG9mIHRoZSBMaWdodHNoaWVsZCBsaW5lIGhhdmUgc3BlbnQgdGhlaXIgbGl2ZXMgd2FnaW5nIHdhciBhZ2FpbnN0IGFueSB3aG8gb3Bwb3NlZCBEZW1hY2lhbiBldGhpY3MuIEl0IGlzIHNhaWQgdGhhdCAuLi5cIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcImpheFwiLFxuICAgIFwia2V5XCI6IFwiMjRcIixcbiAgICBcIm5hbWVcIjogXCJKYXhcIixcbiAgICBcInRpdGxlXCI6IFwiR3JhbmRtYXN0ZXIgYXQgQXJtc1wiLFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcIkZpZ2h0ZXJcIixcbiAgICAgIFwiQXNzYXNzaW5cIlxuICAgIF0sXG4gICAgXCJzdGF0c1wiOiB7XG4gICAgICBcImhwXCI6IDU5Mi44LFxuICAgICAgXCJocHBlcmxldmVsXCI6IDg1LFxuICAgICAgXCJtcFwiOiAzMzguOCxcbiAgICAgIFwibXBwZXJsZXZlbFwiOiAzMixcbiAgICAgIFwibW92ZXNwZWVkXCI6IDM1MCxcbiAgICAgIFwiYXJtb3JcIjogMjcuMDQsXG4gICAgICBcImFybW9ycGVybGV2ZWxcIjogMyxcbiAgICAgIFwic3BlbGxibG9ja1wiOiAzMi4xLFxuICAgICAgXCJzcGVsbGJsb2NrcGVybGV2ZWxcIjogMS4yNSxcbiAgICAgIFwiYXR0YWNrcmFuZ2VcIjogMTI1LFxuICAgICAgXCJocHJlZ2VuXCI6IDguMzcsXG4gICAgICBcImhwcmVnZW5wZXJsZXZlbFwiOiAwLjU1LFxuICAgICAgXCJtcHJlZ2VuXCI6IDcuNTc1LFxuICAgICAgXCJtcHJlZ2VucGVybGV2ZWxcIjogMC43LFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNjEuOTcsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDMuMzc1LFxuICAgICAgXCJhdHRhY2tzcGVlZG9mZnNldFwiOiAtMC4wMixcbiAgICAgIFwiYXR0YWNrc3BlZWRwZXJsZXZlbFwiOiAzLjRcbiAgICB9LFxuICAgIFwiaWNvblwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvY2hhbXBpb24vSmF4LnBuZ1wiLFxuICAgIFwic3ByaXRlXCI6IHtcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcHJpdGUvY2hhbXBpb24xLnBuZ1wiLFxuICAgICAgXCJ4XCI6IDQ4LFxuICAgICAgXCJ5XCI6IDQ4XG4gICAgfSxcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiSXQgaXMgc2VsZG9tIHRoZSBjYXNlIHdoZXJlIGEgY2hhbXBpb24gaXMgZGVmaW5lZCBieSBoaXMgYWN0aW9ucyBhZnRlciBqb2luaW5nIHRoZSBMZWFndWUgb2YgTGVnZW5kcyByYXRoZXIgdGhhbiBiZWZvcmUuIFN1Y2ggaXMgdGhlIGNhc2Ugd2l0aCBKYXgsIGZvciB3aG9tIHRoZSBhcmd1bWVudCBjb3VsZCBiZSBtYWRlIHRoYXQgaGUgaXMgdGhlIG1vc3QgcHJvbGlmaWMgdG91cm5hbWVudCBmaWdodGVyIGN1cnJlbnRseSBhdCB0aGUgLi4uXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJqYXljZVwiLFxuICAgIFwia2V5XCI6IFwiMTI2XCIsXG4gICAgXCJuYW1lXCI6IFwiSmF5Y2VcIixcbiAgICBcInRpdGxlXCI6IFwidGhlIERlZmVuZGVyIG9mIFRvbW9ycm93XCIsXG4gICAgXCJ0YWdzXCI6IFtcbiAgICAgIFwiRmlnaHRlclwiLFxuICAgICAgXCJNYXJrc21hblwiXG4gICAgXSxcbiAgICBcInN0YXRzXCI6IHtcbiAgICAgIFwiaHBcIjogNTcxLjIsXG4gICAgICBcImhwcGVybGV2ZWxcIjogOTAsXG4gICAgICBcIm1wXCI6IDM1Ny4yLFxuICAgICAgXCJtcHBlcmxldmVsXCI6IDM3LFxuICAgICAgXCJtb3Zlc3BlZWRcIjogMzM1LFxuICAgICAgXCJhcm1vclwiOiAyMi4zOCxcbiAgICAgIFwiYXJtb3JwZXJsZXZlbFwiOiAzLjUsXG4gICAgICBcInNwZWxsYmxvY2tcIjogMzAsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiAxMjUsXG4gICAgICBcImhwcmVnZW5cIjogNy4zNCxcbiAgICAgIFwiaHByZWdlbnBlcmxldmVsXCI6IDAuOCxcbiAgICAgIFwibXByZWdlblwiOiA2LFxuICAgICAgXCJtcHJlZ2VucGVybGV2ZWxcIjogMC44LFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNTAuMzgsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDMuNSxcbiAgICAgIFwiYXR0YWNrc3BlZWRvZmZzZXRcIjogLTAuMDUsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogM1xuICAgIH0sXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9jaGFtcGlvbi9KYXljZS5wbmdcIixcbiAgICBcInNwcml0ZVwiOiB7XG4gICAgICBcInVybFwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvc3ByaXRlL2NoYW1waW9uMS5wbmdcIixcbiAgICAgIFwieFwiOiA5NixcbiAgICAgIFwieVwiOiA0OFxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIkFybWVkIHdpdGggd2l0LCBjaGFybSwgYW5kIGhpcyBzaWduYXR1cmUgdHJhbnNmb3JtaW5nIGhhbW1lciwgSmF5Y2UgbGl2ZXMgdG8gcHJvdGVjdCBoaXMgbmF0aXZlIFBpbHRvdmVyLiBMb25nIGJlZm9yZSBoaXMgbmF0aW9uIGNhbGxlZCBoaW0gYSBoZXJvLCBob3dldmVyLCBoZSB3YXMgYSBwcm9taXNpbmcgeW91bmcgaW52ZW50b3IuIFdoZW4gUGlsdG92ZXIgY29tbWlzc2lvbmVkIGhpbSB0byBzdHVkeSBhIHJhcmUgYXJjYW5lIC4uLlwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwiamhpblwiLFxuICAgIFwia2V5XCI6IFwiMjAyXCIsXG4gICAgXCJuYW1lXCI6IFwiSmhpblwiLFxuICAgIFwidGl0bGVcIjogXCJ0aGUgVmlydHVvc29cIixcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJNYXJrc21hblwiLFxuICAgICAgXCJBc3Nhc3NpblwiXG4gICAgXSxcbiAgICBcInN0YXRzXCI6IHtcbiAgICAgIFwiaHBcIjogNTQwLFxuICAgICAgXCJocHBlcmxldmVsXCI6IDg1LFxuICAgICAgXCJtcFwiOiAzMDAsXG4gICAgICBcIm1wcGVybGV2ZWxcIjogNTAsXG4gICAgICBcIm1vdmVzcGVlZFwiOiAzMzAsXG4gICAgICBcImFybW9yXCI6IDIwLFxuICAgICAgXCJhcm1vcnBlcmxldmVsXCI6IDMuNSxcbiAgICAgIFwic3BlbGxibG9ja1wiOiAzMCxcbiAgICAgIFwic3BlbGxibG9ja3BlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja3JhbmdlXCI6IDU1MCxcbiAgICAgIFwiaHByZWdlblwiOiA2LFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC41NSxcbiAgICAgIFwibXByZWdlblwiOiA2LFxuICAgICAgXCJtcHJlZ2VucGVybGV2ZWxcIjogMC44LFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNTMsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDQsXG4gICAgICBcImF0dGFja3NwZWVkb2Zmc2V0XCI6IDAsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMFxuICAgIH0sXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9jaGFtcGlvbi9KaGluLnBuZ1wiLFxuICAgIFwic3ByaXRlXCI6IHtcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcHJpdGUvY2hhbXBpb24xLnBuZ1wiLFxuICAgICAgXCJ4XCI6IDE0NCxcbiAgICAgIFwieVwiOiA0OFxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIicnQXJ0IHJlcXVpcmVzIGEgY2VydGFpbi4uLmNydWVsdHkuJyc8YnI+PGJyPkpoaW4gaXMgYSBtZXRpY3Vsb3VzIGNyaW1pbmFsIHBzeWNob3BhdGggd2hvIGJlbGlldmVzIG11cmRlciBpcyBhcnQuIE9uY2UgYW4gSW9uaWFuIHByaXNvbmVyLCBidXQgZnJlZWQgYnkgc2hhZG93eSBlbGVtZW50cyB3aXRoaW4gSW9uaWEncyBydWxpbmcgY291bmNpbCwgdGhlIHNlcmlhbCBraWxsZXIgbm93IHdvcmtzIGFzIHRoZWlyIGNhYmFsJ3MgLi4uXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJqaW54XCIsXG4gICAgXCJrZXlcIjogXCIyMjJcIixcbiAgICBcIm5hbWVcIjogXCJKaW54XCIsXG4gICAgXCJ0aXRsZVwiOiBcInRoZSBMb29zZSBDYW5ub25cIixcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJNYXJrc21hblwiXG4gICAgXSxcbiAgICBcInN0YXRzXCI6IHtcbiAgICAgIFwiaHBcIjogNTE3Ljc2LFxuICAgICAgXCJocHBlcmxldmVsXCI6IDgyLFxuICAgICAgXCJtcFwiOiAyNDUuNixcbiAgICAgIFwibXBwZXJsZXZlbFwiOiA0NSxcbiAgICAgIFwibW92ZXNwZWVkXCI6IDMyNSxcbiAgICAgIFwiYXJtb3JcIjogMjIuODgsXG4gICAgICBcImFybW9ycGVybGV2ZWxcIjogMy41LFxuICAgICAgXCJzcGVsbGJsb2NrXCI6IDMwLFxuICAgICAgXCJzcGVsbGJsb2NrcGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrcmFuZ2VcIjogNTI1LFxuICAgICAgXCJocHJlZ2VuXCI6IDUuODQsXG4gICAgICBcImhwcmVnZW5wZXJsZXZlbFwiOiAwLjUsXG4gICAgICBcIm1wcmVnZW5cIjogNi42OCxcbiAgICAgIFwibXByZWdlbnBlcmxldmVsXCI6IDEsXG4gICAgICBcImNyaXRcIjogMCxcbiAgICAgIFwiY3JpdHBlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja2RhbWFnZVwiOiA1OC40NixcbiAgICAgIFwiYXR0YWNrZGFtYWdlcGVybGV2ZWxcIjogMi40MSxcbiAgICAgIFwiYXR0YWNrc3BlZWRvZmZzZXRcIjogMCxcbiAgICAgIFwiYXR0YWNrc3BlZWRwZXJsZXZlbFwiOiAxXG4gICAgfSxcbiAgICBcImljb25cIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL2NoYW1waW9uL0ppbngucG5nXCIsXG4gICAgXCJzcHJpdGVcIjoge1xuICAgICAgXCJ1cmxcIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3Nwcml0ZS9jaGFtcGlvbjEucG5nXCIsXG4gICAgICBcInhcIjogMTkyLFxuICAgICAgXCJ5XCI6IDQ4XG4gICAgfSxcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiSmlueCBsaXZlcyB0byB3cmVhayBoYXZvYyB3aXRob3V0IGEgdGhvdWdodCBmb3IgdGhlIGNvbnNlcXVlbmNlcywgbGVhdmluZyBhIHRyYWlsIG9mIG1heWhlbSBhbmQgcGFuaWMgaW4gaGVyIHdha2UuIEEgbWFuaWMgYW5kIGltcHVsc2l2ZSBjcmltaW5hbCwgc2hlIGRlc3Bpc2VzIG5vdGhpbmcgbW9yZSB0aGFuIGJvcmVkb20sIGFuZCBnbGVlZnVsbHkgYnJpbmdzIGhlciBvd24gdm9sYXRpbGUgYnJhbmQgb2YgcGFuZGVtb25pdW0gdG8gLi4uXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJrYWxpc3RhXCIsXG4gICAgXCJrZXlcIjogXCI0MjlcIixcbiAgICBcIm5hbWVcIjogXCJLYWxpc3RhXCIsXG4gICAgXCJ0aXRsZVwiOiBcInRoZSBTcGVhciBvZiBWZW5nZWFuY2VcIixcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJNYXJrc21hblwiXG4gICAgXSxcbiAgICBcInN0YXRzXCI6IHtcbiAgICAgIFwiaHBcIjogNTE3Ljc2LFxuICAgICAgXCJocHBlcmxldmVsXCI6IDgzLFxuICAgICAgXCJtcFwiOiAyMzEuOCxcbiAgICAgIFwibXBwZXJsZXZlbFwiOiAzNSxcbiAgICAgIFwibW92ZXNwZWVkXCI6IDMyNSxcbiAgICAgIFwiYXJtb3JcIjogMTkuMDEyLFxuICAgICAgXCJhcm1vcnBlcmxldmVsXCI6IDMuNSxcbiAgICAgIFwic3BlbGxibG9ja1wiOiAzMCxcbiAgICAgIFwic3BlbGxibG9ja3BlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja3JhbmdlXCI6IDU1MCxcbiAgICAgIFwiaHByZWdlblwiOiA2LFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC41NSxcbiAgICAgIFwibXByZWdlblwiOiA2LjMsXG4gICAgICBcIm1wcmVnZW5wZXJsZXZlbFwiOiAwLjQsXG4gICAgICBcImNyaXRcIjogMCxcbiAgICAgIFwiY3JpdHBlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja2RhbWFnZVwiOiA2MyxcbiAgICAgIFwiYXR0YWNrZGFtYWdlcGVybGV2ZWxcIjogMi45LFxuICAgICAgXCJhdHRhY2tzcGVlZG9mZnNldFwiOiAtMC4wMyxcbiAgICAgIFwiYXR0YWNrc3BlZWRwZXJsZXZlbFwiOiAyLjVcbiAgICB9LFxuICAgIFwiaWNvblwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvY2hhbXBpb24vS2FsaXN0YS5wbmdcIixcbiAgICBcInNwcml0ZVwiOiB7XG4gICAgICBcInVybFwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvc3ByaXRlL2NoYW1waW9uMS5wbmdcIixcbiAgICAgIFwieFwiOiAyNDAsXG4gICAgICBcInlcIjogNDhcbiAgICB9LFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCInJ1doZW4gd3JvbmdlZCwgd2Ugc2VlayBqdXN0aWNlLiBXaGVuIGh1cnQsIHdlIHN0cmlrZSBiYWNrLiBXaGVuIGJldHJheWVkLCB0aGUgU3BlYXIgb2YgVmVuZ2VhbmNlIHN0cmlrZXMhJyc8YnI+PGJyPkEgc3BlY3RlciBvZiB3cmF0aCBhbmQgcmV0cmlidXRpb24sIEthbGlzdGEgaXMgdGhlIHVuZHlpbmcgc3Bpcml0IG9mIHZlbmdlYW5jZSwgYW4gYXJtb3JlZCBuaWdodG1hcmUgc3VtbW9uZWQgZnJvbSB0aGUgU2hhZG93IElzbGVzIHRvIC4uLlwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwia2FybWFcIixcbiAgICBcImtleVwiOiBcIjQzXCIsXG4gICAgXCJuYW1lXCI6IFwiS2FybWFcIixcbiAgICBcInRpdGxlXCI6IFwidGhlIEVubGlnaHRlbmVkIE9uZVwiLFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcIk1hZ2VcIixcbiAgICAgIFwiU3VwcG9ydFwiXG4gICAgXSxcbiAgICBcInN0YXRzXCI6IHtcbiAgICAgIFwiaHBcIjogNTIyLjQ0LFxuICAgICAgXCJocHBlcmxldmVsXCI6IDgzLFxuICAgICAgXCJtcFwiOiAzNzQsXG4gICAgICBcIm1wcGVybGV2ZWxcIjogNTAsXG4gICAgICBcIm1vdmVzcGVlZFwiOiAzMzUsXG4gICAgICBcImFybW9yXCI6IDIwLjM4NCxcbiAgICAgIFwiYXJtb3JwZXJsZXZlbFwiOiAzLjgsXG4gICAgICBcInNwZWxsYmxvY2tcIjogMzAsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiA1MjUsXG4gICAgICBcImhwcmVnZW5cIjogNS42MixcbiAgICAgIFwiaHByZWdlbnBlcmxldmVsXCI6IDAuNTUsXG4gICAgICBcIm1wcmVnZW5cIjogOC41LFxuICAgICAgXCJtcHJlZ2VucGVybGV2ZWxcIjogMC44LFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNTMuNTQ0LFxuICAgICAgXCJhdHRhY2tkYW1hZ2VwZXJsZXZlbFwiOiAzLjMsXG4gICAgICBcImF0dGFja3NwZWVkb2Zmc2V0XCI6IDAsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMi4zXG4gICAgfSxcbiAgICBcImljb25cIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL2NoYW1waW9uL0thcm1hLnBuZ1wiLFxuICAgIFwic3ByaXRlXCI6IHtcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcHJpdGUvY2hhbXBpb24xLnBuZ1wiLFxuICAgICAgXCJ4XCI6IDI4OCxcbiAgICAgIFwieVwiOiA0OFxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIkthcm1hIGlzIGEgd29tYW4gb2YgaW5kb21pdGFibGUgd2lsbCBhbmQgdW5ib3VuZCBzcGlyaXR1YWwgcG93ZXIuIFNoZSBpcyB0aGUgc291bCBvZiBJb25pYSBtYWRlIG1hbmlmZXN0IGFuZCBhbiBpbnNwaXJpbmcgcHJlc2VuY2Ugb24gdGhlIGJhdHRsZWZpZWxkLCBzaGllbGRpbmcgaGVyIGFsbGllcyBhbmQgdHVybmluZyBiYWNrIGhlciBmb2VzLiBBIHN0cm9uZyBsZWFkZXIgdG9ybiBiZXR3ZWVuIHRyYWRpdGlvbiBhbmQgLi4uXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJrYXJ0aHVzXCIsXG4gICAgXCJrZXlcIjogXCIzMFwiLFxuICAgIFwibmFtZVwiOiBcIkthcnRodXNcIixcbiAgICBcInRpdGxlXCI6IFwidGhlIERlYXRoc2luZ2VyXCIsXG4gICAgXCJ0YWdzXCI6IFtcbiAgICAgIFwiTWFnZVwiXG4gICAgXSxcbiAgICBcInN0YXRzXCI6IHtcbiAgICAgIFwiaHBcIjogNTE2LFxuICAgICAgXCJocHBlcmxldmVsXCI6IDc1LFxuICAgICAgXCJtcFwiOiAzNzIuNDgsXG4gICAgICBcIm1wcGVybGV2ZWxcIjogNjEsXG4gICAgICBcIm1vdmVzcGVlZFwiOiAzMzUsXG4gICAgICBcImFybW9yXCI6IDIwLjg4LFxuICAgICAgXCJhcm1vcnBlcmxldmVsXCI6IDMuNSxcbiAgICAgIFwic3BlbGxibG9ja1wiOiAzMCxcbiAgICAgIFwic3BlbGxibG9ja3BlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja3JhbmdlXCI6IDQ1MCxcbiAgICAgIFwiaHByZWdlblwiOiA2LjQyLFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC41NSxcbiAgICAgIFwibXByZWdlblwiOiA2LFxuICAgICAgXCJtcHJlZ2VucGVybGV2ZWxcIjogMC44LFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNDUuNjYsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDMuMjUsXG4gICAgICBcImF0dGFja3NwZWVkb2Zmc2V0XCI6IDAsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMi4xMVxuICAgIH0sXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9jaGFtcGlvbi9LYXJ0aHVzLnBuZ1wiLFxuICAgIFwic3ByaXRlXCI6IHtcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcHJpdGUvY2hhbXBpb24xLnBuZ1wiLFxuICAgICAgXCJ4XCI6IDMzNixcbiAgICAgIFwieVwiOiA0OFxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIicnRGVhdGggaXMgbm90IHRoZSBlbmQgb2YgdGhlIGpvdXJuZXksIGl0IGlzIGp1c3QgdGhlIGJlZ2lubmluZy4uLicnPGJyPjxicj5UaGUgaGFyYmluZ2VyIG9mIG9ibGl2aW9uLCBLYXJ0aHVzIGlzIGFuIHVuZHlpbmcgc3Bpcml0IHdob3NlIGhhdW50aW5nIHNvbmdzIGFyZSBhIHByZWx1ZGUgdG8gdGhlIGhvcnJvciBvZiBoaXMgbmlnaHRtYXJpc2ggYXBwZWFyYW5jZS4gVGhlIGxpdmluZyBmZWFyIHRoZSBldGVybml0eSBvZiB1bmRlYXRoLC4uLlwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwia2Fzc2FkaW5cIixcbiAgICBcImtleVwiOiBcIjM4XCIsXG4gICAgXCJuYW1lXCI6IFwiS2Fzc2FkaW5cIixcbiAgICBcInRpdGxlXCI6IFwidGhlIFZvaWQgV2Fsa2VyXCIsXG4gICAgXCJ0YWdzXCI6IFtcbiAgICAgIFwiQXNzYXNzaW5cIixcbiAgICAgIFwiTWFnZVwiXG4gICAgXSxcbiAgICBcInN0YXRzXCI6IHtcbiAgICAgIFwiaHBcIjogNTY0LjA0LFxuICAgICAgXCJocHBlcmxldmVsXCI6IDc4LFxuICAgICAgXCJtcFwiOiAzOTcuNixcbiAgICAgIFwibXBwZXJsZXZlbFwiOiA2NyxcbiAgICAgIFwibW92ZXNwZWVkXCI6IDM0MCxcbiAgICAgIFwiYXJtb3JcIjogMjMuMzc2LFxuICAgICAgXCJhcm1vcnBlcmxldmVsXCI6IDMuMixcbiAgICAgIFwic3BlbGxibG9ja1wiOiAzMCxcbiAgICAgIFwic3BlbGxibG9ja3BlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja3JhbmdlXCI6IDE1MCxcbiAgICAgIFwiaHByZWdlblwiOiA3Ljc5LFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC41LFxuICAgICAgXCJtcHJlZ2VuXCI6IDYsXG4gICAgICBcIm1wcmVnZW5wZXJsZXZlbFwiOiAwLjgsXG4gICAgICBcImNyaXRcIjogMCxcbiAgICAgIFwiY3JpdHBlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja2RhbWFnZVwiOiA1OC44NTIsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDMuOSxcbiAgICAgIFwiYXR0YWNrc3BlZWRvZmZzZXRcIjogLTAuMDIzLFxuICAgICAgXCJhdHRhY2tzcGVlZHBlcmxldmVsXCI6IDMuN1xuICAgIH0sXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9jaGFtcGlvbi9LYXNzYWRpbi5wbmdcIixcbiAgICBcInNwcml0ZVwiOiB7XG4gICAgICBcInVybFwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvc3ByaXRlL2NoYW1waW9uMS5wbmdcIixcbiAgICAgIFwieFwiOiAzODQsXG4gICAgICBcInlcIjogNDhcbiAgICB9LFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGVyZSBpcyBhIHBsYWNlIGJldHdlZW4gZGltZW5zaW9ucyBhbmQgYmV0d2VlbiB3b3JsZHMuIFRvIHNvbWUgaXQgaXMga25vd24gYXMgdGhlIE91dHNpZGUsIHRvIG90aGVycyBpdCBpcyB0aGUgVW5rbm93bi4gVG8gbW9zdCwgaG93ZXZlciwgaXQgaXMgY2FsbGVkIHRoZSBWb2lkLiBEZXNwaXRlIGl0cyBuYW1lLCB0aGUgVm9pZCBpcyBub3QgYW4gZW1wdHkgcGxhY2UsIGJ1dCByYXRoZXIgdGhlIGhvbWUgb2YgdW5zcGVha2FibGUgLi4uXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJrYXRhcmluYVwiLFxuICAgIFwia2V5XCI6IFwiNTVcIixcbiAgICBcIm5hbWVcIjogXCJLYXRhcmluYVwiLFxuICAgIFwidGl0bGVcIjogXCJ0aGUgU2luaXN0ZXIgQmxhZGVcIixcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJBc3Nhc3NpblwiLFxuICAgICAgXCJNYWdlXCJcbiAgICBdLFxuICAgIFwic3RhdHNcIjoge1xuICAgICAgXCJocFwiOiA1MTAsXG4gICAgICBcImhwcGVybGV2ZWxcIjogODMsXG4gICAgICBcIm1wXCI6IDAsXG4gICAgICBcIm1wcGVybGV2ZWxcIjogMCxcbiAgICAgIFwibW92ZXNwZWVkXCI6IDM0NSxcbiAgICAgIFwiYXJtb3JcIjogMjYuODgsXG4gICAgICBcImFybW9ycGVybGV2ZWxcIjogMy41LFxuICAgICAgXCJzcGVsbGJsb2NrXCI6IDMyLjEsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAxLjI1LFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiAxMjUsXG4gICAgICBcImhwcmVnZW5cIjogNC41LFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC41NSxcbiAgICAgIFwibXByZWdlblwiOiAwLFxuICAgICAgXCJtcHJlZ2VucGVybGV2ZWxcIjogMCxcbiAgICAgIFwiY3JpdFwiOiAwLFxuICAgICAgXCJjcml0cGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlXCI6IDU4LFxuICAgICAgXCJhdHRhY2tkYW1hZ2VwZXJsZXZlbFwiOiAzLjIsXG4gICAgICBcImF0dGFja3NwZWVkb2Zmc2V0XCI6IC0wLjA1LFxuICAgICAgXCJhdHRhY2tzcGVlZHBlcmxldmVsXCI6IDIuNzRcbiAgICB9LFxuICAgIFwiaWNvblwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvY2hhbXBpb24vS2F0YXJpbmEucG5nXCIsXG4gICAgXCJzcHJpdGVcIjoge1xuICAgICAgXCJ1cmxcIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3Nwcml0ZS9jaGFtcGlvbjEucG5nXCIsXG4gICAgICBcInhcIjogNDMyLFxuICAgICAgXCJ5XCI6IDQ4XG4gICAgfSxcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiRHJpdmVuIGJ5IGFuIGludGVuc2Uga2lsbGVyIGluc3RpbmN0LCBLYXRhcmluYSB1c2VzIGhlciB0YWxlbnRzIGFzIGFuIGFzc2Fzc2luIGZvciB0aGUgZ2xvcnkgb2YgTm94dXMsIGFuZCB0aGUgY29udGludWVkIGVsZXZhdGlvbiBvZiBoZXIgZmFtaWx5LiBXaGlsZSBoZXIgZmVydm9yIGRyaXZlcyBoZXIgdG8gZXZlci1ncmVhdGVyIGZlYXRzLCBpdCBjYW4gc29tZXRpbWVzIGxlYWQgaGVyIGFzdHJheS48YnI+PGJyPkZyb20gLi4uXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJrYXlsZVwiLFxuICAgIFwia2V5XCI6IFwiMTBcIixcbiAgICBcIm5hbWVcIjogXCJLYXlsZVwiLFxuICAgIFwidGl0bGVcIjogXCJUaGUgSnVkaWNhdG9yXCIsXG4gICAgXCJ0YWdzXCI6IFtcbiAgICAgIFwiRmlnaHRlclwiLFxuICAgICAgXCJTdXBwb3J0XCJcbiAgICBdLFxuICAgIFwic3RhdHNcIjoge1xuICAgICAgXCJocFwiOiA1NzQuMjQsXG4gICAgICBcImhwcGVybGV2ZWxcIjogOTMsXG4gICAgICBcIm1wXCI6IDMyMi4yLFxuICAgICAgXCJtcHBlcmxldmVsXCI6IDQwLFxuICAgICAgXCJtb3Zlc3BlZWRcIjogMzM1LFxuICAgICAgXCJhcm1vclwiOiAyNi44OCxcbiAgICAgIFwiYXJtb3JwZXJsZXZlbFwiOiAzLjUsXG4gICAgICBcInNwZWxsYmxvY2tcIjogMzAsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiAxMjUsXG4gICAgICBcImhwcmVnZW5cIjogOC4yNixcbiAgICAgIFwiaHByZWdlbnBlcmxldmVsXCI6IDAuNzUsXG4gICAgICBcIm1wcmVnZW5cIjogNixcbiAgICAgIFwibXByZWdlbnBlcmxldmVsXCI6IDAuOCxcbiAgICAgIFwiY3JpdFwiOiAwLFxuICAgICAgXCJjcml0cGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlXCI6IDUxLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VwZXJsZXZlbFwiOiAyLjgsXG4gICAgICBcImF0dGFja3NwZWVkb2Zmc2V0XCI6IC0wLjAyLFxuICAgICAgXCJhdHRhY2tzcGVlZHBlcmxldmVsXCI6IDIuMlxuICAgIH0sXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9jaGFtcGlvbi9LYXlsZS5wbmdcIixcbiAgICBcInNwcml0ZVwiOiB7XG4gICAgICBcInVybFwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvc3ByaXRlL2NoYW1waW9uMS5wbmdcIixcbiAgICAgIFwieFwiOiAwLFxuICAgICAgXCJ5XCI6IDk2XG4gICAgfSxcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiSW4gYSB3b3JsZCBmYXIgYXdheSB3aGVyZSBhbiBhbmNpZW50IHdhciBzdGlsbCByYWdlcywgS2F5bGUgd2FzIGEgZ3JlYXQgaGVybyAtIHRoZSBzdHJvbmdlc3Qgb2YgYW4gaW1tb3J0YWwgcmFjZSBjb21taXR0ZWQgdG8gZGVzdHJveWluZyBldmlsIHdoZXJldmVyIGl0IGNvdWxkIGJlIGZvdW5kLiBGb3IgdGVuIHRob3VzYW5kIHllYXJzLCBLYXlsZSBmb3VnaHQgdGlyZWxlc3NseSBmb3IgaGVyIHBlb3BsZSwgd2llbGRpbmcgaGVyIC4uLlwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwia2VubmVuXCIsXG4gICAgXCJrZXlcIjogXCI4NVwiLFxuICAgIFwibmFtZVwiOiBcIktlbm5lblwiLFxuICAgIFwidGl0bGVcIjogXCJ0aGUgSGVhcnQgb2YgdGhlIFRlbXBlc3RcIixcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJNYWdlXCIsXG4gICAgICBcIk1hcmtzbWFuXCJcbiAgICBdLFxuICAgIFwic3RhdHNcIjoge1xuICAgICAgXCJocFwiOiA1MzUuNzIsXG4gICAgICBcImhwcGVybGV2ZWxcIjogNzksXG4gICAgICBcIm1wXCI6IDIwMCxcbiAgICAgIFwibXBwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJtb3Zlc3BlZWRcIjogMzM1LFxuICAgICAgXCJhcm1vclwiOiAyNC4zLFxuICAgICAgXCJhcm1vcnBlcmxldmVsXCI6IDMuNzUsXG4gICAgICBcInNwZWxsYmxvY2tcIjogMzAsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiA1NTAsXG4gICAgICBcImhwcmVnZW5cIjogNS41OSxcbiAgICAgIFwiaHByZWdlbnBlcmxldmVsXCI6IDAuNjUsXG4gICAgICBcIm1wcmVnZW5cIjogNTAsXG4gICAgICBcIm1wcmVnZW5wZXJsZXZlbFwiOiAwLFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNTAuNTQ0LFxuICAgICAgXCJhdHRhY2tkYW1hZ2VwZXJsZXZlbFwiOiAzLjMsXG4gICAgICBcImF0dGFja3NwZWVkb2Zmc2V0XCI6IC0wLjA5NDcsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMy40XG4gICAgfSxcbiAgICBcImljb25cIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL2NoYW1waW9uL0tlbm5lbi5wbmdcIixcbiAgICBcInNwcml0ZVwiOiB7XG4gICAgICBcInVybFwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvc3ByaXRlL2NoYW1waW9uMS5wbmdcIixcbiAgICAgIFwieFwiOiA0OCxcbiAgICAgIFwieVwiOiA5NlxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZXJlIGV4aXN0cyBhbiBhbmNpZW50IG9yZGVyIG9yaWdpbmF0aW5nIGluIHRoZSBJb25pYW4gSXNsZXMgZGVkaWNhdGVkIHRvIHRoZSBwcmVzZXJ2YXRpb24gb2YgYmFsYW5jZS4gT3JkZXIsIGNoYW9zLCBsaWdodCwgZGFya25lc3MgLS0gYWxsIHRoaW5ncyBtdXN0IGV4aXN0IGluIHBlcmZlY3QgaGFybW9ueSBmb3Igc3VjaCBpcyB0aGUgd2F5IG9mIHRoZSB1bml2ZXJzZS4gVGhpcyBvcmRlciBpcyBrbm93biBhcyB0aGUgS2lua291IC4uLlwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwia2hheml4XCIsXG4gICAgXCJrZXlcIjogXCIxMjFcIixcbiAgICBcIm5hbWVcIjogXCJLaGEnWml4XCIsXG4gICAgXCJ0aXRsZVwiOiBcInRoZSBWb2lkcmVhdmVyXCIsXG4gICAgXCJ0YWdzXCI6IFtcbiAgICAgIFwiQXNzYXNzaW5cIixcbiAgICAgIFwiRmlnaHRlclwiXG4gICAgXSxcbiAgICBcInN0YXRzXCI6IHtcbiAgICAgIFwiaHBcIjogNTcyLjgsXG4gICAgICBcImhwcGVybGV2ZWxcIjogODUsXG4gICAgICBcIm1wXCI6IDMyNy4yLFxuICAgICAgXCJtcHBlcmxldmVsXCI6IDQwLFxuICAgICAgXCJtb3Zlc3BlZWRcIjogMzUwLFxuICAgICAgXCJhcm1vclwiOiAyNyxcbiAgICAgIFwiYXJtb3JwZXJsZXZlbFwiOiAzLFxuICAgICAgXCJzcGVsbGJsb2NrXCI6IDMyLjEsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAxLjI1LFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiAxMjUsXG4gICAgICBcImhwcmVnZW5cIjogNy41MSxcbiAgICAgIFwiaHByZWdlbnBlcmxldmVsXCI6IDAuNzUsXG4gICAgICBcIm1wcmVnZW5cIjogNy41OSxcbiAgICAgIFwibXByZWdlbnBlcmxldmVsXCI6IDAuNSxcbiAgICAgIFwiY3JpdFwiOiAwLFxuICAgICAgXCJjcml0cGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlXCI6IDU1LjIwOCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlcGVybGV2ZWxcIjogMy4xLFxuICAgICAgXCJhdHRhY2tzcGVlZG9mZnNldFwiOiAtMC4wNjUsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMi43XG4gICAgfSxcbiAgICBcImljb25cIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL2NoYW1waW9uL0toYXppeC5wbmdcIixcbiAgICBcInNwcml0ZVwiOiB7XG4gICAgICBcInVybFwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvc3ByaXRlL2NoYW1waW9uMS5wbmdcIixcbiAgICAgIFwieFwiOiA5NixcbiAgICAgIFwieVwiOiA5NlxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIkEgdmljaW91cyBWb2lkIHByZWRhdG9yLCBLaGEnWml4IGluZmlsdHJhdGVkIFZhbG9yYW4gdG8gZGV2b3VyIHRoZSBsYW5kJ3MgbW9zdCBwcm9taXNpbmcgY3JlYXR1cmVzLiBXaXRoIGVhY2gga2lsbCBoZSBhYnNvcmJzIGhpcyBwcmV5J3Mgc3RyZW5ndGgsIGV2b2x2aW5nIHRvIGdyb3cgbW9yZSBwb3dlcmZ1bC4gS2hhJ1ppeCBodW5nZXJzIG1vc3QgdG8gY29ucXVlciBhbmQgY29uc3VtZSBSZW5nYXIsIHRoZSBvbmUgYmVhc3QgaGUgLi4uXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJraW5kcmVkXCIsXG4gICAgXCJrZXlcIjogXCIyMDNcIixcbiAgICBcIm5hbWVcIjogXCJLaW5kcmVkXCIsXG4gICAgXCJ0aXRsZVwiOiBcIlRoZSBFdGVybmFsIEh1bnRlcnNcIixcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJNYXJrc21hblwiXG4gICAgXSxcbiAgICBcInN0YXRzXCI6IHtcbiAgICAgIFwiaHBcIjogNTQwLFxuICAgICAgXCJocHBlcmxldmVsXCI6IDg1LFxuICAgICAgXCJtcFwiOiAzMDAsXG4gICAgICBcIm1wcGVybGV2ZWxcIjogMzUsXG4gICAgICBcIm1vdmVzcGVlZFwiOiAzMjUsXG4gICAgICBcImFybW9yXCI6IDIwLFxuICAgICAgXCJhcm1vcnBlcmxldmVsXCI6IDMuNSxcbiAgICAgIFwic3BlbGxibG9ja1wiOiAzMCxcbiAgICAgIFwic3BlbGxibG9ja3BlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja3JhbmdlXCI6IDUwMCxcbiAgICAgIFwiaHByZWdlblwiOiA3LFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC41NSxcbiAgICAgIFwibXByZWdlblwiOiA2Ljk3LFxuICAgICAgXCJtcHJlZ2VucGVybGV2ZWxcIjogMC40LFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNTQsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDEuNyxcbiAgICAgIFwiYXR0YWNrc3BlZWRvZmZzZXRcIjogMCxcbiAgICAgIFwiYXR0YWNrc3BlZWRwZXJsZXZlbFwiOiAyLjVcbiAgICB9LFxuICAgIFwiaWNvblwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvY2hhbXBpb24vS2luZHJlZC5wbmdcIixcbiAgICBcInNwcml0ZVwiOiB7XG4gICAgICBcInVybFwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvc3ByaXRlL2NoYW1waW9uMS5wbmdcIixcbiAgICAgIFwieFwiOiAxNDQsXG4gICAgICBcInlcIjogOTZcbiAgICB9LFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCInJ1RlbGwgbWUgYWdhaW4sIGxpdHRsZSBMYW1iLCB3aGljaCB0aGluZ3MgYXJlIG91cnMgdG8gdGFrZT8nJzxicj4nJ0FsbCB0aGluZ3MsIERlYXIgV29sZi4nJzxicj5TZXBhcmF0ZSwgYnV0IG5ldmVyIHBhcnRlZCwgS2luZHJlZCByZXByZXNlbnRzIHRoZSB0d2luIGVzc2VuY2VzIG9mIGRlYXRoLiBMYW1iJ3MgYXJyb3cgb2ZmZXJzIGEgc3dpZnQgcmVsZWFzZSBmb3IgdGhvc2Ugd2hvIGFjY2VwdCB0aGVpciBmYXRlLiBXb2xmIGh1bnRzIC4uLlwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwia2xlZFwiLFxuICAgIFwia2V5XCI6IFwiMjQwXCIsXG4gICAgXCJuYW1lXCI6IFwiS2xlZFwiLFxuICAgIFwidGl0bGVcIjogXCJ0aGUgQ2FudGFua2Vyb3VzIENhdmFsaWVyXCIsXG4gICAgXCJ0YWdzXCI6IFtcbiAgICAgIFwiRmlnaHRlclwiLFxuICAgICAgXCJUYW5rXCJcbiAgICBdLFxuICAgIFwic3RhdHNcIjoge1xuICAgICAgXCJocFwiOiAzNDAsXG4gICAgICBcImhwcGVybGV2ZWxcIjogNzAsXG4gICAgICBcIm1wXCI6IDEwMCxcbiAgICAgIFwibXBwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJtb3Zlc3BlZWRcIjogMzQ1LFxuICAgICAgXCJhcm1vclwiOiAyNixcbiAgICAgIFwiYXJtb3JwZXJsZXZlbFwiOiA0LFxuICAgICAgXCJzcGVsbGJsb2NrXCI6IDMyLjEsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAxLjI1LFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiAxMjUsXG4gICAgICBcImhwcmVnZW5cIjogNixcbiAgICAgIFwiaHByZWdlbnBlcmxldmVsXCI6IDAuNzUsXG4gICAgICBcIm1wcmVnZW5cIjogMCxcbiAgICAgIFwibXByZWdlbnBlcmxldmVsXCI6IDAsXG4gICAgICBcImNyaXRcIjogMCxcbiAgICAgIFwiY3JpdHBlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja2RhbWFnZVwiOiA1NSxcbiAgICAgIFwiYXR0YWNrZGFtYWdlcGVybGV2ZWxcIjogMyxcbiAgICAgIFwiYXR0YWNrc3BlZWRvZmZzZXRcIjogMCxcbiAgICAgIFwiYXR0YWNrc3BlZWRwZXJsZXZlbFwiOiAzLjVcbiAgICB9LFxuICAgIFwiaWNvblwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvY2hhbXBpb24vS2xlZC5wbmdcIixcbiAgICBcInNwcml0ZVwiOiB7XG4gICAgICBcInVybFwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvc3ByaXRlL2NoYW1waW9uNC5wbmdcIixcbiAgICAgIFwieFwiOiA0OCxcbiAgICAgIFwieVwiOiA0OFxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIicnQSBzYW5lIG1hbiB3b3VsZCBydW4gLiAuIC4gYnV0IEkgYWluJ3QgdGhlIHJ1bm5pbicga2luZCEnJzxicj48YnI+QSB3YXJyaW9yIGFzIGZlYXJsZXNzIGFzIGhlIGlzIG9ybmVyeSwgS2xlZCBpcyBhIHBvcHVsYXIgZm9sayBoZXJvIGluIE5veHVzLiBFbWJvZHlpbmcgdGhlIGZ1cmlvdXMgYnJhdmFkbyBvZiBoaXMgbmF0aW9uLCBoZSBpcyBhbiBpY29uIGJlbG92ZWQgYnkgdGhlIGVtcGlyZSdzIHNvbGRpZXJzLCBkaXN0cnVzdGVkIGJ5IC4uLlwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwia29nbWF3XCIsXG4gICAgXCJrZXlcIjogXCI5NlwiLFxuICAgIFwibmFtZVwiOiBcIktvZydNYXdcIixcbiAgICBcInRpdGxlXCI6IFwidGhlIE1vdXRoIG9mIHRoZSBBYnlzc1wiLFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcIk1hcmtzbWFuXCIsXG4gICAgICBcIk1hZ2VcIlxuICAgIF0sXG4gICAgXCJzdGF0c1wiOiB7XG4gICAgICBcImhwXCI6IDUxNy43NixcbiAgICAgIFwiaHBwZXJsZXZlbFwiOiA4MixcbiAgICAgIFwibXBcIjogMzIyLjIsXG4gICAgICBcIm1wcGVybGV2ZWxcIjogNDAsXG4gICAgICBcIm1vdmVzcGVlZFwiOiAzMjUsXG4gICAgICBcImFybW9yXCI6IDE5Ljg4LFxuICAgICAgXCJhcm1vcnBlcmxldmVsXCI6IDMuNSxcbiAgICAgIFwic3BlbGxibG9ja1wiOiAzMCxcbiAgICAgIFwic3BlbGxibG9ja3BlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja3JhbmdlXCI6IDUwMCxcbiAgICAgIFwiaHByZWdlblwiOiA1LjkyLFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC41NSxcbiAgICAgIFwibXByZWdlblwiOiA4LjY3NSxcbiAgICAgIFwibXByZWdlbnBlcmxldmVsXCI6IDAuNyxcbiAgICAgIFwiY3JpdFwiOiAwLFxuICAgICAgXCJjcml0cGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlXCI6IDU3LjQ2LFxuICAgICAgXCJhdHRhY2tkYW1hZ2VwZXJsZXZlbFwiOiAyLjQxLFxuICAgICAgXCJhdHRhY2tzcGVlZG9mZnNldFwiOiAtMC4wNixcbiAgICAgIFwiYXR0YWNrc3BlZWRwZXJsZXZlbFwiOiAyLjY1XG4gICAgfSxcbiAgICBcImljb25cIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL2NoYW1waW9uL0tvZ01hdy5wbmdcIixcbiAgICBcInNwcml0ZVwiOiB7XG4gICAgICBcInVybFwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvc3ByaXRlL2NoYW1waW9uMS5wbmdcIixcbiAgICAgIFwieFwiOiAxOTIsXG4gICAgICBcInlcIjogOTZcbiAgICB9LFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCInJ0lmIHRoYXQncyBqdXN0IGh1bmdyeSwgSSBkb24ndCB3YW50IHRvIHNlZSBhbmdyeS4nJzxicj48YnI+V2hlbiB0aGUgcHJvcGhldCBNYWx6YWhhciB3YXMgcmVib3JuIGluIEljYXRoaWEsIGhlIHdhcyBsZWQgdGhlcmUgYnkgYW4gb21pbm91cyB2b2ljZSB3aGljaCB0aGVyZWFmdGVyIGFuY2hvcmVkIGl0c2VsZiB0byBoaXMgcHN5Y2hlLiBGcm9tIHdpdGhpbiwgdGhpcyB2b2ljZSBiZXN0b3dlZCB1cG9uIGhpbSB0ZXJyaWJsZSAuLi5cIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcImxlYmxhbmNcIixcbiAgICBcImtleVwiOiBcIjdcIixcbiAgICBcIm5hbWVcIjogXCJMZUJsYW5jXCIsXG4gICAgXCJ0aXRsZVwiOiBcInRoZSBEZWNlaXZlclwiLFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcIkFzc2Fzc2luXCIsXG4gICAgICBcIk1hZ2VcIlxuICAgIF0sXG4gICAgXCJzdGF0c1wiOiB7XG4gICAgICBcImhwXCI6IDUxNixcbiAgICAgIFwiaHBwZXJsZXZlbFwiOiA3NSxcbiAgICAgIFwibXBcIjogMzM0LFxuICAgICAgXCJtcHBlcmxldmVsXCI6IDUwLFxuICAgICAgXCJtb3Zlc3BlZWRcIjogMzM1LFxuICAgICAgXCJhcm1vclwiOiAyMS44OCxcbiAgICAgIFwiYXJtb3JwZXJsZXZlbFwiOiAzLjUsXG4gICAgICBcInNwZWxsYmxvY2tcIjogMzAsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiA1MjUsXG4gICAgICBcImhwcmVnZW5cIjogNy40MixcbiAgICAgIFwiaHByZWdlbnBlcmxldmVsXCI6IDAuNTUsXG4gICAgICBcIm1wcmVnZW5cIjogNixcbiAgICAgIFwibXByZWdlbnBlcmxldmVsXCI6IDAuOCxcbiAgICAgIFwiY3JpdFwiOiAwLFxuICAgICAgXCJjcml0cGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlXCI6IDU0Ljg4LFxuICAgICAgXCJhdHRhY2tkYW1hZ2VwZXJsZXZlbFwiOiAzLjUsXG4gICAgICBcImF0dGFja3NwZWVkb2Zmc2V0XCI6IDAsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMS40XG4gICAgfSxcbiAgICBcImljb25cIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL2NoYW1waW9uL0xlYmxhbmMucG5nXCIsXG4gICAgXCJzcHJpdGVcIjoge1xuICAgICAgXCJ1cmxcIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3Nwcml0ZS9jaGFtcGlvbjEucG5nXCIsXG4gICAgICBcInhcIjogMjQwLFxuICAgICAgXCJ5XCI6IDk2XG4gICAgfSxcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiRXZlcnkgY2l0eSBoYXMgaXRzIGRhcmsgc2lkZSwgZXZlbiBvbmUgd2hvc2UgcmVwdXRhdGlvbiBpcyBhbHJlYWR5IG9mIGEgcXVlc3Rpb25hYmxlIGh1ZS4gTm94dXMgLSB0aG91Z2ggaXRzIG5hbWUgaXMgYWxyZWFkeSBpbnZva2VkIHdpdGggYSBtaXh0dXJlIG9mIHJldmVyZW5jZSBhbmQgcmV2dWxzaW9uIC0gaXMgbm8gZXhjZXB0aW9uIHRvIHRoaXMgc2ltcGxlIHRydXRoLiBEZWVwIHdpdGhpbiB0aGUgd2luZGluZyBkdW5nZW9ucyAuLi5cIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcImxlZXNpblwiLFxuICAgIFwia2V5XCI6IFwiNjRcIixcbiAgICBcIm5hbWVcIjogXCJMZWUgU2luXCIsXG4gICAgXCJ0aXRsZVwiOiBcInRoZSBCbGluZCBNb25rXCIsXG4gICAgXCJ0YWdzXCI6IFtcbiAgICAgIFwiRmlnaHRlclwiLFxuICAgICAgXCJBc3Nhc3NpblwiXG4gICAgXSxcbiAgICBcInN0YXRzXCI6IHtcbiAgICAgIFwiaHBcIjogNTcwLjgsXG4gICAgICBcImhwcGVybGV2ZWxcIjogODUsXG4gICAgICBcIm1wXCI6IDIwMCxcbiAgICAgIFwibXBwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJtb3Zlc3BlZWRcIjogMzUwLFxuICAgICAgXCJhcm1vclwiOiAyNC4yMTYsXG4gICAgICBcImFybW9ycGVybGV2ZWxcIjogMy43LFxuICAgICAgXCJzcGVsbGJsb2NrXCI6IDMyLjEsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAxLjI1LFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiAxMjUsXG4gICAgICBcImhwcmVnZW5cIjogNy40MjUsXG4gICAgICBcImhwcmVnZW5wZXJsZXZlbFwiOiAwLjcsXG4gICAgICBcIm1wcmVnZW5cIjogNTAsXG4gICAgICBcIm1wcmVnZW5wZXJsZXZlbFwiOiAwLFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNjEuMTc2LFxuICAgICAgXCJhdHRhY2tkYW1hZ2VwZXJsZXZlbFwiOiAzLjIsXG4gICAgICBcImF0dGFja3NwZWVkb2Zmc2V0XCI6IC0wLjA0LFxuICAgICAgXCJhdHRhY2tzcGVlZHBlcmxldmVsXCI6IDNcbiAgICB9LFxuICAgIFwiaWNvblwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvY2hhbXBpb24vTGVlU2luLnBuZ1wiLFxuICAgIFwic3ByaXRlXCI6IHtcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcHJpdGUvY2hhbXBpb24xLnBuZ1wiLFxuICAgICAgXCJ4XCI6IDI4OCxcbiAgICAgIFwieVwiOiA5NlxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIkFzIGEgeW91bmcgdGVlbiwgTGVlIFNpbiB3YXMgaW50ZW50IG9uIGJlY29taW5nIGEgc3VtbW9uZXIuIEhpcyB3aWxsIGFuZCBkZWRpY2F0aW9uIHdlcmUgdW5tYXRjaGVkIGJ5IGFueSBvZiBoaXMgcGVlcnMsIGFuZCBoaXMgc2tpbGwgZHJldyB0aGUgYXR0ZW50aW9uIG9mIFJlZ2luYWxkIEFzaHJhbSwgdGhlIExlYWd1ZSdzIEhpZ2ggQ291bmNpbG9yIGF0IHRoZSB0aW1lLiBXaGlsZSBzdHVkeWluZyBhdCB0aGUgQXJjYW51bSBNYWpvcmlzLC4uLlwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwibGVvbmFcIixcbiAgICBcImtleVwiOiBcIjg5XCIsXG4gICAgXCJuYW1lXCI6IFwiTGVvbmFcIixcbiAgICBcInRpdGxlXCI6IFwidGhlIFJhZGlhbnQgRGF3blwiLFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcIlRhbmtcIixcbiAgICAgIFwiU3VwcG9ydFwiXG4gICAgXSxcbiAgICBcInN0YXRzXCI6IHtcbiAgICAgIFwiaHBcIjogNTc2LjE2LFxuICAgICAgXCJocHBlcmxldmVsXCI6IDg3LFxuICAgICAgXCJtcFwiOiAzMDIuMixcbiAgICAgIFwibXBwZXJsZXZlbFwiOiA0MCxcbiAgICAgIFwibW92ZXNwZWVkXCI6IDMzNSxcbiAgICAgIFwiYXJtb3JcIjogMjcuMjA4LFxuICAgICAgXCJhcm1vcnBlcmxldmVsXCI6IDMuNixcbiAgICAgIFwic3BlbGxibG9ja1wiOiAzMi4xLFxuICAgICAgXCJzcGVsbGJsb2NrcGVybGV2ZWxcIjogMS4yNSxcbiAgICAgIFwiYXR0YWNrcmFuZ2VcIjogMTI1LFxuICAgICAgXCJocHJlZ2VuXCI6IDguNDI1LFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC44NSxcbiAgICAgIFwibXByZWdlblwiOiA2LFxuICAgICAgXCJtcHJlZ2VucGVybGV2ZWxcIjogMC44LFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNjAuMDQsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDMsXG4gICAgICBcImF0dGFja3NwZWVkb2Zmc2V0XCI6IDAsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMi45XG4gICAgfSxcbiAgICBcImljb25cIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL2NoYW1waW9uL0xlb25hLnBuZ1wiLFxuICAgIFwic3ByaXRlXCI6IHtcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcHJpdGUvY2hhbXBpb24xLnBuZ1wiLFxuICAgICAgXCJ4XCI6IDMzNixcbiAgICAgIFwieVwiOiA5NlxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIicnSWYgeW91IHdvdWxkIHNoaW5lIGxpa2UgYSBzdW4sIGZpcnN0IHlvdSBtdXN0IGJ1cm4gbGlrZSBvbmUuJyc8YnI+PGJyPkltYnVlZCB3aXRoIHRoZSBmaXJlIG9mIHRoZSBzdW4sIExlb25hIGlzIGEgd2FycmlvciB0ZW1wbGFyIG9mIHRoZSBTb2xhcmkgd2hvIGRlZmVuZHMgTW91bnQgVGFyZ29uIHdpdGggaGVyIFplbml0aCBCbGFkZSBhbmQgU2hpZWxkIG9mIERheWJyZWFrLiBIZXIgc2tpbiBzaGltbWVycyB3aXRoIHN0YXJmaXJlIC4uLlwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwibGlzc2FuZHJhXCIsXG4gICAgXCJrZXlcIjogXCIxMjdcIixcbiAgICBcIm5hbWVcIjogXCJMaXNzYW5kcmFcIixcbiAgICBcInRpdGxlXCI6IFwidGhlIEljZSBXaXRjaFwiLFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcIk1hZ2VcIlxuICAgIF0sXG4gICAgXCJzdGF0c1wiOiB7XG4gICAgICBcImhwXCI6IDUwNi4xMixcbiAgICAgIFwiaHBwZXJsZXZlbFwiOiA3NSxcbiAgICAgIFwibXBcIjogMzA0LFxuICAgICAgXCJtcHBlcmxldmVsXCI6IDUwLFxuICAgICAgXCJtb3Zlc3BlZWRcIjogMzI1LFxuICAgICAgXCJhcm1vclwiOiAyMC4yMTYsXG4gICAgICBcImFybW9ycGVybGV2ZWxcIjogMy43LFxuICAgICAgXCJzcGVsbGJsb2NrXCI6IDMwLFxuICAgICAgXCJzcGVsbGJsb2NrcGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrcmFuZ2VcIjogNTUwLFxuICAgICAgXCJocHJlZ2VuXCI6IDYuOTIsXG4gICAgICBcImhwcmVnZW5wZXJsZXZlbFwiOiAwLjU1LFxuICAgICAgXCJtcHJlZ2VuXCI6IDUuNjcsXG4gICAgICBcIm1wcmVnZW5wZXJsZXZlbFwiOiAwLjQsXG4gICAgICBcImNyaXRcIjogMCxcbiAgICAgIFwiY3JpdHBlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja2RhbWFnZVwiOiA1MC41MzYsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDIuNyxcbiAgICAgIFwiYXR0YWNrc3BlZWRvZmZzZXRcIjogMCxcbiAgICAgIFwiYXR0YWNrc3BlZWRwZXJsZXZlbFwiOiAxLjM2XG4gICAgfSxcbiAgICBcImljb25cIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL2NoYW1waW9uL0xpc3NhbmRyYS5wbmdcIixcbiAgICBcInNwcml0ZVwiOiB7XG4gICAgICBcInVybFwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvc3ByaXRlL2NoYW1waW9uMS5wbmdcIixcbiAgICAgIFwieFwiOiAzODQsXG4gICAgICBcInlcIjogOTZcbiAgICB9LFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJMaXNzYW5kcmEncyBtYWdpYyB0d2lzdHMgdGhlIHB1cmUgcG93ZXIgb2YgaWNlIGludG8gc29tZXRoaW5nIGRhcmsgYW5kIHRlcnJpYmxlLiBXaXRoIHRoZSBmb3JjZSBvZiBoZXIgYmxhY2sgaWNlLCBzaGUgZG9lcyBtb3JlIHRoYW4gZnJlZXplIC0gc2hlIGltcGFsZXMgYW5kIGNydXNoZXMgdGhvc2Ugd2hvIG9wcG9zZSBoZXIuIFRvIHRoZSB0ZXJyaWZpZWQgZGVuaXplbnMgb2YgdGhlIG5vcnRoLCBzaGUgaXMga25vd24gb25seSBhcyAuLi5cIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcImx1Y2lhblwiLFxuICAgIFwia2V5XCI6IFwiMjM2XCIsXG4gICAgXCJuYW1lXCI6IFwiTHVjaWFuXCIsXG4gICAgXCJ0aXRsZVwiOiBcInRoZSBQdXJpZmllclwiLFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcIk1hcmtzbWFuXCJcbiAgICBdLFxuICAgIFwic3RhdHNcIjoge1xuICAgICAgXCJocFwiOiA1NTQuNCxcbiAgICAgIFwiaHBwZXJsZXZlbFwiOiA4MCxcbiAgICAgIFwibXBcIjogMzQ4Ljg4LFxuICAgICAgXCJtcHBlcmxldmVsXCI6IDM4LFxuICAgICAgXCJtb3Zlc3BlZWRcIjogMzM1LFxuICAgICAgXCJhcm1vclwiOiAyNC4wNCxcbiAgICAgIFwiYXJtb3JwZXJsZXZlbFwiOiAzLFxuICAgICAgXCJzcGVsbGJsb2NrXCI6IDMwLFxuICAgICAgXCJzcGVsbGJsb2NrcGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrcmFuZ2VcIjogNTAwLFxuICAgICAgXCJocHJlZ2VuXCI6IDYuMTksXG4gICAgICBcImhwcmVnZW5wZXJsZXZlbFwiOiAwLjY1LFxuICAgICAgXCJtcHJlZ2VuXCI6IDguMTc1LFxuICAgICAgXCJtcHJlZ2VucGVybGV2ZWxcIjogMC43LFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNTcuNDYsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDIuNDEsXG4gICAgICBcImF0dGFja3NwZWVkb2Zmc2V0XCI6IC0wLjAyLFxuICAgICAgXCJhdHRhY2tzcGVlZHBlcmxldmVsXCI6IDMuM1xuICAgIH0sXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9jaGFtcGlvbi9MdWNpYW4ucG5nXCIsXG4gICAgXCJzcHJpdGVcIjoge1xuICAgICAgXCJ1cmxcIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3Nwcml0ZS9jaGFtcGlvbjEucG5nXCIsXG4gICAgICBcInhcIjogNDMyLFxuICAgICAgXCJ5XCI6IDk2XG4gICAgfSxcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiTHVjaWFuIHdpZWxkcyByZWxpYyB3ZWFwb25zIGltYnVlZCB3aXRoIGFuY2llbnQgcG93ZXIgYW5kIHN0YW5kcyBhIHN0YWx3YXJ0IGd1YXJkaWFuIGFnYWluc3QgdGhlIHVuZGVhZC4gSGlzIGNvbGQgY29udmljdGlvbiBuZXZlciB3YXZlcnMsIGV2ZW4gaW4gdGhlIGZhY2Ugb2YgdGhlIG1hZGRlbmluZyBob3Jyb3JzIGhlIGRlc3Ryb3lzIGJlbmVhdGggaGlzIGhhaWwgb2YgcHVyaWZ5aW5nIGZpcmUuIEx1Y2lhbiB3YWxrcyBhbG9uZSBvbiAuLi5cIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcImx1bHVcIixcbiAgICBcImtleVwiOiBcIjExN1wiLFxuICAgIFwibmFtZVwiOiBcIkx1bHVcIixcbiAgICBcInRpdGxlXCI6IFwidGhlIEZhZSBTb3JjZXJlc3NcIixcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJTdXBwb3J0XCIsXG4gICAgICBcIk1hZ2VcIlxuICAgIF0sXG4gICAgXCJzdGF0c1wiOiB7XG4gICAgICBcImhwXCI6IDU1Mi43NixcbiAgICAgIFwiaHBwZXJsZXZlbFwiOiA3NCxcbiAgICAgIFwibXBcIjogMzUwLFxuICAgICAgXCJtcHBlcmxldmVsXCI6IDU1LFxuICAgICAgXCJtb3Zlc3BlZWRcIjogMzMwLFxuICAgICAgXCJhcm1vclwiOiAxOS4yMTYsXG4gICAgICBcImFybW9ycGVybGV2ZWxcIjogMy43LFxuICAgICAgXCJzcGVsbGJsb2NrXCI6IDMwLFxuICAgICAgXCJzcGVsbGJsb2NrcGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrcmFuZ2VcIjogNTUwLFxuICAgICAgXCJocHJlZ2VuXCI6IDYuMDA1LFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC42LFxuICAgICAgXCJtcHJlZ2VuXCI6IDExLFxuICAgICAgXCJtcHJlZ2VucGVybGV2ZWxcIjogMC42LFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNDYuMzY4LFxuICAgICAgXCJhdHRhY2tkYW1hZ2VwZXJsZXZlbFwiOiAyLjYsXG4gICAgICBcImF0dGFja3NwZWVkb2Zmc2V0XCI6IDAsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMi4yNVxuICAgIH0sXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9jaGFtcGlvbi9MdWx1LnBuZ1wiLFxuICAgIFwic3ByaXRlXCI6IHtcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcHJpdGUvY2hhbXBpb24yLnBuZ1wiLFxuICAgICAgXCJ4XCI6IDAsXG4gICAgICBcInlcIjogMFxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIlBlcmhhcHMgbW9yZSB0aGFuIGFueSBvdGhlciBjaGFtcGlvbiBpbiB0aGUgTGVhZ3VlLCBMdWx1IG1hcmNoZXMgdG8gdGhlIGJlYXQgb2YgaGVyIG93biBkcnVtLiBEdXJpbmcgaGVyIHlvdXRoIGluIEJhbmRsZSBDaXR5LCBzaGUgc3BlbnQgbW9zdCBvZiBoZXIgdGltZSB3YW5kZXJpbmcgYWxvbmUgaW4gdGhlIGZvcmVzdCBvciBsb3N0IGluIGEgZGF5ZHJlYW0uIEl0IHdhc24ndCB0aGF0IHNoZSB3YXMgYW50aXNvY2lhbDsgdGhlIC4uLlwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwibHV4XCIsXG4gICAgXCJrZXlcIjogXCI5OVwiLFxuICAgIFwibmFtZVwiOiBcIkx1eFwiLFxuICAgIFwidGl0bGVcIjogXCJ0aGUgTGFkeSBvZiBMdW1pbm9zaXR5XCIsXG4gICAgXCJ0YWdzXCI6IFtcbiAgICAgIFwiTWFnZVwiLFxuICAgICAgXCJTdXBwb3J0XCJcbiAgICBdLFxuICAgIFwic3RhdHNcIjoge1xuICAgICAgXCJocFwiOiA0NzcuNzIsXG4gICAgICBcImhwcGVybGV2ZWxcIjogNzksXG4gICAgICBcIm1wXCI6IDM4NCxcbiAgICAgIFwibXBwZXJsZXZlbFwiOiA0NyxcbiAgICAgIFwibW92ZXNwZWVkXCI6IDMzMCxcbiAgICAgIFwiYXJtb3JcIjogMTguNzIsXG4gICAgICBcImFybW9ycGVybGV2ZWxcIjogNCxcbiAgICAgIFwic3BlbGxibG9ja1wiOiAzMCxcbiAgICAgIFwic3BlbGxibG9ja3BlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja3JhbmdlXCI6IDU1MCxcbiAgICAgIFwiaHByZWdlblwiOiA1LjQyLFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC41NSxcbiAgICAgIFwibXByZWdlblwiOiA2LFxuICAgICAgXCJtcHJlZ2VucGVybGV2ZWxcIjogMC44LFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNTMuNTQ0LFxuICAgICAgXCJhdHRhY2tkYW1hZ2VwZXJsZXZlbFwiOiAzLjMsXG4gICAgICBcImF0dGFja3NwZWVkb2Zmc2V0XCI6IDAsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMS4zNlxuICAgIH0sXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9jaGFtcGlvbi9MdXgucG5nXCIsXG4gICAgXCJzcHJpdGVcIjoge1xuICAgICAgXCJ1cmxcIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3Nwcml0ZS9jaGFtcGlvbjIucG5nXCIsXG4gICAgICBcInhcIjogNDgsXG4gICAgICBcInlcIjogMFxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIkJvcm4gdG8gdGhlIHByZXN0aWdpb3VzIENyb3duZ3VhcmRzLCB0aGUgcGFyYWdvbiBmYW1pbHkgb2YgRGVtYWNpYW4gc2VydmljZSwgTHV4YW5uYSB3YXMgZGVzdGluZWQgZm9yIGdyZWF0bmVzcy4gU2hlIGdyZXcgdXAgYXMgdGhlIGZhbWlseSdzIG9ubHkgZGF1Z2h0ZXIsIGFuZCBzaGUgaW1tZWRpYXRlbHkgdG9vayB0byB0aGUgYWR2YW5jZWQgZWR1Y2F0aW9uIGFuZCBsYXZpc2ggcGFydGllcyByZXF1aXJlZCBvZiBmYW1pbGllcyBhcyAuLi5cIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcIm1hbHBoaXRlXCIsXG4gICAgXCJrZXlcIjogXCI1NFwiLFxuICAgIFwibmFtZVwiOiBcIk1hbHBoaXRlXCIsXG4gICAgXCJ0aXRsZVwiOiBcIlNoYXJkIG9mIHRoZSBNb25vbGl0aFwiLFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcIlRhbmtcIixcbiAgICAgIFwiRmlnaHRlclwiXG4gICAgXSxcbiAgICBcInN0YXRzXCI6IHtcbiAgICAgIFwiaHBcIjogNTc0LjIsXG4gICAgICBcImhwcGVybGV2ZWxcIjogOTAsXG4gICAgICBcIm1wXCI6IDI4Mi4yLFxuICAgICAgXCJtcHBlcmxldmVsXCI6IDQwLFxuICAgICAgXCJtb3Zlc3BlZWRcIjogMzM1LFxuICAgICAgXCJhcm1vclwiOiAyOC4zLFxuICAgICAgXCJhcm1vcnBlcmxldmVsXCI6IDMuNzUsXG4gICAgICBcInNwZWxsYmxvY2tcIjogMzIuMSxcbiAgICAgIFwic3BlbGxibG9ja3BlcmxldmVsXCI6IDEuMjUsXG4gICAgICBcImF0dGFja3JhbmdlXCI6IDEyNSxcbiAgICAgIFwiaHByZWdlblwiOiA3LFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC41NSxcbiAgICAgIFwibXByZWdlblwiOiA3LjMyLFxuICAgICAgXCJtcHJlZ2VucGVybGV2ZWxcIjogMC41NSxcbiAgICAgIFwiY3JpdFwiOiAwLFxuICAgICAgXCJjcml0cGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlXCI6IDYxLjk3LFxuICAgICAgXCJhdHRhY2tkYW1hZ2VwZXJsZXZlbFwiOiAzLjM3NSxcbiAgICAgIFwiYXR0YWNrc3BlZWRvZmZzZXRcIjogLTAuMDIsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMy40XG4gICAgfSxcbiAgICBcImljb25cIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL2NoYW1waW9uL01hbHBoaXRlLnBuZ1wiLFxuICAgIFwic3ByaXRlXCI6IHtcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcHJpdGUvY2hhbXBpb24yLnBuZ1wiLFxuICAgICAgXCJ4XCI6IDk2LFxuICAgICAgXCJ5XCI6IDBcbiAgICB9LFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGVyZSBpcyBhIHdvcmxkIG9mIHBlcmZlY3QgaGFybW9ueSwgd2hlcmUgYWxsIGFyZSBwYXJ0IG9mIHRoZSB3aG9sZS4gVGhlIE1vbm9saXRoIGlzIHRoZSBlc3NlbmNlIG9mIGFsbCBjcmVhdGlvbiwgYW5kIGl0cyBkZW5pemVucyBhcmUgYnV0IHNpbmd1bGFyIHBpZWNlcyBvZiBpdC4gSXQgaXMgYmVhdXRpZnVsIGluIGl0cyBzeW1tZXRyeSwgYW5kIGluIGl0cyBhbG1vc3QgY29tcGxldGUgbGFjayBvZiB1bmNlcnRhaW50eS4gVGhlIC4uLlwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwibWFsemFoYXJcIixcbiAgICBcImtleVwiOiBcIjkwXCIsXG4gICAgXCJuYW1lXCI6IFwiTWFsemFoYXJcIixcbiAgICBcInRpdGxlXCI6IFwidGhlIFByb3BoZXQgb2YgdGhlIFZvaWRcIixcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJNYWdlXCIsXG4gICAgICBcIkFzc2Fzc2luXCJcbiAgICBdLFxuICAgIFwic3RhdHNcIjoge1xuICAgICAgXCJocFwiOiA1MjUsXG4gICAgICBcImhwcGVybGV2ZWxcIjogNzUsXG4gICAgICBcIm1wXCI6IDMwMCxcbiAgICAgIFwibXBwZXJsZXZlbFwiOiA1NSxcbiAgICAgIFwibW92ZXNwZWVkXCI6IDMzNSxcbiAgICAgIFwiYXJtb3JcIjogMjAsXG4gICAgICBcImFybW9ycGVybGV2ZWxcIjogMy41LFxuICAgICAgXCJzcGVsbGJsb2NrXCI6IDMwLFxuICAgICAgXCJzcGVsbGJsb2NrcGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrcmFuZ2VcIjogNTAwLFxuICAgICAgXCJocHJlZ2VuXCI6IDYsXG4gICAgICBcImhwcmVnZW5wZXJsZXZlbFwiOiAwLjYsXG4gICAgICBcIm1wcmVnZW5cIjogNixcbiAgICAgIFwibXByZWdlbnBlcmxldmVsXCI6IDAuOCxcbiAgICAgIFwiY3JpdFwiOiAwLFxuICAgICAgXCJjcml0cGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlXCI6IDU1LFxuICAgICAgXCJhdHRhY2tkYW1hZ2VwZXJsZXZlbFwiOiAzLFxuICAgICAgXCJhdHRhY2tzcGVlZG9mZnNldFwiOiAwLFxuICAgICAgXCJhdHRhY2tzcGVlZHBlcmxldmVsXCI6IDEuNVxuICAgIH0sXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9jaGFtcGlvbi9NYWx6YWhhci5wbmdcIixcbiAgICBcInNwcml0ZVwiOiB7XG4gICAgICBcInVybFwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvc3ByaXRlL2NoYW1waW9uMi5wbmdcIixcbiAgICAgIFwieFwiOiAxNDQsXG4gICAgICBcInlcIjogMFxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIk1hbnkgbWVuIGhhdmUgZ29uZSBtYWQgYmVuZWF0aCB0aGUgZ2xhcmUgb2YgdGhlIFNodXJpbWEgc3VuLCBidXQgaXQgd2FzIGR1cmluZyB0aGUgbmlnaHQncyBjaGlsbGluZyBlbWJyYWNlIHRoYXQgTWFsemFoYXIgcmVsaW5xdWlzaGVkIGhpcyBzYW5pdHkuIE1hbHphaGFyIHdhcyBib3JuIGEgc2VlciwgYmxlc3NlZCB3aXRoIHRoZSBnaWZ0IG9mIHByb3BoZWN5LiBIaXMgdGFsZW50LCB0aG91Z2ggdW5yZWZpbmVkLCBwcm9taXNlZCB0byAuLi5cIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcIm1hb2thaVwiLFxuICAgIFwia2V5XCI6IFwiNTdcIixcbiAgICBcIm5hbWVcIjogXCJNYW9rYWlcIixcbiAgICBcInRpdGxlXCI6IFwidGhlIFR3aXN0ZWQgVHJlYW50XCIsXG4gICAgXCJ0YWdzXCI6IFtcbiAgICAgIFwiVGFua1wiLFxuICAgICAgXCJNYWdlXCJcbiAgICBdLFxuICAgIFwic3RhdHNcIjoge1xuICAgICAgXCJocFwiOiA1NzIuMixcbiAgICAgIFwiaHBwZXJsZXZlbFwiOiA5MCxcbiAgICAgIFwibXBcIjogMzc3LjI4LFxuICAgICAgXCJtcHBlcmxldmVsXCI6IDQzLFxuICAgICAgXCJtb3Zlc3BlZWRcIjogMzM1LFxuICAgICAgXCJhcm1vclwiOiAyOC43MixcbiAgICAgIFwiYXJtb3JwZXJsZXZlbFwiOiA0LFxuICAgICAgXCJzcGVsbGJsb2NrXCI6IDMyLjEsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAxLjI1LFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiAxMjUsXG4gICAgICBcImhwcmVnZW5cIjogNyxcbiAgICAgIFwiaHByZWdlbnBlcmxldmVsXCI6IDAuNzUsXG4gICAgICBcIm1wcmVnZW5cIjogNy4yMDUsXG4gICAgICBcIm1wcmVnZW5wZXJsZXZlbFwiOiAwLjQ1LFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNjMuNTQ0LFxuICAgICAgXCJhdHRhY2tkYW1hZ2VwZXJsZXZlbFwiOiAzLjMsXG4gICAgICBcImF0dGFja3NwZWVkb2Zmc2V0XCI6IC0wLjEsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMi4xMjVcbiAgICB9LFxuICAgIFwiaWNvblwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvY2hhbXBpb24vTWFva2FpLnBuZ1wiLFxuICAgIFwic3ByaXRlXCI6IHtcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcHJpdGUvY2hhbXBpb24yLnBuZ1wiLFxuICAgICAgXCJ4XCI6IDE5MixcbiAgICAgIFwieVwiOiAwXG4gICAgfSxcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiJydBbGwgYXJvdW5kIG1lIGFyZSBlbXB0eSBodXNrcywgc291bGxlc3MgYW5kIHVuYWZyYWlkLi4uIGJ1dCBJIHdpbGwgYnJpbmcgdGhlbSBmZWFyLicnPGJyPjxicj5NYW9rYWkgaXMgYSByYWdlZnVsLCB0b3dlcmluZyB0cmVhbnQgd2hvIGZpZ2h0cyB0aGUgdW5uYXR1cmFsIGhvcnJvcnMgb2YgdGhlIFNoYWRvdyBJc2xlcy4gSGUgd2FzIHR3aXN0ZWQgaW50byBhIGZvcmNlIG9mIHZlbmdlYW5jZSBhZnRlciBhIG1hZ2ljYWwgLi4uXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJtYXN0ZXJ5aVwiLFxuICAgIFwia2V5XCI6IFwiMTFcIixcbiAgICBcIm5hbWVcIjogXCJNYXN0ZXIgWWlcIixcbiAgICBcInRpdGxlXCI6IFwidGhlIFd1anUgQmxhZGVzbWFuXCIsXG4gICAgXCJ0YWdzXCI6IFtcbiAgICAgIFwiQXNzYXNzaW5cIixcbiAgICAgIFwiRmlnaHRlclwiXG4gICAgXSxcbiAgICBcInN0YXRzXCI6IHtcbiAgICAgIFwiaHBcIjogNTk4LjU2LFxuICAgICAgXCJocHBlcmxldmVsXCI6IDkyLFxuICAgICAgXCJtcFwiOiAyNTAuNTYsXG4gICAgICBcIm1wcGVybGV2ZWxcIjogNDIsXG4gICAgICBcIm1vdmVzcGVlZFwiOiAzNTUsXG4gICAgICBcImFybW9yXCI6IDI0LjA0LFxuICAgICAgXCJhcm1vcnBlcmxldmVsXCI6IDMsXG4gICAgICBcInNwZWxsYmxvY2tcIjogMzIuMSxcbiAgICAgIFwic3BlbGxibG9ja3BlcmxldmVsXCI6IDEuMjUsXG4gICAgICBcImF0dGFja3JhbmdlXCI6IDEyNSxcbiAgICAgIFwiaHByZWdlblwiOiA3LjU5LFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC42NSxcbiAgICAgIFwibXByZWdlblwiOiA3LjI1NSxcbiAgICAgIFwibXByZWdlbnBlcmxldmVsXCI6IDAuNDUsXG4gICAgICBcImNyaXRcIjogMCxcbiAgICAgIFwiY3JpdHBlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja2RhbWFnZVwiOiA2MC4wNCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlcGVybGV2ZWxcIjogMyxcbiAgICAgIFwiYXR0YWNrc3BlZWRvZmZzZXRcIjogLTAuMDgsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMlxuICAgIH0sXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9jaGFtcGlvbi9NYXN0ZXJZaS5wbmdcIixcbiAgICBcInNwcml0ZVwiOiB7XG4gICAgICBcInVybFwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvc3ByaXRlL2NoYW1waW9uMi5wbmdcIixcbiAgICAgIFwieFwiOiAyNDAsXG4gICAgICBcInlcIjogMFxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIlRocm91Z2ggdGhlIGFuY2llbnQgbWFydGlhbCBhcnQgb2YgV3VqdSwgTWFzdGVyIFlpIGhhcyB0ZW1wZXJlZCBoaXMgYm9keSBhbmQgc2hhcnBlbmVkIGhpcyBtaW5kIHVudGlsIHRob3VnaHQgYW5kIGFjdGlvbiBoYXZlIGJlY29tZSBvbmUuIFRob3VnaCBoZSBjaG9vc2VzIHRvIGVudGVyIGludG8gdmlvbGVuY2UgYXMgYSBsYXN0IHJlc29ydCwgdGhlIGdyYWNlIGFuZCBzcGVlZCB3aXRoIHdoaWNoIGhlIHdpZWxkcyBoaXMgYmxhZGUgLi4uXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJtaXNzZm9ydHVuZVwiLFxuICAgIFwia2V5XCI6IFwiMjFcIixcbiAgICBcIm5hbWVcIjogXCJNaXNzIEZvcnR1bmVcIixcbiAgICBcInRpdGxlXCI6IFwidGhlIEJvdW50eSBIdW50ZXJcIixcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJNYXJrc21hblwiXG4gICAgXSxcbiAgICBcInN0YXRzXCI6IHtcbiAgICAgIFwiaHBcIjogNTMwLFxuICAgICAgXCJocHBlcmxldmVsXCI6IDg1LFxuICAgICAgXCJtcFwiOiAzMjUuODQsXG4gICAgICBcIm1wcGVybGV2ZWxcIjogMzUsXG4gICAgICBcIm1vdmVzcGVlZFwiOiAzMjUsXG4gICAgICBcImFybW9yXCI6IDI0LjA0LFxuICAgICAgXCJhcm1vcnBlcmxldmVsXCI6IDMsXG4gICAgICBcInNwZWxsYmxvY2tcIjogMzAsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiA1NTAsXG4gICAgICBcImhwcmVnZW5cIjogNi4xOSxcbiAgICAgIFwiaHByZWdlbnBlcmxldmVsXCI6IDAuNjUsXG4gICAgICBcIm1wcmVnZW5cIjogOC4wNCxcbiAgICAgIFwibXByZWdlbnBlcmxldmVsXCI6IDAuNjUsXG4gICAgICBcImNyaXRcIjogMCxcbiAgICAgIFwiY3JpdHBlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja2RhbWFnZVwiOiA0NixcbiAgICAgIFwiYXR0YWNrZGFtYWdlcGVybGV2ZWxcIjogMSxcbiAgICAgIFwiYXR0YWNrc3BlZWRvZmZzZXRcIjogLTAuMDQ3MzQsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogM1xuICAgIH0sXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9jaGFtcGlvbi9NaXNzRm9ydHVuZS5wbmdcIixcbiAgICBcInNwcml0ZVwiOiB7XG4gICAgICBcInVybFwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvc3ByaXRlL2NoYW1waW9uMi5wbmdcIixcbiAgICAgIFwieFwiOiAyODgsXG4gICAgICBcInlcIjogMFxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIicnVGhlIGJpZ2dlciB0aGUgcmlzaywgdGhlIGJpZ2dlciB0aGUgYm91bnR5LicnPGJyPjxicj5CZWF1dHkgYW5kIGRhbmdlcjogVGhlcmUgYXJlIGZldyB3aG8gY2FuIG1hdGNoIE1pc3MgRm9ydHVuZSBpbiBlaXRoZXIuIE9uZSBvZiBCaWxnZXdhdGVyJ3MgbW9zdCBpbmZhbW91cyBib3VudHkgaHVudGVycywgc2hlIGJ1aWx0IGhlciBsZWdlbmQgdXBvbiBhIHN3YXRoZSBvZiBidWxsZXQtcmlkZGxlZCBjb3Jwc2VzIGFuZCBjYXB0dXJlZCAuLi5cIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcIm1vbmtleWtpbmdcIixcbiAgICBcImtleVwiOiBcIjYyXCIsXG4gICAgXCJuYW1lXCI6IFwiV3Vrb25nXCIsXG4gICAgXCJ0aXRsZVwiOiBcInRoZSBNb25rZXkgS2luZ1wiLFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcIkZpZ2h0ZXJcIixcbiAgICAgIFwiVGFua1wiXG4gICAgXSxcbiAgICBcInN0YXRzXCI6IHtcbiAgICAgIFwiaHBcIjogNTc3LjgsXG4gICAgICBcImhwcGVybGV2ZWxcIjogODUsXG4gICAgICBcIm1wXCI6IDI2NS44NCxcbiAgICAgIFwibXBwZXJsZXZlbFwiOiAzOCxcbiAgICAgIFwibW92ZXNwZWVkXCI6IDM0NSxcbiAgICAgIFwiYXJtb3JcIjogMjQuODgsXG4gICAgICBcImFybW9ycGVybGV2ZWxcIjogMy41LFxuICAgICAgXCJzcGVsbGJsb2NrXCI6IDMyLjEsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAxLjI1LFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiAxNzUsXG4gICAgICBcImhwcmVnZW5cIjogNi4xOSxcbiAgICAgIFwiaHByZWdlbnBlcmxldmVsXCI6IDAuNjUsXG4gICAgICBcIm1wcmVnZW5cIjogOC4wNCxcbiAgICAgIFwibXByZWdlbnBlcmxldmVsXCI6IDAuNjUsXG4gICAgICBcImNyaXRcIjogMCxcbiAgICAgIFwiY3JpdHBlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja2RhbWFnZVwiOiA1OS44NzYsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDMuMixcbiAgICAgIFwiYXR0YWNrc3BlZWRvZmZzZXRcIjogLTAuMDUsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogM1xuICAgIH0sXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9jaGFtcGlvbi9Nb25rZXlLaW5nLnBuZ1wiLFxuICAgIFwic3ByaXRlXCI6IHtcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcHJpdGUvY2hhbXBpb24yLnBuZ1wiLFxuICAgICAgXCJ4XCI6IDMzNixcbiAgICAgIFwieVwiOiAwXG4gICAgfSxcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiRHVyaW5nIHRoZSBjaGFvcyBvZiB0aGUgUnVuZSBXYXJzLCBhbiBlbm9ybW91cyBydW5lc3RvbmUgd2FzIGxvc3QgZGVlcCB3aXRoaW4gdGhlIFBsYWd1ZSBKdW5nbGVzLiBJdCByZW1haW5lZCB0aGVyZSwgdW50b3VjaGVkIGZvciBjZW50dXJpZXMsIGVtYW5hdGluZyBhIHBvdGVudCBtYWdpYyB3aGljaCBpbmZ1c2VkIG5lYXJieSB3aWxkbGlmZSB3aXRoIHNlbnRpZW5jZSBhbmQgdml0YWxpdHkuIEEgZ3JvdXAgb2YgbW9ua2V5cyB3aG8gLi4uXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJtb3JkZWthaXNlclwiLFxuICAgIFwia2V5XCI6IFwiODJcIixcbiAgICBcIm5hbWVcIjogXCJNb3JkZWthaXNlclwiLFxuICAgIFwidGl0bGVcIjogXCJ0aGUgSXJvbiBSZXZlbmFudFwiLFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcIkZpZ2h0ZXJcIlxuICAgIF0sXG4gICAgXCJzdGF0c1wiOiB7XG4gICAgICBcImhwXCI6IDUyNSxcbiAgICAgIFwiaHBwZXJsZXZlbFwiOiA3MyxcbiAgICAgIFwibXBcIjogMCxcbiAgICAgIFwibXBwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJtb3Zlc3BlZWRcIjogMzI1LFxuICAgICAgXCJhcm1vclwiOiAyMCxcbiAgICAgIFwiYXJtb3JwZXJsZXZlbFwiOiAzLjc1LFxuICAgICAgXCJzcGVsbGJsb2NrXCI6IDMyLjEsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAxLjI1LFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiAxNzUsXG4gICAgICBcImhwcmVnZW5cIjogNCxcbiAgICAgIFwiaHByZWdlbnBlcmxldmVsXCI6IDAuMyxcbiAgICAgIFwibXByZWdlblwiOiAwLFxuICAgICAgXCJtcHJlZ2VucGVybGV2ZWxcIjogMCxcbiAgICAgIFwiY3JpdFwiOiAwLFxuICAgICAgXCJjcml0cGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlXCI6IDYxLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VwZXJsZXZlbFwiOiA1LFxuICAgICAgXCJhdHRhY2tzcGVlZG9mZnNldFwiOiAwLjA0LFxuICAgICAgXCJhdHRhY2tzcGVlZHBlcmxldmVsXCI6IDIuMlxuICAgIH0sXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9jaGFtcGlvbi9Nb3JkZWthaXNlci5wbmdcIixcbiAgICBcInNwcml0ZVwiOiB7XG4gICAgICBcInVybFwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvc3ByaXRlL2NoYW1waW9uMi5wbmdcIixcbiAgICAgIFwieFwiOiAzODQsXG4gICAgICBcInlcIjogMFxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIicnQWxsIHRoaW5ncyBtdXN0IGRpZS4uLiBhbmQgeWV0IEkgbGl2ZSBvbi4nJzxicj48YnI+VGhlIGJhbGVmdWwgcmV2ZW5hbnQgTW9yZGVrYWlzZXIgaXMgYW1vbmcgdGhlIG1vc3QgdGVycmlmeWluZyBhbmQgaGF0ZWZ1bCBzcGlyaXRzIGhhdW50aW5nIHRoZSBTaGFkb3cgSXNsZXMuIEhlIGhhcyBleGlzdGVkIGZvciBjb3VudGxlc3MgY2VudHVyaWVzLCBzaGllbGRlZCBmcm9tIHRydWUgZGVhdGggYnkgbmVjcm9tYW50aWMgc29yY2VyeSAuLi5cIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcIm1vcmdhbmFcIixcbiAgICBcImtleVwiOiBcIjI1XCIsXG4gICAgXCJuYW1lXCI6IFwiTW9yZ2FuYVwiLFxuICAgIFwidGl0bGVcIjogXCJGYWxsZW4gQW5nZWxcIixcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJNYWdlXCIsXG4gICAgICBcIlN1cHBvcnRcIlxuICAgIF0sXG4gICAgXCJzdGF0c1wiOiB7XG4gICAgICBcImhwXCI6IDU0Ny40OCxcbiAgICAgIFwiaHBwZXJsZXZlbFwiOiA4NixcbiAgICAgIFwibXBcIjogMzQwLjgsXG4gICAgICBcIm1wcGVybGV2ZWxcIjogNjAsXG4gICAgICBcIm1vdmVzcGVlZFwiOiAzMzUsXG4gICAgICBcImFybW9yXCI6IDI1LjM4NCxcbiAgICAgIFwiYXJtb3JwZXJsZXZlbFwiOiAzLjgsXG4gICAgICBcInNwZWxsYmxvY2tcIjogMzAsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiA0NTAsXG4gICAgICBcImhwcmVnZW5cIjogNS43MDUsXG4gICAgICBcImhwcmVnZW5wZXJsZXZlbFwiOiAwLjYsXG4gICAgICBcIm1wcmVnZW5cIjogOC41LFxuICAgICAgXCJtcHJlZ2VucGVybGV2ZWxcIjogMC44LFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNTUuNDYsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDMuNSxcbiAgICAgIFwiYXR0YWNrc3BlZWRvZmZzZXRcIjogMCxcbiAgICAgIFwiYXR0YWNrc3BlZWRwZXJsZXZlbFwiOiAxLjUzXG4gICAgfSxcbiAgICBcImljb25cIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL2NoYW1waW9uL01vcmdhbmEucG5nXCIsXG4gICAgXCJzcHJpdGVcIjoge1xuICAgICAgXCJ1cmxcIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3Nwcml0ZS9jaGFtcGlvbjIucG5nXCIsXG4gICAgICBcInhcIjogNDMyLFxuICAgICAgXCJ5XCI6IDBcbiAgICB9LFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGVyZSBpcyBhIHdvcmxkIGZhciBhd2F5IHBvcHVsYXRlZCBieSBncmFjZWZ1bCBhbmQgYmVhdXRpZnVsIHdpbmdlZCBiZWluZ3MgZ2lmdGVkIHdpdGggaW1tb3J0YWxpdHksIHdoZXJlIGFuIGFuY2llbnQgY29uZmxpY3Qgc3RpbGwgcmFnZXMuIExpa2Ugc28gbWFueSBjb25mbGljdHMsIHRoaXMgd2FyIHNwbGl0IGZhbWlsaWVzLiBPbmUgc2lkZSBwcm9jbGFpbWVkIHRoZW1zZWx2ZXMgYXMgYmVpbmdzIG9mIHBlcmZlY3Qgb3JkZXIgYW5kIC4uLlwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwibmFtaVwiLFxuICAgIFwia2V5XCI6IFwiMjY3XCIsXG4gICAgXCJuYW1lXCI6IFwiTmFtaVwiLFxuICAgIFwidGl0bGVcIjogXCJ0aGUgVGlkZWNhbGxlclwiLFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcIlN1cHBvcnRcIixcbiAgICAgIFwiTWFnZVwiXG4gICAgXSxcbiAgICBcInN0YXRzXCI6IHtcbiAgICAgIFwiaHBcIjogNDg5LjMyLFxuICAgICAgXCJocHBlcmxldmVsXCI6IDc0LFxuICAgICAgXCJtcFwiOiAzNzcuMjQsXG4gICAgICBcIm1wcGVybGV2ZWxcIjogNDMsXG4gICAgICBcIm1vdmVzcGVlZFwiOiAzMzUsXG4gICAgICBcImFybW9yXCI6IDE5LjcyLFxuICAgICAgXCJhcm1vcnBlcmxldmVsXCI6IDQsXG4gICAgICBcInNwZWxsYmxvY2tcIjogMzAsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiA1NTAsXG4gICAgICBcImhwcmVnZW5cIjogNS40MixcbiAgICAgIFwiaHByZWdlbnBlcmxldmVsXCI6IDAuNTUsXG4gICAgICBcIm1wcmVnZW5cIjogMTEuNSxcbiAgICAgIFwibXByZWdlbnBlcmxldmVsXCI6IDAuNCxcbiAgICAgIFwiY3JpdFwiOiAwLFxuICAgICAgXCJjcml0cGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlXCI6IDUxLjIwOCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlcGVybGV2ZWxcIjogMy4xLFxuICAgICAgXCJhdHRhY2tzcGVlZG9mZnNldFwiOiAtMC4wMyxcbiAgICAgIFwiYXR0YWNrc3BlZWRwZXJsZXZlbFwiOiAyLjYxXG4gICAgfSxcbiAgICBcImljb25cIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL2NoYW1waW9uL05hbWkucG5nXCIsXG4gICAgXCJzcHJpdGVcIjoge1xuICAgICAgXCJ1cmxcIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3Nwcml0ZS9jaGFtcGlvbjIucG5nXCIsXG4gICAgICBcInhcIjogMCxcbiAgICAgIFwieVwiOiA0OFxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIk5hbWkgY2hhbm5lbHMgdGhlIHByaW1hbCBlbmVyZ2llcyBvZiB0aGUgb2NlYW4sIGhhcm5lc3NpbmcgaXRzIG15c3RpY2FsIHJlc3RvcmF0aXZlIHByb3BlcnRpZXMgYW5kIGNvbW1hbmRpbmcgdGhlIHJhdyBwb3dlciBvZiB0aGUgdGlkZXMgdGhlbXNlbHZlcy4gVGhvdWdoIG1hbnkgZG91YnRlZCBoZXIsIE5hbWkgaGFkIHRoZSBicmF2ZXJ5IGFuZCBkZXRlcm1pbmF0aW9uIHRvIHRha2Ugb24gYSBkYW5nZXJvdXMgcXVlc3Qgd2hlbiBubyAuLi5cIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcIm5hc3VzXCIsXG4gICAgXCJrZXlcIjogXCI3NVwiLFxuICAgIFwibmFtZVwiOiBcIk5hc3VzXCIsXG4gICAgXCJ0aXRsZVwiOiBcInRoZSBDdXJhdG9yIG9mIHRoZSBTYW5kc1wiLFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcIkZpZ2h0ZXJcIixcbiAgICAgIFwiVGFua1wiXG4gICAgXSxcbiAgICBcInN0YXRzXCI6IHtcbiAgICAgIFwiaHBcIjogNTYxLjIsXG4gICAgICBcImhwcGVybGV2ZWxcIjogOTAsXG4gICAgICBcIm1wXCI6IDMyNS42LFxuICAgICAgXCJtcHBlcmxldmVsXCI6IDQyLFxuICAgICAgXCJtb3Zlc3BlZWRcIjogMzUwLFxuICAgICAgXCJhcm1vclwiOiAyNC44OCxcbiAgICAgIFwiYXJtb3JwZXJsZXZlbFwiOiAzLjUsXG4gICAgICBcInNwZWxsYmxvY2tcIjogMzIuMSxcbiAgICAgIFwic3BlbGxibG9ja3BlcmxldmVsXCI6IDEuMjUsXG4gICAgICBcImF0dGFja3JhbmdlXCI6IDEyNSxcbiAgICAgIFwiaHByZWdlblwiOiA5LjAxLFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC45LFxuICAgICAgXCJtcHJlZ2VuXCI6IDcuNDQsXG4gICAgICBcIm1wcmVnZW5wZXJsZXZlbFwiOiAwLjUsXG4gICAgICBcImNyaXRcIjogMCxcbiAgICAgIFwiY3JpdHBlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja2RhbWFnZVwiOiA1OS4xOCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlcGVybGV2ZWxcIjogMy41LFxuICAgICAgXCJhdHRhY2tzcGVlZG9mZnNldFwiOiAtMC4wMixcbiAgICAgIFwiYXR0YWNrc3BlZWRwZXJsZXZlbFwiOiAzLjQ4XG4gICAgfSxcbiAgICBcImljb25cIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL2NoYW1waW9uL05hc3VzLnBuZ1wiLFxuICAgIFwic3ByaXRlXCI6IHtcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcHJpdGUvY2hhbXBpb24yLnBuZ1wiLFxuICAgICAgXCJ4XCI6IDQ4LFxuICAgICAgXCJ5XCI6IDQ4XG4gICAgfSxcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiJydXaGF0IHdhcyBmYWxsZW4gd2lsbCBiZSBncmVhdCBhZ2Fpbi4nJzxicj48YnI+TmFzdXMgaXMgYW4gaW1wb3NpbmcsIGphY2thbC1oZWFkZWQgQXNjZW5kZWQgYmVpbmcgZnJvbSBhbmNpZW50IFNodXJpbWEsIGEgaGVyb2ljIGZpZ3VyZSByZWdhcmRlZCBhcyBhIGRlbWlnb2QgYnkgdGhlIHBlb3BsZSBvZiB0aGUgZGVzZXJ0LiBGaWVyY2VseSBpbnRlbGxpZ2VudCwgaGUgd2FzIGEgZ3VhcmRpYW4gb2Yga25vd2xlZGdlIGFuZCAuLi5cIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcIm5hdXRpbHVzXCIsXG4gICAgXCJrZXlcIjogXCIxMTFcIixcbiAgICBcIm5hbWVcIjogXCJOYXV0aWx1c1wiLFxuICAgIFwidGl0bGVcIjogXCJ0aGUgVGl0YW4gb2YgdGhlIERlcHRoc1wiLFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcIlRhbmtcIixcbiAgICAgIFwiRmlnaHRlclwiXG4gICAgXSxcbiAgICBcInN0YXRzXCI6IHtcbiAgICAgIFwiaHBcIjogNTc2LjQ4LFxuICAgICAgXCJocHBlcmxldmVsXCI6IDg2LFxuICAgICAgXCJtcFwiOiAzMzQsXG4gICAgICBcIm1wcGVybGV2ZWxcIjogNDcsXG4gICAgICBcIm1vdmVzcGVlZFwiOiAzMjUsXG4gICAgICBcImFybW9yXCI6IDI2LjQ2LFxuICAgICAgXCJhcm1vcnBlcmxldmVsXCI6IDMuNzUsXG4gICAgICBcInNwZWxsYmxvY2tcIjogMzIuMSxcbiAgICAgIFwic3BlbGxibG9ja3BlcmxldmVsXCI6IDEuMjUsXG4gICAgICBcImF0dGFja3JhbmdlXCI6IDE3NSxcbiAgICAgIFwiaHByZWdlblwiOiA4LjM3LFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC41NSxcbiAgICAgIFwibXByZWdlblwiOiA4LjYyNSxcbiAgICAgIFwibXByZWdlbnBlcmxldmVsXCI6IDAuNyxcbiAgICAgIFwiY3JpdFwiOiAwLFxuICAgICAgXCJjcml0cGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlXCI6IDU3LjU0NCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlcGVybGV2ZWxcIjogMy4zLFxuICAgICAgXCJhdHRhY2tzcGVlZG9mZnNldFwiOiAwLjAyLFxuICAgICAgXCJhdHRhY2tzcGVlZHBlcmxldmVsXCI6IDFcbiAgICB9LFxuICAgIFwiaWNvblwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvY2hhbXBpb24vTmF1dGlsdXMucG5nXCIsXG4gICAgXCJzcHJpdGVcIjoge1xuICAgICAgXCJ1cmxcIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3Nwcml0ZS9jaGFtcGlvbjIucG5nXCIsXG4gICAgICBcInhcIjogOTYsXG4gICAgICBcInlcIjogNDhcbiAgICB9LFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJPbmNlLCBOYXV0aWx1cyB3YXMgYSBzYWlsb3IgY29tbWlzc2lvbmVkIGJ5IHRoZSBJbnN0aXR1dGUgb2YgV2FyIHRvIGV4cGxvcmUgdGhlIHVuY2hhcnRlZCByZWFjaGVzIG9mIHRoZSBHdWFyZGlhbidzIFNlYS4gVGhpcyBleHBlZGl0aW9uIHRvb2sgaGltIGRlZXAgaW50byB1bmtub3duIHdhdGVycyB3aGVyZSBoZSBhbmQgaGlzIGNyZXcgZm91bmQgYSB2YXN0IHNlY3Rpb24gb2YgYmxhY2sgb296aW5nIGxpcXVpZCB0aGF0IG5vbmUgb2YgLi4uXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJuaWRhbGVlXCIsXG4gICAgXCJrZXlcIjogXCI3NlwiLFxuICAgIFwibmFtZVwiOiBcIk5pZGFsZWVcIixcbiAgICBcInRpdGxlXCI6IFwidGhlIEJlc3RpYWwgSHVudHJlc3NcIixcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJBc3Nhc3NpblwiLFxuICAgICAgXCJGaWdodGVyXCJcbiAgICBdLFxuICAgIFwic3RhdHNcIjoge1xuICAgICAgXCJocFwiOiA1MTEuMixcbiAgICAgIFwiaHBwZXJsZXZlbFwiOiA4MCxcbiAgICAgIFwibXBcIjogMjk1LjYsXG4gICAgICBcIm1wcGVybGV2ZWxcIjogNDUsXG4gICAgICBcIm1vdmVzcGVlZFwiOiAzMzUsXG4gICAgICBcImFybW9yXCI6IDIyLjg4LFxuICAgICAgXCJhcm1vcnBlcmxldmVsXCI6IDMuNSxcbiAgICAgIFwic3BlbGxibG9ja1wiOiAzMCxcbiAgICAgIFwic3BlbGxibG9ja3BlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja3JhbmdlXCI6IDUyNSxcbiAgICAgIFwiaHByZWdlblwiOiA2LjAwNSxcbiAgICAgIFwiaHByZWdlbnBlcmxldmVsXCI6IDAuNixcbiAgICAgIFwibXByZWdlblwiOiA2LFxuICAgICAgXCJtcHJlZ2VucGVybGV2ZWxcIjogMC44LFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNDcuODgsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDMuNSxcbiAgICAgIFwiYXR0YWNrc3BlZWRvZmZzZXRcIjogLTAuMDIsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMy4yMlxuICAgIH0sXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9jaGFtcGlvbi9OaWRhbGVlLnBuZ1wiLFxuICAgIFwic3ByaXRlXCI6IHtcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcHJpdGUvY2hhbXBpb24yLnBuZ1wiLFxuICAgICAgXCJ4XCI6IDE0NCxcbiAgICAgIFwieVwiOiA0OFxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZXJlIGFyZSBmZXcgZHdlbGxlcnMsIGxldCBhbG9uZSBjaGFtcGlvbnMsIHJlc2lkaW5nIGluIHRoZSBibGFzdGVkIGFuZCBkYW5nZXJvdXMgbGFuZHMgdGhhdCBsaWUgc291dGggb2YgdGhlIEdyZWF0IEJhcnJpZXIuIE11Y2ggb2YgdGhhdCB3b3JsZCBzdGlsbCBiZWFycyB0aGUgc2NhcnMgb2YgcGFzdCBSdW5lcyBXYXJzLCBlc3BlY2lhbGx5IHRoZSBteXN0ZXJpb3VzIEt1bXVuZ3UgSnVuZ2xlLiBUaGVyZSBhcmUgLi4uXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJub2N0dXJuZVwiLFxuICAgIFwia2V5XCI6IFwiNTZcIixcbiAgICBcIm5hbWVcIjogXCJOb2N0dXJuZVwiLFxuICAgIFwidGl0bGVcIjogXCJ0aGUgRXRlcm5hbCBOaWdodG1hcmVcIixcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJBc3Nhc3NpblwiLFxuICAgICAgXCJGaWdodGVyXCJcbiAgICBdLFxuICAgIFwic3RhdHNcIjoge1xuICAgICAgXCJocFwiOiA1ODIuOCxcbiAgICAgIFwiaHBwZXJsZXZlbFwiOiA4NSxcbiAgICAgIFwibXBcIjogMjczLjgsXG4gICAgICBcIm1wcGVybGV2ZWxcIjogMzUsXG4gICAgICBcIm1vdmVzcGVlZFwiOiAzNDUsXG4gICAgICBcImFybW9yXCI6IDI2Ljg4LFxuICAgICAgXCJhcm1vcnBlcmxldmVsXCI6IDMuNSxcbiAgICAgIFwic3BlbGxibG9ja1wiOiAzMi4xLFxuICAgICAgXCJzcGVsbGJsb2NrcGVybGV2ZWxcIjogMS4yNSxcbiAgICAgIFwiYXR0YWNrcmFuZ2VcIjogMTI1LFxuICAgICAgXCJocHJlZ2VuXCI6IDguMjYsXG4gICAgICBcImhwcmVnZW5wZXJsZXZlbFwiOiAwLjc1LFxuICAgICAgXCJtcHJlZ2VuXCI6IDYuNzU1LFxuICAgICAgXCJtcHJlZ2VucGVybGV2ZWxcIjogMC40NSxcbiAgICAgIFwiY3JpdFwiOiAwLFxuICAgICAgXCJjcml0cGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlXCI6IDU5LjIwOCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlcGVybGV2ZWxcIjogMy4xLFxuICAgICAgXCJhdHRhY2tzcGVlZG9mZnNldFwiOiAtMC4wNjUsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMi43XG4gICAgfSxcbiAgICBcImljb25cIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL2NoYW1waW9uL05vY3R1cm5lLnBuZ1wiLFxuICAgIFwic3ByaXRlXCI6IHtcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcHJpdGUvY2hhbXBpb24yLnBuZ1wiLFxuICAgICAgXCJ4XCI6IDE5MixcbiAgICAgIFwieVwiOiA0OFxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIkJlZm9yZSBOb2N0dXJuZSwgcGVvcGxlIGJlbGlldmVkIHRoYXQgZHJlYW1zIHdlcmUgZmlnbWVudHMgb2YgdGhlaXIgaW1hZ2luYXRpb24sIG1lYW5pbmdsZXNzIGltYWdlcyB0aGF0IGZsYXNoZWQgdGhyb3VnaCB0aGUgbWluZCB3aGVuIG9uZSBzbGVwdC4gVGhpcyBiZWxpZWYgd2FzIHB1dCB0byB0aGUgdGVzdCB3aGVuIGEgcmFzaCBvZiBzbGVlcC1yZWxhdGVkIGluY2lkZW50cyBzdGFydGVkIGFmZmxpY3Rpbmcgc3VtbW9uZXJzIG9mIC4uLlwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwibnVudVwiLFxuICAgIFwia2V5XCI6IFwiMjBcIixcbiAgICBcIm5hbWVcIjogXCJOdW51XCIsXG4gICAgXCJ0aXRsZVwiOiBcInRoZSBZZXRpIFJpZGVyXCIsXG4gICAgXCJ0YWdzXCI6IFtcbiAgICAgIFwiU3VwcG9ydFwiLFxuICAgICAgXCJGaWdodGVyXCJcbiAgICBdLFxuICAgIFwic3RhdHNcIjoge1xuICAgICAgXCJocFwiOiA1OTguMjgsXG4gICAgICBcImhwcGVybGV2ZWxcIjogOTAsXG4gICAgICBcIm1wXCI6IDI4My41NixcbiAgICAgIFwibXBwZXJsZXZlbFwiOiA0MixcbiAgICAgIFwibW92ZXNwZWVkXCI6IDM1MCxcbiAgICAgIFwiYXJtb3JcIjogMjYuMzgsXG4gICAgICBcImFybW9ycGVybGV2ZWxcIjogMy41LFxuICAgICAgXCJzcGVsbGJsb2NrXCI6IDMyLjEsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAxLjI1LFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiAxMjUsXG4gICAgICBcImhwcmVnZW5cIjogOC4zOSxcbiAgICAgIFwiaHByZWdlbnBlcmxldmVsXCI6IDAuOCxcbiAgICAgIFwibXByZWdlblwiOiA3LjQ0LFxuICAgICAgXCJtcHJlZ2VucGVybGV2ZWxcIjogMC41LFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNTksXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDQsXG4gICAgICBcImF0dGFja3NwZWVkb2Zmc2V0XCI6IDAsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMi4yNVxuICAgIH0sXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9jaGFtcGlvbi9OdW51LnBuZ1wiLFxuICAgIFwic3ByaXRlXCI6IHtcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcHJpdGUvY2hhbXBpb24yLnBuZ1wiLFxuICAgICAgXCJ4XCI6IDI0MCxcbiAgICAgIFwieVwiOiA0OFxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIlNvbWV0aW1lcyBib25kcyBvZiBmcmllbmRzaGlwIGJlY29tZSBzdHJvbmdlciB0aGFuIGV2ZW4gYm9uZHMgb2YgYmxvb2QuIFdoZW4gdGhvc2UgYm9uZHMgbGluayBhIGZlYXJsZXNzIGJveSB0byBhIGZlYXJzb21lIFlldGksIHRoZSBib25kIGJlY29tZXMgYSBmb3JjZSB0byBiZSByZWNrb25lZCB3aXRoLiBHaXZlbiB0aGUgcmVzcG9uc2liaWxpdHkgb2YgdGFtaW5nIGEgdGVycmlmeWluZyBiZWFzdCwgTnVudSBmb3JnZWQgYSAuLi5cIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcIm9sYWZcIixcbiAgICBcImtleVwiOiBcIjJcIixcbiAgICBcIm5hbWVcIjogXCJPbGFmXCIsXG4gICAgXCJ0aXRsZVwiOiBcInRoZSBCZXJzZXJrZXJcIixcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJGaWdodGVyXCIsXG4gICAgICBcIlRhbmtcIlxuICAgIF0sXG4gICAgXCJzdGF0c1wiOiB7XG4gICAgICBcImhwXCI6IDU5Ny4yNCxcbiAgICAgIFwiaHBwZXJsZXZlbFwiOiA5MyxcbiAgICAgIFwibXBcIjogMzE1LjYsXG4gICAgICBcIm1wcGVybGV2ZWxcIjogNDIsXG4gICAgICBcIm1vdmVzcGVlZFwiOiAzNTAsXG4gICAgICBcImFybW9yXCI6IDI2LjA0LFxuICAgICAgXCJhcm1vcnBlcmxldmVsXCI6IDMsXG4gICAgICBcInNwZWxsYmxvY2tcIjogMzIuMSxcbiAgICAgIFwic3BlbGxibG9ja3BlcmxldmVsXCI6IDEuMjUsXG4gICAgICBcImF0dGFja3JhbmdlXCI6IDEyNSxcbiAgICAgIFwiaHByZWdlblwiOiA4LjUxLFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC45LFxuICAgICAgXCJtcHJlZ2VuXCI6IDcuNDY1LFxuICAgICAgXCJtcHJlZ2VucGVybGV2ZWxcIjogMC41NzUsXG4gICAgICBcImNyaXRcIjogMCxcbiAgICAgIFwiY3JpdHBlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja2RhbWFnZVwiOiA1OS45OCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlcGVybGV2ZWxcIjogMy41LFxuICAgICAgXCJhdHRhY2tzcGVlZG9mZnNldFwiOiAtMC4xLFxuICAgICAgXCJhdHRhY2tzcGVlZHBlcmxldmVsXCI6IDIuN1xuICAgIH0sXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9jaGFtcGlvbi9PbGFmLnBuZ1wiLFxuICAgIFwic3ByaXRlXCI6IHtcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcHJpdGUvY2hhbXBpb24yLnBuZ1wiLFxuICAgICAgXCJ4XCI6IDI4OCxcbiAgICAgIFwieVwiOiA0OFxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIk1vc3QgbWVuIHdvdWxkIHNheSB0aGF0IGRlYXRoIGlzIGEgdGhpbmcgdG8gYmUgZmVhcmVkOyBub25lIG9mIHRob3NlIG1lbiB3b3VsZCBiZSBPbGFmLiBUaGUgQmVyc2Vya2VyIGxpdmVzIG9ubHkgZm9yIHRoZSByb2FyIG9mIGEgYmF0dGxlIGNyeSBhbmQgdGhlIGNsYXNoIG9mIHN0ZWVsLiBTcHVycmVkIG9uIGJ5IGhpcyBodW5nZXIgZm9yIGdsb3J5IGFuZCB0aGUgbG9vbWluZyBjdXJzZSBvZiBhIGZvcmdldHRhYmxlIGRlYXRoLCBPbGFmIC4uLlwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwib3JpYW5uYVwiLFxuICAgIFwia2V5XCI6IFwiNjFcIixcbiAgICBcIm5hbWVcIjogXCJPcmlhbm5hXCIsXG4gICAgXCJ0aXRsZVwiOiBcInRoZSBMYWR5IG9mIENsb2Nrd29ya1wiLFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcIk1hZ2VcIixcbiAgICAgIFwiU3VwcG9ydFwiXG4gICAgXSxcbiAgICBcInN0YXRzXCI6IHtcbiAgICAgIFwiaHBcIjogNTE3LjcyLFxuICAgICAgXCJocHBlcmxldmVsXCI6IDc5LFxuICAgICAgXCJtcFwiOiAzMzQsXG4gICAgICBcIm1wcGVybGV2ZWxcIjogNTAsXG4gICAgICBcIm1vdmVzcGVlZFwiOiAzMjUsXG4gICAgICBcImFybW9yXCI6IDE3LjA0LFxuICAgICAgXCJhcm1vcnBlcmxldmVsXCI6IDMsXG4gICAgICBcInNwZWxsYmxvY2tcIjogMzAsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiA1MjUsXG4gICAgICBcImhwcmVnZW5cIjogNi44NyxcbiAgICAgIFwiaHByZWdlbnBlcmxldmVsXCI6IDAuNTUsXG4gICAgICBcIm1wcmVnZW5cIjogNixcbiAgICAgIFwibXByZWdlbnBlcmxldmVsXCI6IDAuOCxcbiAgICAgIFwiY3JpdFwiOiAwLFxuICAgICAgXCJjcml0cGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlXCI6IDQwLjM2OCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlcGVybGV2ZWxcIjogMi42LFxuICAgICAgXCJhdHRhY2tzcGVlZG9mZnNldFwiOiAtMC4wNSxcbiAgICAgIFwiYXR0YWNrc3BlZWRwZXJsZXZlbFwiOiAzLjVcbiAgICB9LFxuICAgIFwiaWNvblwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvY2hhbXBpb24vT3JpYW5uYS5wbmdcIixcbiAgICBcInNwcml0ZVwiOiB7XG4gICAgICBcInVybFwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvc3ByaXRlL2NoYW1waW9uMi5wbmdcIixcbiAgICAgIFwieFwiOiAzMzYsXG4gICAgICBcInlcIjogNDhcbiAgICB9LFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGVyZSBvbmNlIHdhcyBhIFBpbHRvdmlhbiBtYW4gbmFtZWQgQ29yaW4gUmV2ZWNrIHdobyBoYWQgYSBkYXVnaHRlciBuYW1lZCBPcmlhbm5hLCB3aG9tIGhlIGxvdmVkIG1vcmUgdGhhbiBhbnl0aGluZyBlbHNlIGluIHRoZSB3b3JsZC4gVGhvdWdoIE9yaWFubmEgaGFkIGluY3JlZGlibGUgdGFsZW50IGZvciBkYW5jaW5nLCBzaGUgd2FzIGRlZXBseSBmYXNjaW5hdGVkIGJ5IHRoZSBjaGFtcGlvbnMgb2YgdGhlIExlYWd1ZSBvZiAuLi5cIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcInBhbnRoZW9uXCIsXG4gICAgXCJrZXlcIjogXCI4MFwiLFxuICAgIFwibmFtZVwiOiBcIlBhbnRoZW9uXCIsXG4gICAgXCJ0aXRsZVwiOiBcInRoZSBBcnRpc2FuIG9mIFdhclwiLFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcIkZpZ2h0ZXJcIixcbiAgICAgIFwiQXNzYXNzaW5cIlxuICAgIF0sXG4gICAgXCJzdGF0c1wiOiB7XG4gICAgICBcImhwXCI6IDU3OS4xNixcbiAgICAgIFwiaHBwZXJsZXZlbFwiOiA4NyxcbiAgICAgIFwibXBcIjogMzE3LjEyLFxuICAgICAgXCJtcHBlcmxldmVsXCI6IDMxLFxuICAgICAgXCJtb3Zlc3BlZWRcIjogMzU1LFxuICAgICAgXCJhcm1vclwiOiAyNy42NTIsXG4gICAgICBcImFybW9ycGVybGV2ZWxcIjogMy45LFxuICAgICAgXCJzcGVsbGJsb2NrXCI6IDMyLjEsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAxLjI1LFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiAxNTAsXG4gICAgICBcImhwcmVnZW5cIjogNy44NCxcbiAgICAgIFwiaHByZWdlbnBlcmxldmVsXCI6IDAuNjUsXG4gICAgICBcIm1wcmVnZW5cIjogNy4zNTUsXG4gICAgICBcIm1wcmVnZW5wZXJsZXZlbFwiOiAwLjQ1LFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNTUuNTcyLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VwZXJsZXZlbFwiOiAyLjksXG4gICAgICBcImF0dGFja3NwZWVkb2Zmc2V0XCI6IC0wLjAzLFxuICAgICAgXCJhdHRhY2tzcGVlZHBlcmxldmVsXCI6IDIuOTVcbiAgICB9LFxuICAgIFwiaWNvblwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvY2hhbXBpb24vUGFudGhlb24ucG5nXCIsXG4gICAgXCJzcHJpdGVcIjoge1xuICAgICAgXCJ1cmxcIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3Nwcml0ZS9jaGFtcGlvbjIucG5nXCIsXG4gICAgICBcInhcIjogMzg0LFxuICAgICAgXCJ5XCI6IDQ4XG4gICAgfSxcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiJydCcmluZyBmb3J0aCBvbmUgdHJ1ZSBjaGFtcGlvbiwgb3IgYSBodW5kcmVkIG1vcmUgbGlrZSB5b3UsIGFuZCB0aGVuIHdlIHNoYWxsIGhhdmUgYSBiYXR0bGUgdGhhdCB3aWxsIGJlIHNwb2tlbiBvZiB1bnRpbCB0aGUgZW5kIG9mIHRpbWUuJyc8YnI+PGJyPlRoZSBwZWVybGVzcyB3YXJyaW9yIGtub3duIGFzIFBhbnRoZW9uIGlzIGEgbmlnaC11bnN0b3BwYWJsZSBwYXJhZ29uIG9mIGJhdHRsZS4gSGUgd2FzIGJvcm4gYW1vbmcgdGhlIC4uLlwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwicG9wcHlcIixcbiAgICBcImtleVwiOiBcIjc4XCIsXG4gICAgXCJuYW1lXCI6IFwiUG9wcHlcIixcbiAgICBcInRpdGxlXCI6IFwiS2VlcGVyIG9mIHRoZSBIYW1tZXJcIixcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJUYW5rXCIsXG4gICAgICBcIkZpZ2h0ZXJcIlxuICAgIF0sXG4gICAgXCJzdGF0c1wiOiB7XG4gICAgICBcImhwXCI6IDU0MCxcbiAgICAgIFwiaHBwZXJsZXZlbFwiOiA5MCxcbiAgICAgIFwibXBcIjogMjgwLFxuICAgICAgXCJtcHBlcmxldmVsXCI6IDQwLFxuICAgICAgXCJtb3Zlc3BlZWRcIjogMzQ1LFxuICAgICAgXCJhcm1vclwiOiAyOSxcbiAgICAgIFwiYXJtb3JwZXJsZXZlbFwiOiAzLjUsXG4gICAgICBcInNwZWxsYmxvY2tcIjogMzIsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAxLjI1LFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiAxMjUsXG4gICAgICBcImhwcmVnZW5cIjogOCxcbiAgICAgIFwiaHByZWdlbnBlcmxldmVsXCI6IDAuOCxcbiAgICAgIFwibXByZWdlblwiOiA3LFxuICAgICAgXCJtcHJlZ2VucGVybGV2ZWxcIjogMC43LFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNTYsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDQsXG4gICAgICBcImF0dGFja3NwZWVkb2Zmc2V0XCI6IDAsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMi41XG4gICAgfSxcbiAgICBcImljb25cIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL2NoYW1waW9uL1BvcHB5LnBuZ1wiLFxuICAgIFwic3ByaXRlXCI6IHtcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcHJpdGUvY2hhbXBpb24yLnBuZ1wiLFxuICAgICAgXCJ4XCI6IDQzMixcbiAgICAgIFwieVwiOiA0OFxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIicnSSdtIG5vIGhlcm8uIEp1c3QgYSB5b3JkbGUgd2l0aCBhIGhhbW1lci4nJzxicj48YnI+UnVuZXRlcnJhIGhhcyBubyBzaG9ydGFnZSBvZiB2YWxpYW50IGNoYW1waW9ucywgYnV0IGZldyBhcmUgYXMgdGVuYWNpb3VzIGFzIFBvcHB5LiBCZWFyaW5nIGEgaGFtbWVyIHR3aWNlIHRoZSBsZW5ndGggb2YgaGVyIGJvZHksIHRoaXMgZGV0ZXJtaW5lZCB5b3JkbGUgaGFzIHNwZW50IHVudG9sZCB5ZWFycyBzZWFyY2hpbmcgZm9yIHRoZSAuLi5cIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcInF1aW5uXCIsXG4gICAgXCJrZXlcIjogXCIxMzNcIixcbiAgICBcIm5hbWVcIjogXCJRdWlublwiLFxuICAgIFwidGl0bGVcIjogXCJEZW1hY2lhJ3MgV2luZ3NcIixcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJNYXJrc21hblwiLFxuICAgICAgXCJGaWdodGVyXCJcbiAgICBdLFxuICAgIFwic3RhdHNcIjoge1xuICAgICAgXCJocFwiOiA1MzIuOCxcbiAgICAgIFwiaHBwZXJsZXZlbFwiOiA4NSxcbiAgICAgIFwibXBcIjogMjY4LjgsXG4gICAgICBcIm1wcGVybGV2ZWxcIjogMzUsXG4gICAgICBcIm1vdmVzcGVlZFwiOiAzMzUsXG4gICAgICBcImFybW9yXCI6IDIzLjM4LFxuICAgICAgXCJhcm1vcnBlcmxldmVsXCI6IDMuNSxcbiAgICAgIFwic3BlbGxibG9ja1wiOiAzMCxcbiAgICAgIFwic3BlbGxibG9ja3BlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja3JhbmdlXCI6IDUyNSxcbiAgICAgIFwiaHByZWdlblwiOiA1LjQyLFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC41NSxcbiAgICAgIFwibXByZWdlblwiOiA2Ljk3LFxuICAgICAgXCJtcHJlZ2VucGVybGV2ZWxcIjogMC40LFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNTQuNDYsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDIuNDEsXG4gICAgICBcImF0dGFja3NwZWVkb2Zmc2V0XCI6IC0wLjA2NSxcbiAgICAgIFwiYXR0YWNrc3BlZWRwZXJsZXZlbFwiOiAzLjFcbiAgICB9LFxuICAgIFwiaWNvblwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvY2hhbXBpb24vUXVpbm4ucG5nXCIsXG4gICAgXCJzcHJpdGVcIjoge1xuICAgICAgXCJ1cmxcIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3Nwcml0ZS9jaGFtcGlvbjIucG5nXCIsXG4gICAgICBcInhcIjogMCxcbiAgICAgIFwieVwiOiA5NlxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIlF1aW5uIGFuZCBWYWxvciBhcmUgYW4gZWxpdGUgcmFuZ2VyIHRlYW0uIFdpdGggY3Jvc3Nib3cgYW5kIGNsYXcsIHRoZXkgdW5kZXJ0YWtlIHRoZWlyIG5hdGlvbidzIG1vc3QgZGFuZ2Vyb3VzIG1pc3Npb25zIGRlZXAgd2l0aGluIGVuZW15IHRlcnJpdG9yeSwgZnJvbSBzd2lmdCByZWNvbm5haXNzYW5jZSB0byBsZXRoYWwgc3RyaWtlcy4gVGhlIHBhaXIncyB1bmJyZWFrYWJsZSBib25kIGlzIGRlYWRseSBvbiB0aGUgYmF0dGxlZmllbGQsIC4uLlwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwicmFtbXVzXCIsXG4gICAgXCJrZXlcIjogXCIzM1wiLFxuICAgIFwibmFtZVwiOiBcIlJhbW11c1wiLFxuICAgIFwidGl0bGVcIjogXCJ0aGUgQXJtb3JkaWxsb1wiLFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcIlRhbmtcIixcbiAgICAgIFwiRmlnaHRlclwiXG4gICAgXSxcbiAgICBcInN0YXRzXCI6IHtcbiAgICAgIFwiaHBcIjogNTY0LjQ4LFxuICAgICAgXCJocHBlcmxldmVsXCI6IDg2LFxuICAgICAgXCJtcFwiOiAzMTAuNDQsXG4gICAgICBcIm1wcGVybGV2ZWxcIjogMzMsXG4gICAgICBcIm1vdmVzcGVlZFwiOiAzMzUsXG4gICAgICBcImFybW9yXCI6IDMxLjM4NCxcbiAgICAgIFwiYXJtb3JwZXJsZXZlbFwiOiA0LjMsXG4gICAgICBcInNwZWxsYmxvY2tcIjogMzIuMSxcbiAgICAgIFwic3BlbGxibG9ja3BlcmxldmVsXCI6IDEuMjUsXG4gICAgICBcImF0dGFja3JhbmdlXCI6IDEyNSxcbiAgICAgIFwiaHByZWdlblwiOiA3LjkyLFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC41NSxcbiAgICAgIFwibXByZWdlblwiOiA3Ljg0LFxuICAgICAgXCJtcHJlZ2VucGVybGV2ZWxcIjogMC41LFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNTUuODgsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDMuNSxcbiAgICAgIFwiYXR0YWNrc3BlZWRvZmZzZXRcIjogMCxcbiAgICAgIFwiYXR0YWNrc3BlZWRwZXJsZXZlbFwiOiAyLjIxNVxuICAgIH0sXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9jaGFtcGlvbi9SYW1tdXMucG5nXCIsXG4gICAgXCJzcHJpdGVcIjoge1xuICAgICAgXCJ1cmxcIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3Nwcml0ZS9jaGFtcGlvbjIucG5nXCIsXG4gICAgICBcInhcIjogNDgsXG4gICAgICBcInlcIjogOTZcbiAgICB9LFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCInJ09LLicnPGJyPjxicj5JZG9saXplZCBieSBtYW55LCBkaXNtaXNzZWQgYnkgc29tZSwgbXlzdGlmeWluZyB0byBhbGwsIHRoZSBjdXJpb3VzIGJlaW5nLCBSYW1tdXMsIGlzIGFuIGVuaWdtYS4gUHJvdGVjdGVkIGJ5IGEgc3Bpa2VkIHNoZWxsLCBSYW1tdXMgaW5zcGlyZXMgaW5jcmVhc2luZ2x5IGRpc3BhcmF0ZSB0aGVvcmllcyBvbiBoaXMgb3JpZ2luIHdoZXJldmVyIGhlIGdvZXMgLSBmcm9tIGRlbWlnb2QsIHRvIHNhY3JlZCAuLi5cIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcInJla3NhaVwiLFxuICAgIFwia2V5XCI6IFwiNDIxXCIsXG4gICAgXCJuYW1lXCI6IFwiUmVrJ1NhaVwiLFxuICAgIFwidGl0bGVcIjogXCJ0aGUgVm9pZCBCdXJyb3dlclwiLFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcIkZpZ2h0ZXJcIlxuICAgIF0sXG4gICAgXCJzdGF0c1wiOiB7XG4gICAgICBcImhwXCI6IDU3MCxcbiAgICAgIFwiaHBwZXJsZXZlbFwiOiA5MCxcbiAgICAgIFwibXBcIjogMTAwLFxuICAgICAgXCJtcHBlcmxldmVsXCI6IDAsXG4gICAgICBcIm1vdmVzcGVlZFwiOiAzMzUsXG4gICAgICBcImFybW9yXCI6IDI0LFxuICAgICAgXCJhcm1vcnBlcmxldmVsXCI6IDMuNCxcbiAgICAgIFwic3BlbGxibG9ja1wiOiAzMi4xLFxuICAgICAgXCJzcGVsbGJsb2NrcGVybGV2ZWxcIjogMS4yNSxcbiAgICAgIFwiYXR0YWNrcmFuZ2VcIjogMTc1LFxuICAgICAgXCJocHJlZ2VuXCI6IDcuMzQsXG4gICAgICBcImhwcmVnZW5wZXJsZXZlbFwiOiAwLjY1LFxuICAgICAgXCJtcHJlZ2VuXCI6IDAsXG4gICAgICBcIm1wcmVnZW5wZXJsZXZlbFwiOiAwLFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNTUuNjI4LFxuICAgICAgXCJhdHRhY2tkYW1hZ2VwZXJsZXZlbFwiOiAzLjM1LFxuICAgICAgXCJhdHRhY2tzcGVlZG9mZnNldFwiOiAwLFxuICAgICAgXCJhdHRhY2tzcGVlZHBlcmxldmVsXCI6IDJcbiAgICB9LFxuICAgIFwiaWNvblwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvY2hhbXBpb24vUmVrU2FpLnBuZ1wiLFxuICAgIFwic3ByaXRlXCI6IHtcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcHJpdGUvY2hhbXBpb24yLnBuZ1wiLFxuICAgICAgXCJ4XCI6IDk2LFxuICAgICAgXCJ5XCI6IDk2XG4gICAgfSxcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIGxhcmdlc3QgYW5kIGZpZXJjZXN0IG9mIGhlciBzcGVjaWVzLCBSZWsnU2FpIGlzIGEgbWVyY2lsZXNzIHByZWRhdG9yIHRoYXQgdHVubmVscyB0aHJvdWdoIHRoZSBlYXJ0aCB0byBhbWJ1c2ggYW5kIGRldm91ciBoZXIgcHJleS4gSGVyIGluc2F0aWFibGUgaHVuZ2VyIGhhcyBsYWlkIHdhc3RlIHRvIGVudGlyZSByZWdpb25zIG9mIHRoZSBvbmNlLWdyZWF0IFNodXJpbWFuIGVtcGlyZS4gTWVyY2hhbnRzLCB0cmFkZXJzIGFuZCAuLi5cIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcInJlbmVrdG9uXCIsXG4gICAgXCJrZXlcIjogXCI1OFwiLFxuICAgIFwibmFtZVwiOiBcIlJlbmVrdG9uXCIsXG4gICAgXCJ0aXRsZVwiOiBcInRoZSBCdXRjaGVyIG9mIHRoZSBTYW5kc1wiLFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcIkZpZ2h0ZXJcIixcbiAgICAgIFwiVGFua1wiXG4gICAgXSxcbiAgICBcInN0YXRzXCI6IHtcbiAgICAgIFwiaHBcIjogNTcyLjE2LFxuICAgICAgXCJocHBlcmxldmVsXCI6IDg3LFxuICAgICAgXCJtcFwiOiAxMDAsXG4gICAgICBcIm1wcGVybGV2ZWxcIjogMCxcbiAgICAgIFwibW92ZXNwZWVkXCI6IDM0NSxcbiAgICAgIFwiYXJtb3JcIjogMjUuNTg0LFxuICAgICAgXCJhcm1vcnBlcmxldmVsXCI6IDMuOCxcbiAgICAgIFwic3BlbGxibG9ja1wiOiAzMi4xLFxuICAgICAgXCJzcGVsbGJsb2NrcGVybGV2ZWxcIjogMS4yNSxcbiAgICAgIFwiYXR0YWNrcmFuZ2VcIjogMTI1LFxuICAgICAgXCJocHJlZ2VuXCI6IDcuOTYsXG4gICAgICBcImhwcmVnZW5wZXJsZXZlbFwiOiAwLjc1LFxuICAgICAgXCJtcHJlZ2VuXCI6IDAsXG4gICAgICBcIm1wcmVnZW5wZXJsZXZlbFwiOiAwLFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNTguMzI4LFxuICAgICAgXCJhdHRhY2tkYW1hZ2VwZXJsZXZlbFwiOiAzLjEsXG4gICAgICBcImF0dGFja3NwZWVkb2Zmc2V0XCI6IC0wLjA2LFxuICAgICAgXCJhdHRhY2tzcGVlZHBlcmxldmVsXCI6IDIuNjVcbiAgICB9LFxuICAgIFwiaWNvblwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvY2hhbXBpb24vUmVuZWt0b24ucG5nXCIsXG4gICAgXCJzcHJpdGVcIjoge1xuICAgICAgXCJ1cmxcIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3Nwcml0ZS9jaGFtcGlvbjIucG5nXCIsXG4gICAgICBcInhcIjogMTQ0LFxuICAgICAgXCJ5XCI6IDk2XG4gICAgfSxcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiJydCbG9vZCBhbmQgdmVuZ2VhbmNlLicnPGJyPjxicj5SZW5la3RvbiBpcyBhIHRlcnJpZnlpbmcsIHJhZ2UtZnVlbGVkIEFzY2VuZGVkIGJlaW5nIGZyb20gdGhlIHNjb3JjaGVkIGRlc2VydHMgb2YgU2h1cmltYS4gT25jZSwgaGUgd2FzIGhpcyBlbXBpcmUncyBtb3N0IGVzdGVlbWVkIHdhcnJpb3IsIGxlYWRpbmcgdGhlIGFybWllcyBvZiBTaHVyaW1hIHRvIGNvdW50bGVzcyB2aWN0b3JpZXMuIEhvd2V2ZXIsIGFmdGVyIHRoZSAuLi5cIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcInJlbmdhclwiLFxuICAgIFwia2V5XCI6IFwiMTA3XCIsXG4gICAgXCJuYW1lXCI6IFwiUmVuZ2FyXCIsXG4gICAgXCJ0aXRsZVwiOiBcInRoZSBQcmlkZXN0YWxrZXJcIixcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJBc3Nhc3NpblwiLFxuICAgICAgXCJGaWdodGVyXCJcbiAgICBdLFxuICAgIFwic3RhdHNcIjoge1xuICAgICAgXCJocFwiOiA1ODYuMixcbiAgICAgIFwiaHBwZXJsZXZlbFwiOiA5MCxcbiAgICAgIFwibXBcIjogNSxcbiAgICAgIFwibXBwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJtb3Zlc3BlZWRcIjogMzQ1LFxuICAgICAgXCJhcm1vclwiOiAyNS44OCxcbiAgICAgIFwiYXJtb3JwZXJsZXZlbFwiOiAzLjUsXG4gICAgICBcInNwZWxsYmxvY2tcIjogMzIuMSxcbiAgICAgIFwic3BlbGxibG9ja3BlcmxldmVsXCI6IDEuMjUsXG4gICAgICBcImF0dGFja3JhbmdlXCI6IDEyNSxcbiAgICAgIFwiaHByZWdlblwiOiA0LjI3LFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC40LFxuICAgICAgXCJtcHJlZ2VuXCI6IDAsXG4gICAgICBcIm1wcmVnZW5wZXJsZXZlbFwiOiAwLFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNjAuMDQsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDMsXG4gICAgICBcImF0dGFja3NwZWVkb2Zmc2V0XCI6IC0wLjA4LFxuICAgICAgXCJhdHRhY2tzcGVlZHBlcmxldmVsXCI6IDIuODVcbiAgICB9LFxuICAgIFwiaWNvblwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvY2hhbXBpb24vUmVuZ2FyLnBuZ1wiLFxuICAgIFwic3ByaXRlXCI6IHtcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcHJpdGUvY2hhbXBpb24yLnBuZ1wiLFxuICAgICAgXCJ4XCI6IDE5MixcbiAgICAgIFwieVwiOiA5NlxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIk9uIGV2ZXJ5IHdhbGwgb2YgaGlzIGRlbiwgdGhlIHRyb3BoeSBodW50ZXIgUmVuZ2FyIG1vdW50cyB0aGUgaGVhZHMsIGhvcm5zLCBjbGF3cywgYW5kIGZhbmdzIG9mIHRoZSBtb3N0IGxldGhhbCBjcmVhdHVyZXMgaW4gVmFsb3Jhbi4gVGhvdWdoIGhpcyBjb2xsZWN0aW9uIGlzIGV4dGVuc2l2ZSwgaGUgcmVtYWlucyB1bnNhdGlzZmllZCwgdGlyZWxlc3NseSBzZWVraW5nIGdyZWF0ZXIgZ2FtZS4gSGUgdGFrZXMgdGltZSB3aXRoIGV2ZXJ5IC4uLlwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwicml2ZW5cIixcbiAgICBcImtleVwiOiBcIjkyXCIsXG4gICAgXCJuYW1lXCI6IFwiUml2ZW5cIixcbiAgICBcInRpdGxlXCI6IFwidGhlIEV4aWxlXCIsXG4gICAgXCJ0YWdzXCI6IFtcbiAgICAgIFwiRmlnaHRlclwiLFxuICAgICAgXCJBc3Nhc3NpblwiXG4gICAgXSxcbiAgICBcInN0YXRzXCI6IHtcbiAgICAgIFwiaHBcIjogNTU4LjQ4LFxuICAgICAgXCJocHBlcmxldmVsXCI6IDg2LFxuICAgICAgXCJtcFwiOiAwLFxuICAgICAgXCJtcHBlcmxldmVsXCI6IDAsXG4gICAgICBcIm1vdmVzcGVlZFwiOiAzNDAsXG4gICAgICBcImFybW9yXCI6IDI0LjM3NixcbiAgICAgIFwiYXJtb3JwZXJsZXZlbFwiOiAzLjIsXG4gICAgICBcInNwZWxsYmxvY2tcIjogMzIuMSxcbiAgICAgIFwic3BlbGxibG9ja3BlcmxldmVsXCI6IDEuMjUsXG4gICAgICBcImF0dGFja3JhbmdlXCI6IDEyNSxcbiAgICAgIFwiaHByZWdlblwiOiA1LjM0LFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC41LFxuICAgICAgXCJtcHJlZ2VuXCI6IDAsXG4gICAgICBcIm1wcmVnZW5wZXJsZXZlbFwiOiAwLFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNTYuMDQsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDMsXG4gICAgICBcImF0dGFja3NwZWVkb2Zmc2V0XCI6IDAsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMy41XG4gICAgfSxcbiAgICBcImljb25cIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL2NoYW1waW9uL1JpdmVuLnBuZ1wiLFxuICAgIFwic3ByaXRlXCI6IHtcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcHJpdGUvY2hhbXBpb24yLnBuZ1wiLFxuICAgICAgXCJ4XCI6IDI0MCxcbiAgICAgIFwieVwiOiA5NlxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIicnVGhlcmUgaXMgYSBwbGFjZSBiZXR3ZWVuIHdhciBhbmQgbXVyZGVyIGluIHdoaWNoIG91ciBkZW1vbnMgbHVyay4nJzxicj48YnI+SW4gTm94dXMsIGFueSBjaXRpemVuIG1heSByaXNlIHRvIHBvd2VyIHJlZ2FyZGxlc3Mgb2YgcmFjZSwgZ2VuZGVyLCBvciBzb2NpYWwgc3RhbmRpbmcgLSBzdHJlbmd0aCBpcyBhbGwgdGhhdCBtYXR0ZXJzLiBJdCB3YXMgd2l0aCBjb21taXR0ZWQgZmFpdGggaW4gdGhpcyBpZGVhbCB0aGF0IFJpdmVuIC4uLlwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwicnVtYmxlXCIsXG4gICAgXCJrZXlcIjogXCI2OFwiLFxuICAgIFwibmFtZVwiOiBcIlJ1bWJsZVwiLFxuICAgIFwidGl0bGVcIjogXCJ0aGUgTWVjaGFuaXplZCBNZW5hY2VcIixcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJGaWdodGVyXCIsXG4gICAgICBcIk1hZ2VcIlxuICAgIF0sXG4gICAgXCJzdGF0c1wiOiB7XG4gICAgICBcImhwXCI6IDU4NC40LFxuICAgICAgXCJocHBlcmxldmVsXCI6IDgwLFxuICAgICAgXCJtcFwiOiAxMDAsXG4gICAgICBcIm1wcGVybGV2ZWxcIjogMCxcbiAgICAgIFwibW92ZXNwZWVkXCI6IDM0NSxcbiAgICAgIFwiYXJtb3JcIjogMjUuODgsXG4gICAgICBcImFybW9ycGVybGV2ZWxcIjogMy41LFxuICAgICAgXCJzcGVsbGJsb2NrXCI6IDMyLjEsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAxLjI1LFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiAxMjUsXG4gICAgICBcImhwcmVnZW5cIjogOC4wMDUsXG4gICAgICBcImhwcmVnZW5wZXJsZXZlbFwiOiAwLjYsXG4gICAgICBcIm1wcmVnZW5cIjogMCxcbiAgICAgIFwibXByZWdlbnBlcmxldmVsXCI6IDAsXG4gICAgICBcImNyaXRcIjogMCxcbiAgICAgIFwiY3JpdHBlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja2RhbWFnZVwiOiA2MS4wMzYsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDMuMixcbiAgICAgIFwiYXR0YWNrc3BlZWRvZmZzZXRcIjogLTAuMDMsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMS44NVxuICAgIH0sXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9jaGFtcGlvbi9SdW1ibGUucG5nXCIsXG4gICAgXCJzcHJpdGVcIjoge1xuICAgICAgXCJ1cmxcIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3Nwcml0ZS9jaGFtcGlvbjIucG5nXCIsXG4gICAgICBcInhcIjogMjg4LFxuICAgICAgXCJ5XCI6IDk2XG4gICAgfSxcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiJydVZ2gsIGl0J3MgZ29ubmEgdGFrZSBmb3JldmVyIHRvIHNjcmFwZSB5b3VyIGZhY2Ugb2ZmIG15IHN1aXQhJyc8YnI+PGJyPkV2ZW4gYW1vbmdzdCB5b3JkbGVzLCBSdW1ibGUgd2FzIGFsd2F5cyB0aGUgcnVudCBvZiB0aGUgbGl0dGVyLiBBcyBzdWNoLCBoZSB3YXMgdXNlZCB0byBiZWluZyBidWxsaWVkLiBJbiBvcmRlciB0byBzdXJ2aXZlLCBoZSBoYWQgdG8gYmUgc2NyYXBwaWVyIGFuZCBtb3JlIHJlc291cmNlZnVsIHRoYW4gaGlzIC4uLlwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwicnl6ZVwiLFxuICAgIFwia2V5XCI6IFwiMTNcIixcbiAgICBcIm5hbWVcIjogXCJSeXplXCIsXG4gICAgXCJ0aXRsZVwiOiBcInRoZSBSdW5lIE1hZ2VcIixcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJNYWdlXCIsXG4gICAgICBcIkZpZ2h0ZXJcIlxuICAgIF0sXG4gICAgXCJzdGF0c1wiOiB7XG4gICAgICBcImhwXCI6IDU1OC40OCxcbiAgICAgIFwiaHBwZXJsZXZlbFwiOiA4NixcbiAgICAgIFwibXBcIjogNDAwLFxuICAgICAgXCJtcHBlcmxldmVsXCI6IDUwLFxuICAgICAgXCJtb3Zlc3BlZWRcIjogMzQwLFxuICAgICAgXCJhcm1vclwiOiAyMS41NTIsXG4gICAgICBcImFybW9ycGVybGV2ZWxcIjogMyxcbiAgICAgIFwic3BlbGxibG9ja1wiOiAzMCxcbiAgICAgIFwic3BlbGxibG9ja3BlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja3JhbmdlXCI6IDU1MCxcbiAgICAgIFwiaHByZWdlblwiOiA3LFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC41NSxcbiAgICAgIFwibXByZWdlblwiOiA2LFxuICAgICAgXCJtcHJlZ2VucGVybGV2ZWxcIjogMC44LFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNTUuMDQsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDMsXG4gICAgICBcImF0dGFja3NwZWVkb2Zmc2V0XCI6IDAsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMi4xMTJcbiAgICB9LFxuICAgIFwiaWNvblwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvY2hhbXBpb24vUnl6ZS5wbmdcIixcbiAgICBcInNwcml0ZVwiOiB7XG4gICAgICBcInVybFwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvc3ByaXRlL2NoYW1waW9uMi5wbmdcIixcbiAgICAgIFwieFwiOiAzMzYsXG4gICAgICBcInlcIjogOTZcbiAgICB9LFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCInJ1Rha2UgY2FyZSB3aXRoIHRoaXMgd29ybGQuIFdoYXQgaXMgbWFkZSBjYW4gYmUgdW5tYWRlLicnPGJyPjxicj5XaWRlbHkgY29uc2lkZXJlZCBvbmUgb2YgdGhlIG1vc3QgYWRlcHQgc29yY2VyZXJzIG9uIFJ1bmV0ZXJyYSwgUnl6ZSBpcyBhbiBhbmNpZW50LCBoYXJkLWJpdHRlbiBhcmNobWFnZSB3aXRoIGFuIGltcG9zc2libHkgaGVhdnkgYnVyZGVuIHRvIGJlYXIuIEFybWVkIHdpdGggYSBib3VuZGxlc3MgY29uc3RpdHV0aW9uIGFuZCAuLi5cIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcInNlanVhbmlcIixcbiAgICBcImtleVwiOiBcIjExM1wiLFxuICAgIFwibmFtZVwiOiBcIlNlanVhbmlcIixcbiAgICBcInRpdGxlXCI6IFwidGhlIFdpbnRlcidzIFdyYXRoXCIsXG4gICAgXCJ0YWdzXCI6IFtcbiAgICAgIFwiVGFua1wiLFxuICAgICAgXCJGaWdodGVyXCJcbiAgICBdLFxuICAgIFwic3RhdHNcIjoge1xuICAgICAgXCJocFwiOiA2MDAsXG4gICAgICBcImhwcGVybGV2ZWxcIjogOTUsXG4gICAgICBcIm1wXCI6IDQwMCxcbiAgICAgIFwibXBwZXJsZXZlbFwiOiA0MCxcbiAgICAgIFwibW92ZXNwZWVkXCI6IDM0MCxcbiAgICAgIFwiYXJtb3JcIjogMjkuNTQsXG4gICAgICBcImFybW9ycGVybGV2ZWxcIjogMyxcbiAgICAgIFwic3BlbGxibG9ja1wiOiAzMi4xLFxuICAgICAgXCJzcGVsbGJsb2NrcGVybGV2ZWxcIjogMS4yNSxcbiAgICAgIFwiYXR0YWNrcmFuZ2VcIjogMTI1LFxuICAgICAgXCJocHJlZ2VuXCI6IDguNjc1LFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC44NSxcbiAgICAgIFwibXByZWdlblwiOiA3LjIwNSxcbiAgICAgIFwibXByZWdlbnBlcmxldmVsXCI6IDAuNDUsXG4gICAgICBcImNyaXRcIjogMCxcbiAgICAgIFwiY3JpdHBlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja2RhbWFnZVwiOiA1Ny41NDQsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDMuMyxcbiAgICAgIFwiYXR0YWNrc3BlZWRvZmZzZXRcIjogLTAuMDY3MixcbiAgICAgIFwiYXR0YWNrc3BlZWRwZXJsZXZlbFwiOiAxLjQ0XG4gICAgfSxcbiAgICBcImljb25cIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL2NoYW1waW9uL1NlanVhbmkucG5nXCIsXG4gICAgXCJzcHJpdGVcIjoge1xuICAgICAgXCJ1cmxcIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3Nwcml0ZS9jaGFtcGlvbjIucG5nXCIsXG4gICAgICBcInhcIjogMzg0LFxuICAgICAgXCJ5XCI6IDk2XG4gICAgfSxcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiU2VqdWFuaSB3YXMgd2VhbmVkIG9uIGhhcmRzaGlwIGFuZCByZWFyZWQgb24gYmFyYmFyaXR5LiBXaGVyZSBvdGhlcnMgc3VjY3VtYmVkIHRvIHRoZSBoYXJzaG5lc3Mgb2YgdGhlIEZyZWxqb3JkLCBzaGUgd2FzIHRlbXBlcmVkIGJ5IGl0IHVudGlsIHBhaW4gYmVjYW1lIHBvd2VyLCBodW5nZXIgYW4gZW5jb3VyYWdlbWVudCwgYW5kIGZyb3N0IGFuIGFsbHkgaW4gY3VsbGluZyB0aGUgd2Vhay4gVGhyb3VnaCBoZXIgb3JkZWFscywgc2hlIC4uLlwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwic2hhY29cIixcbiAgICBcImtleVwiOiBcIjM1XCIsXG4gICAgXCJuYW1lXCI6IFwiU2hhY29cIixcbiAgICBcInRpdGxlXCI6IFwidGhlIERlbW9uIEplc3RlclwiLFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcIkFzc2Fzc2luXCJcbiAgICBdLFxuICAgIFwic3RhdHNcIjoge1xuICAgICAgXCJocFwiOiA1ODIuMTIsXG4gICAgICBcImhwcGVybGV2ZWxcIjogODQsXG4gICAgICBcIm1wXCI6IDI5Ny4yLFxuICAgICAgXCJtcHBlcmxldmVsXCI6IDQwLFxuICAgICAgXCJtb3Zlc3BlZWRcIjogMzUwLFxuICAgICAgXCJhcm1vclwiOiAyNC44OCxcbiAgICAgIFwiYXJtb3JwZXJsZXZlbFwiOiAzLjUsXG4gICAgICBcInNwZWxsYmxvY2tcIjogMzIuMSxcbiAgICAgIFwic3BlbGxibG9ja3BlcmxldmVsXCI6IDEuMjUsXG4gICAgICBcImF0dGFja3JhbmdlXCI6IDEyNSxcbiAgICAgIFwiaHByZWdlblwiOiA4LjM3LFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC41NSxcbiAgICAgIFwibXByZWdlblwiOiA3LjE1NSxcbiAgICAgIFwibXByZWdlbnBlcmxldmVsXCI6IDAuNDUsXG4gICAgICBcImNyaXRcIjogMCxcbiAgICAgIFwiY3JpdHBlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja2RhbWFnZVwiOiA1Ny41OCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlcGVybGV2ZWxcIjogMy41LFxuICAgICAgXCJhdHRhY2tzcGVlZG9mZnNldFwiOiAtMC4xLFxuICAgICAgXCJhdHRhY2tzcGVlZHBlcmxldmVsXCI6IDNcbiAgICB9LFxuICAgIFwiaWNvblwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvY2hhbXBpb24vU2hhY28ucG5nXCIsXG4gICAgXCJzcHJpdGVcIjoge1xuICAgICAgXCJ1cmxcIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3Nwcml0ZS9jaGFtcGlvbjIucG5nXCIsXG4gICAgICBcInhcIjogNDMyLFxuICAgICAgXCJ5XCI6IDk2XG4gICAgfSxcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiTW9zdCB3b3VsZCBzYXkgdGhhdCBkZWF0aCBpc24ndCBmdW5ueS4gSXQgaXNuJ3QsIHVubGVzcyB5b3UncmUgU2hhY28gLSB0aGVuIGl0J3MgaHlzdGVyaWNhbC4gSGUgaXMgVmFsb3JhbidzIGZpcnN0IGZ1bGx5IGZ1bmN0aW9uaW5nIGhvbWljaWRhbCBjb21pYzsgaGUgamVzdHMgdW50aWwgc29tZW9uZSBkaWVzLCBhbmQgdGhlbiBoZSBsYXVnaHMuIFRoZSBmaWd1cmUgdGhhdCBoYXMgY29tZSB0byBiZSBrbm93biBhcyB0aGUgRGVtb24gLi4uXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJzaGVuXCIsXG4gICAgXCJrZXlcIjogXCI5OFwiLFxuICAgIFwibmFtZVwiOiBcIlNoZW5cIixcbiAgICBcInRpdGxlXCI6IFwidGhlIEV5ZSBvZiBUd2lsaWdodFwiLFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcIlRhbmtcIixcbiAgICAgIFwiTWVsZWVcIlxuICAgIF0sXG4gICAgXCJzdGF0c1wiOiB7XG4gICAgICBcImhwXCI6IDU0MCxcbiAgICAgIFwiaHBwZXJsZXZlbFwiOiA3MyxcbiAgICAgIFwibXBcIjogNDAwLFxuICAgICAgXCJtcHBlcmxldmVsXCI6IDAsXG4gICAgICBcIm1vdmVzcGVlZFwiOiAzNDAsXG4gICAgICBcImFybW9yXCI6IDI1LFxuICAgICAgXCJhcm1vcnBlcmxldmVsXCI6IDIuNixcbiAgICAgIFwic3BlbGxibG9ja1wiOiAzMi4xLFxuICAgICAgXCJzcGVsbGJsb2NrcGVybGV2ZWxcIjogMS4yNSxcbiAgICAgIFwiYXR0YWNrcmFuZ2VcIjogMTI1LFxuICAgICAgXCJocHJlZ2VuXCI6IDguNSxcbiAgICAgIFwiaHByZWdlbnBlcmxldmVsXCI6IDAuNzUsXG4gICAgICBcIm1wcmVnZW5cIjogNTAsXG4gICAgICBcIm1wcmVnZW5wZXJsZXZlbFwiOiAwLFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNjAsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDMsXG4gICAgICBcImF0dGFja3NwZWVkb2Zmc2V0XCI6IDAsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMlxuICAgIH0sXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9jaGFtcGlvbi9TaGVuLnBuZ1wiLFxuICAgIFwic3ByaXRlXCI6IHtcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcHJpdGUvY2hhbXBpb24zLnBuZ1wiLFxuICAgICAgXCJ4XCI6IDAsXG4gICAgICBcInlcIjogMFxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIicnVGhlIEV5ZSBpcyBibGluZCB0byBmZWFyLCB0byBoYXRlLCB0byBsb3ZlIC0gdG8gYWxsIHRoaW5ncyB0aGF0IHdvdWxkIHN3YXkgZXF1aWxpYnJpdW0uJyc8YnI+PGJyPkxlYWRlciBvZiBhIHNlY3JldCBjbGFuIG9mIG15c3RpYyB3YXJyaW9ycywgU2hlbiBzZXJ2ZXMgYXMgdGhlIEV5ZSBvZiBUd2lsaWdodCwgZW50cnVzdGVkIHRvIGVuZm9yY2UgZXF1aWxpYnJpdW0gaW4gdGhlIHdvcmxkLiBMb25naW5nIHRvIHJlbWFpbiBmcmVlIC4uLlwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwic2h5dmFuYVwiLFxuICAgIFwia2V5XCI6IFwiMTAyXCIsXG4gICAgXCJuYW1lXCI6IFwiU2h5dmFuYVwiLFxuICAgIFwidGl0bGVcIjogXCJ0aGUgSGFsZi1EcmFnb25cIixcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJGaWdodGVyXCIsXG4gICAgICBcIlRhbmtcIlxuICAgIF0sXG4gICAgXCJzdGF0c1wiOiB7XG4gICAgICBcImhwXCI6IDU5NC42LFxuICAgICAgXCJocHBlcmxldmVsXCI6IDk1LFxuICAgICAgXCJtcFwiOiAxMDAsXG4gICAgICBcIm1wcGVybGV2ZWxcIjogMCxcbiAgICAgIFwibW92ZXNwZWVkXCI6IDM1MCxcbiAgICAgIFwiYXJtb3JcIjogMjcuNjI4LFxuICAgICAgXCJhcm1vcnBlcmxldmVsXCI6IDMuMzUsXG4gICAgICBcInNwZWxsYmxvY2tcIjogMzIuMSxcbiAgICAgIFwic3BlbGxibG9ja3BlcmxldmVsXCI6IDEuMjUsXG4gICAgICBcImF0dGFja3JhbmdlXCI6IDEyNSxcbiAgICAgIFwiaHByZWdlblwiOiA4LjU5LFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC44LFxuICAgICAgXCJtcHJlZ2VuXCI6IDAsXG4gICAgICBcIm1wcmVnZW5wZXJsZXZlbFwiOiAwLFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNjAuNzEyLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VwZXJsZXZlbFwiOiAzLjQsXG4gICAgICBcImF0dGFja3NwZWVkb2Zmc2V0XCI6IC0wLjA1LFxuICAgICAgXCJhdHRhY2tzcGVlZHBlcmxldmVsXCI6IDIuNVxuICAgIH0sXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9jaGFtcGlvbi9TaHl2YW5hLnBuZ1wiLFxuICAgIFwic3ByaXRlXCI6IHtcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcHJpdGUvY2hhbXBpb24zLnBuZ1wiLFxuICAgICAgXCJ4XCI6IDQ4LFxuICAgICAgXCJ5XCI6IDBcbiAgICB9LFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJBIGhhbGYtYnJlZWQgYm9ybiBmcm9tIHRoZSB1bmlvbiBiZXR3ZWVuIGRyYWdvbiBhbmQgaHVtYW4sIFNoeXZhbmEgc2VhcmNoZWQgYWxsIGhlciBsaWZlIGZvciBiZWxvbmdpbmcuIFBlcnNlY3V0aW9uIGZvcmdlZCBoZXIgaW50byBhIGJydXRhbCB3YXJyaW9yLCBhbmQgdGhvc2Ugd2hvIGRhcmUgc3RhbmQgYWdhaW5zdCBTaHl2YW5hIGZhY2UgdGhlIGZpZXJ5IGJlYXN0IGx1cmtpbmcganVzdCBiZW5lYXRoIGhlciBza2luLi4uLlwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwic2luZ2VkXCIsXG4gICAgXCJrZXlcIjogXCIyN1wiLFxuICAgIFwibmFtZVwiOiBcIlNpbmdlZFwiLFxuICAgIFwidGl0bGVcIjogXCJ0aGUgTWFkIENoZW1pc3RcIixcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJUYW5rXCIsXG4gICAgICBcIkZpZ2h0ZXJcIlxuICAgIF0sXG4gICAgXCJzdGF0c1wiOiB7XG4gICAgICBcImhwXCI6IDU0Mi43NixcbiAgICAgIFwiaHBwZXJsZXZlbFwiOiA4MixcbiAgICAgIFwibXBcIjogMjkwLjYsXG4gICAgICBcIm1wcGVybGV2ZWxcIjogNDUsXG4gICAgICBcIm1vdmVzcGVlZFwiOiAzNDUsXG4gICAgICBcImFybW9yXCI6IDI3Ljg4LFxuICAgICAgXCJhcm1vcnBlcmxldmVsXCI6IDMuNSxcbiAgICAgIFwic3BlbGxibG9ja1wiOiAzMi4xLFxuICAgICAgXCJzcGVsbGJsb2NrcGVybGV2ZWxcIjogMS4yNSxcbiAgICAgIFwiYXR0YWNrcmFuZ2VcIjogMTI1LFxuICAgICAgXCJocHJlZ2VuXCI6IDguMDIsXG4gICAgICBcImhwcmVnZW5wZXJsZXZlbFwiOiAwLjU1LFxuICAgICAgXCJtcHJlZ2VuXCI6IDcuNTIsXG4gICAgICBcIm1wcmVnZW5wZXJsZXZlbFwiOiAwLjU1LFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNjIuMzIsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDMuMzc1LFxuICAgICAgXCJhdHRhY2tzcGVlZG9mZnNldFwiOiAwLjAyLFxuICAgICAgXCJhdHRhY2tzcGVlZHBlcmxldmVsXCI6IDEuODFcbiAgICB9LFxuICAgIFwiaWNvblwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvY2hhbXBpb24vU2luZ2VkLnBuZ1wiLFxuICAgIFwic3ByaXRlXCI6IHtcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcHJpdGUvY2hhbXBpb24zLnBuZ1wiLFxuICAgICAgXCJ4XCI6IDk2LFxuICAgICAgXCJ5XCI6IDBcbiAgICB9LFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJTaW5nZWQgZGVzY2VuZGVkIGZyb20gYSBsb25nIGxpbmUgb2YgWmF1bidzIHJldmVyZWQgY2hlbWlzdHMuIEV2ZW4gaW4gaGlzIHlvdXRoLCBoaXMgdGFsZW50IGZvciBjb25jb2N0aW5nIHBvdGlvbnMgZmFyIG91dHN0cmlwcGVkIHRoYXQgb2YgaGlzIHBlZXJzLCBhbmQgaGUgcXVpY2tseSBkaXN0aW5ndWlzaGVkIGhpbXNlbGYgZnJvbSBoaXMgbGVzcyBleHRyYW9yZGluYXJ5IGNoZW1pc3QgY29tcGF0cmlvdHMuIEl0IGNhbWUgYXMgbm8gLi4uXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJzaW9uXCIsXG4gICAgXCJrZXlcIjogXCIxNFwiLFxuICAgIFwibmFtZVwiOiBcIlNpb25cIixcbiAgICBcInRpdGxlXCI6IFwiVGhlIFVuZGVhZCBKdWdnZXJuYXV0XCIsXG4gICAgXCJ0YWdzXCI6IFtcbiAgICAgIFwiVGFua1wiLFxuICAgICAgXCJGaWdodGVyXCJcbiAgICBdLFxuICAgIFwic3RhdHNcIjoge1xuICAgICAgXCJocFwiOiA1NDIuNjQsXG4gICAgICBcImhwcGVybGV2ZWxcIjogNzMsXG4gICAgICBcIm1wXCI6IDMyNS42LFxuICAgICAgXCJtcHBlcmxldmVsXCI6IDQyLFxuICAgICAgXCJtb3Zlc3BlZWRcIjogMzQ1LFxuICAgICAgXCJhcm1vclwiOiAyMy4wNCxcbiAgICAgIFwiYXJtb3JwZXJsZXZlbFwiOiAzLFxuICAgICAgXCJzcGVsbGJsb2NrXCI6IDMyLjEsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAxLjI1LFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiAxNzUsXG4gICAgICBcImhwcmVnZW5cIjogMTAuMTgsXG4gICAgICBcImhwcmVnZW5wZXJsZXZlbFwiOiAwLjgsXG4gICAgICBcIm1wcmVnZW5cIjogOC4wMDUsXG4gICAgICBcIm1wcmVnZW5wZXJsZXZlbFwiOiAwLjYsXG4gICAgICBcImNyaXRcIjogMCxcbiAgICAgIFwiY3JpdHBlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja2RhbWFnZVwiOiA1OS43MixcbiAgICAgIFwiYXR0YWNrZGFtYWdlcGVybGV2ZWxcIjogNCxcbiAgICAgIFwiYXR0YWNrc3BlZWRvZmZzZXRcIjogLTAuMDgsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMS4zXG4gICAgfSxcbiAgICBcImljb25cIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL2NoYW1waW9uL1Npb24ucG5nXCIsXG4gICAgXCJzcHJpdGVcIjoge1xuICAgICAgXCJ1cmxcIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3Nwcml0ZS9jaGFtcGlvbjMucG5nXCIsXG4gICAgICBcInhcIjogMTQ0LFxuICAgICAgXCJ5XCI6IDBcbiAgICB9LFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJCTE9PRC48YnI+PGJyPlNNRUxMIElULjxicj48YnI+V0FOVC4gQUNISU5HLiBORUVEITxicj48YnI+Q0xPU0UgTk9XLiBUSEVZIENPTUUuPGJyPjxicj5OTyBDSEFJTlM/IEZSRUUhIEtJTEwhPGJyPjxicj5JTiBSRUFDSC4gWUVTISBESUUhIERJRSE8YnI+PGJyPkdvbmUuIFRvbyBxdWljay4gTm8gZmlnaHQuIE1vcmUuIEkgd2FudC4uLiBtb3JlLjxicj48YnI+QSB2b2ljZT8gVW5mYW1pbGlhci4gSSBzZWUgaGltLiBUaGUgR3JhbmQgLi4uXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJzaXZpclwiLFxuICAgIFwia2V5XCI6IFwiMTVcIixcbiAgICBcIm5hbWVcIjogXCJTaXZpclwiLFxuICAgIFwidGl0bGVcIjogXCJ0aGUgQmF0dGxlIE1pc3RyZXNzXCIsXG4gICAgXCJ0YWdzXCI6IFtcbiAgICAgIFwiTWFya3NtYW5cIlxuICAgIF0sXG4gICAgXCJzdGF0c1wiOiB7XG4gICAgICBcImhwXCI6IDUxNS43NixcbiAgICAgIFwiaHBwZXJsZXZlbFwiOiA4MixcbiAgICAgIFwibXBcIjogMjg0LFxuICAgICAgXCJtcHBlcmxldmVsXCI6IDUwLFxuICAgICAgXCJtb3Zlc3BlZWRcIjogMzM1LFxuICAgICAgXCJhcm1vclwiOiAyMi4yMSxcbiAgICAgIFwiYXJtb3JwZXJsZXZlbFwiOiAzLjI1LFxuICAgICAgXCJzcGVsbGJsb2NrXCI6IDMwLFxuICAgICAgXCJzcGVsbGJsb2NrcGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrcmFuZ2VcIjogNTAwLFxuICAgICAgXCJocHJlZ2VuXCI6IDUuMTcsXG4gICAgICBcImhwcmVnZW5wZXJsZXZlbFwiOiAwLjU1LFxuICAgICAgXCJtcHJlZ2VuXCI6IDguMDEsXG4gICAgICBcIm1wcmVnZW5wZXJsZXZlbFwiOiAwLjksXG4gICAgICBcImNyaXRcIjogMCxcbiAgICAgIFwiY3JpdHBlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja2RhbWFnZVwiOiA1Ny40NixcbiAgICAgIFwiYXR0YWNrZGFtYWdlcGVybGV2ZWxcIjogMi40MSxcbiAgICAgIFwiYXR0YWNrc3BlZWRvZmZzZXRcIjogMCxcbiAgICAgIFwiYXR0YWNrc3BlZWRwZXJsZXZlbFwiOiAxLjZcbiAgICB9LFxuICAgIFwiaWNvblwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvY2hhbXBpb24vU2l2aXIucG5nXCIsXG4gICAgXCJzcHJpdGVcIjoge1xuICAgICAgXCJ1cmxcIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3Nwcml0ZS9jaGFtcGlvbjMucG5nXCIsXG4gICAgICBcInhcIjogMTkyLFxuICAgICAgXCJ5XCI6IDBcbiAgICB9LFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCInJ0kgZG9uJ3QgY2FyZSB3aGF0IGZhY2UgaXMgb24geW91ciBjb2luLCBhcyBsb25nIGFzIGl0IHBheXMuJyc8YnI+PGJyPlNpdmlyIGlzIGEgcmVub3duZWQgZm9ydHVuZSBodW50ZXIgYW5kIG1lcmNlbmFyeSBjYXB0YWluIHdobyBwbGllcyBoZXIgdHJhZGUgaW4gdGhlIGRlc2VydHMgb2YgU2h1cmltYS4gQXJtZWQgd2l0aCBoZXIgbGVnZW5kYXJ5IGpld2VsZWQgY3Jvc3NibGFkZSwgc2hlIGhhcyBmb3VnaHQgYW5kIHdvbiAuLi5cIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcInNrYXJuZXJcIixcbiAgICBcImtleVwiOiBcIjcyXCIsXG4gICAgXCJuYW1lXCI6IFwiU2thcm5lclwiLFxuICAgIFwidGl0bGVcIjogXCJ0aGUgQ3J5c3RhbCBWYW5ndWFyZFwiLFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcIkZpZ2h0ZXJcIixcbiAgICAgIFwiVGFua1wiXG4gICAgXSxcbiAgICBcInN0YXRzXCI6IHtcbiAgICAgIFwiaHBcIjogNjAxLjI4LFxuICAgICAgXCJocHBlcmxldmVsXCI6IDkwLFxuICAgICAgXCJtcFwiOiAyNzIuMixcbiAgICAgIFwibXBwZXJsZXZlbFwiOiA0MCxcbiAgICAgIFwibW92ZXNwZWVkXCI6IDMzNSxcbiAgICAgIFwiYXJtb3JcIjogMjkuMzg0LFxuICAgICAgXCJhcm1vcnBlcmxldmVsXCI6IDMuOCxcbiAgICAgIFwic3BlbGxibG9ja1wiOiAzMi4xLFxuICAgICAgXCJzcGVsbGJsb2NrcGVybGV2ZWxcIjogMS4yNSxcbiAgICAgIFwiYXR0YWNrcmFuZ2VcIjogMTI1LFxuICAgICAgXCJocHJlZ2VuXCI6IDguOTI1LFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC44NSxcbiAgICAgIFwibXByZWdlblwiOiA3LjIwNSxcbiAgICAgIFwibXByZWdlbnBlcmxldmVsXCI6IDAuNDUsXG4gICAgICBcImNyaXRcIjogMCxcbiAgICAgIFwiY3JpdHBlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja2RhbWFnZVwiOiA1Ny4xNTYsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDQuNSxcbiAgICAgIFwiYXR0YWNrc3BlZWRvZmZzZXRcIjogMCxcbiAgICAgIFwiYXR0YWNrc3BlZWRwZXJsZXZlbFwiOiAyLjFcbiAgICB9LFxuICAgIFwiaWNvblwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvY2hhbXBpb24vU2thcm5lci5wbmdcIixcbiAgICBcInNwcml0ZVwiOiB7XG4gICAgICBcInVybFwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvc3ByaXRlL2NoYW1waW9uMy5wbmdcIixcbiAgICAgIFwieFwiOiAyNDAsXG4gICAgICBcInlcIjogMFxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIicnV2UgYXJlIG9uZS4gV2UgY2Fubm90IGJlIHNoYXR0ZXJlZC4nJzxicj48YnI+U2thcm5lciBpcyBhbiBpbW1lbnNlIGNyeXN0YWxsaW5lIHNjb3JwaW9uIGZyb20gYSBoaWRkZW4gdmFsbGV5IGluIFNodXJpbWEuIFBhcnQgb2YgdGhlIGFuY2llbnQgQnJhY2tlcm4gcmFjZSwgU2thcm5lciBhbmQgaGlzIGtpbiBhcmUga25vd24gZm9yIHRoZWlyIGdyZWF0IHdpc2RvbSBhbmQgZGVlcCBjb25uZWN0aW9uIHRvIHRoZSBsYW5kLCBhcyAuLi5cIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcInNvbmFcIixcbiAgICBcImtleVwiOiBcIjM3XCIsXG4gICAgXCJuYW1lXCI6IFwiU29uYVwiLFxuICAgIFwidGl0bGVcIjogXCJNYXZlbiBvZiB0aGUgU3RyaW5nc1wiLFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcIlN1cHBvcnRcIixcbiAgICAgIFwiTWFnZVwiXG4gICAgXSxcbiAgICBcInN0YXRzXCI6IHtcbiAgICAgIFwiaHBcIjogNDgyLjM2LFxuICAgICAgXCJocHBlcmxldmVsXCI6IDc3LFxuICAgICAgXCJtcFwiOiAzNDAuNixcbiAgICAgIFwibXBwZXJsZXZlbFwiOiA0NSxcbiAgICAgIFwibW92ZXNwZWVkXCI6IDMyNSxcbiAgICAgIFwiYXJtb3JcIjogMjAuNTQ0LFxuICAgICAgXCJhcm1vcnBlcmxldmVsXCI6IDMuMyxcbiAgICAgIFwic3BlbGxibG9ja1wiOiAzMCxcbiAgICAgIFwic3BlbGxibG9ja3BlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja3JhbmdlXCI6IDU1MCxcbiAgICAgIFwiaHByZWdlblwiOiA1LjQyLFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC41NSxcbiAgICAgIFwibXByZWdlblwiOiAxMS41LFxuICAgICAgXCJtcHJlZ2VucGVybGV2ZWxcIjogMC40LFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNTAuMDQsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDMsXG4gICAgICBcImF0dGFja3NwZWVkb2Zmc2V0XCI6IC0wLjAzLFxuICAgICAgXCJhdHRhY2tzcGVlZHBlcmxldmVsXCI6IDIuM1xuICAgIH0sXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9jaGFtcGlvbi9Tb25hLnBuZ1wiLFxuICAgIFwic3ByaXRlXCI6IHtcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcHJpdGUvY2hhbXBpb24zLnBuZ1wiLFxuICAgICAgXCJ4XCI6IDI4OCxcbiAgICAgIFwieVwiOiAwXG4gICAgfSxcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiU29uYSBoYXMgbm8gbWVtb3JpZXMgb2YgaGVyIHRydWUgcGFyZW50cy4gQXMgYW4gaW5mYW50LCBzaGUgd2FzIGZvdW5kIGFiYW5kb25lZCBvbiB0aGUgZG9vcnN0ZXAgb2YgYW4gSW9uaWFuIGFkb3B0aW9uIGhvdXNlLCBuZXN0bGVkIGF0b3AgYW4gYW5jaWVudCBpbnN0cnVtZW50IGluIGFuIGV4cXVpc2l0ZSBjYXNlIG9mIHVua25vd24gb3JpZ2lucy4gU2hlIHdhcyBhbiB1bnVzdWFsbHkgd2VsbC1iZWhhdmVkIGNoaWxkLCBhbHdheXMgLi4uXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJzb3Jha2FcIixcbiAgICBcImtleVwiOiBcIjE2XCIsXG4gICAgXCJuYW1lXCI6IFwiU29yYWthXCIsXG4gICAgXCJ0aXRsZVwiOiBcInRoZSBTdGFyY2hpbGRcIixcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJTdXBwb3J0XCIsXG4gICAgICBcIk1hZ2VcIlxuICAgIF0sXG4gICAgXCJzdGF0c1wiOiB7XG4gICAgICBcImhwXCI6IDUyOS4wNCxcbiAgICAgIFwiaHBwZXJsZXZlbFwiOiA3OCxcbiAgICAgIFwibXBcIjogMzUwLjgsXG4gICAgICBcIm1wcGVybGV2ZWxcIjogNjAsXG4gICAgICBcIm1vdmVzcGVlZFwiOiAzMjUsXG4gICAgICBcImFybW9yXCI6IDIzLjM4NCxcbiAgICAgIFwiYXJtb3JwZXJsZXZlbFwiOiAzLjgsXG4gICAgICBcInNwZWxsYmxvY2tcIjogMzAsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiA1NTAsXG4gICAgICBcImhwcmVnZW5cIjogMi41LFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC41LFxuICAgICAgXCJtcHJlZ2VuXCI6IDExLjUsXG4gICAgICBcIm1wcmVnZW5wZXJsZXZlbFwiOiAwLjQsXG4gICAgICBcImNyaXRcIjogMCxcbiAgICAgIFwiY3JpdHBlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja2RhbWFnZVwiOiA1MC4wNCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlcGVybGV2ZWxcIjogMyxcbiAgICAgIFwiYXR0YWNrc3BlZWRvZmZzZXRcIjogMCxcbiAgICAgIFwiYXR0YWNrc3BlZWRwZXJsZXZlbFwiOiAyLjE0XG4gICAgfSxcbiAgICBcImljb25cIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL2NoYW1waW9uL1NvcmFrYS5wbmdcIixcbiAgICBcInNwcml0ZVwiOiB7XG4gICAgICBcInVybFwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvc3ByaXRlL2NoYW1waW9uMy5wbmdcIixcbiAgICAgIFwieFwiOiAzMzYsXG4gICAgICBcInlcIjogMFxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIkEgaGVhbGVyIGdpZnRlZCB3aXRoIHRoZSBtYWdpYyBvZiB0aGUgc3RhcnMsIFNvcmFrYSBob2xkcyBhbGwgbGl2aW5nIGNyZWF0dXJlcyBjbG9zZSB0byBoZXIgaGVhcnQuIFNoZSB3YXMgb25jZSBhIGNlbGVzdGlhbCBiZWluZywgYnV0IHNoZSBzYWNyaWZpY2VkIGhlciBpbW1vcnRhbGl0eSBhbmQgZW50ZXJlZCB0aGUgd29ybGQgb2YgbW9ydGFscy4gU28gbG9uZyBhcyBldmlsIHRocmVhdGVucyBsaWZlIGluIFZhbG9yYW4sIFNvcmFrYSAuLi5cIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcInN3YWluXCIsXG4gICAgXCJrZXlcIjogXCI1MFwiLFxuICAgIFwibmFtZVwiOiBcIlN3YWluXCIsXG4gICAgXCJ0aXRsZVwiOiBcInRoZSBNYXN0ZXIgVGFjdGljaWFuXCIsXG4gICAgXCJ0YWdzXCI6IFtcbiAgICAgIFwiTWFnZVwiLFxuICAgICAgXCJGaWdodGVyXCJcbiAgICBdLFxuICAgIFwic3RhdHNcIjoge1xuICAgICAgXCJocFwiOiA1MTYuMDQsXG4gICAgICBcImhwcGVybGV2ZWxcIjogOTAsXG4gICAgICBcIm1wXCI6IDM3NCxcbiAgICAgIFwibXBwZXJsZXZlbFwiOiA0NyxcbiAgICAgIFwibW92ZXNwZWVkXCI6IDMzNSxcbiAgICAgIFwiYXJtb3JcIjogMjIuNzIsXG4gICAgICBcImFybW9ycGVybGV2ZWxcIjogNCxcbiAgICAgIFwic3BlbGxibG9ja1wiOiAzMCxcbiAgICAgIFwic3BlbGxibG9ja3BlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja3JhbmdlXCI6IDUwMCxcbiAgICAgIFwiaHByZWdlblwiOiA3Ljg0LFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC42NSxcbiAgICAgIFwibXByZWdlblwiOiA2LFxuICAgICAgXCJtcHJlZ2VucGVybGV2ZWxcIjogMC44LFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNTIuMDQsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDMsXG4gICAgICBcImF0dGFja3NwZWVkb2Zmc2V0XCI6IDAsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMi4xMVxuICAgIH0sXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9jaGFtcGlvbi9Td2Fpbi5wbmdcIixcbiAgICBcInNwcml0ZVwiOiB7XG4gICAgICBcInVybFwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvc3ByaXRlL2NoYW1waW9uMy5wbmdcIixcbiAgICAgIFwieFwiOiAzODQsXG4gICAgICBcInlcIjogMFxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBlYXJsaWVzdCBhY2NvdW50IG9mIFN3YWluJ3MgZXhpc3RlbmNlIGNvbWVzIGZyb20gYSBOb3hpYW4gaW5maXJtYXJ5IGRvY3RvcidzIG5vdGVzLiBBY2NvcmRpbmcgdG8gdGhlbSwgU3dhaW4gbGltcGVkIGludG8gdGhlIHdhcmQgd2l0aG91dCBjcnkgb3IgY29tcGxhaW50OyBoaXMgcmlnaHQgbGVnIHdhcyBzbmFwcGVkIGluIGhhbGYsIHdpdGggYm9uZSBwcm90cnVkaW5nIGZyb20gdGhlIHNraW4uIEEgc21hbGwsIHNjb3dsaW5nIC4uLlwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwic3luZHJhXCIsXG4gICAgXCJrZXlcIjogXCIxMzRcIixcbiAgICBcIm5hbWVcIjogXCJTeW5kcmFcIixcbiAgICBcInRpdGxlXCI6IFwidGhlIERhcmsgU292ZXJlaWduXCIsXG4gICAgXCJ0YWdzXCI6IFtcbiAgICAgIFwiTWFnZVwiLFxuICAgICAgXCJTdXBwb3J0XCJcbiAgICBdLFxuICAgIFwic3RhdHNcIjoge1xuICAgICAgXCJocFwiOiA1MTEuMDQsXG4gICAgICBcImhwcGVybGV2ZWxcIjogNzgsXG4gICAgICBcIm1wXCI6IDM4NCxcbiAgICAgIFwibXBwZXJsZXZlbFwiOiA2MCxcbiAgICAgIFwibW92ZXNwZWVkXCI6IDMzMCxcbiAgICAgIFwiYXJtb3JcIjogMjQuNzEyLFxuICAgICAgXCJhcm1vcnBlcmxldmVsXCI6IDMuNCxcbiAgICAgIFwic3BlbGxibG9ja1wiOiAzMCxcbiAgICAgIFwic3BlbGxibG9ja3BlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja3JhbmdlXCI6IDU1MCxcbiAgICAgIFwiaHByZWdlblwiOiA2LjUwNSxcbiAgICAgIFwiaHByZWdlbnBlcmxldmVsXCI6IDAuNixcbiAgICAgIFwibXByZWdlblwiOiA2LFxuICAgICAgXCJtcHJlZ2VucGVybGV2ZWxcIjogMC44LFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNTMuODcyLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VwZXJsZXZlbFwiOiAyLjksXG4gICAgICBcImF0dGFja3NwZWVkb2Zmc2V0XCI6IDAsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMlxuICAgIH0sXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9jaGFtcGlvbi9TeW5kcmEucG5nXCIsXG4gICAgXCJzcHJpdGVcIjoge1xuICAgICAgXCJ1cmxcIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3Nwcml0ZS9jaGFtcGlvbjMucG5nXCIsXG4gICAgICBcInhcIjogNDMyLFxuICAgICAgXCJ5XCI6IDBcbiAgICB9LFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJCb3JuIHdpdGggaW1tZW5zZSBtYWdpY2FsIHBvdGVudGlhbCwgU3luZHJhIGxvdmVzIG5vdGhpbmcgbW9yZSB0aGFuIGV4ZXJjaXNpbmcgdGhlIGluY3JlZGlibGUgcG93ZXIgYXQgaGVyIGNvbW1hbmQuIFdpdGggZWFjaCBwYXNzaW5nIGRheSwgaGVyIG1hc3Rlcnkgb2YgbWFnaWNhbCBmb3JjZSBncm93cyBtb3JlIHBvdGVudCBhbmQgZGV2YXN0YXRpbmcuIFJlZnVzaW5nIGFueSBub3Rpb24gb2YgYmFsYW5jZSBvciByZXN0cmFpbnQsIC4uLlwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwidGFobWtlbmNoXCIsXG4gICAgXCJrZXlcIjogXCIyMjNcIixcbiAgICBcIm5hbWVcIjogXCJUYWhtIEtlbmNoXCIsXG4gICAgXCJ0aXRsZVwiOiBcInRoZSBSaXZlciBLaW5nXCIsXG4gICAgXCJ0YWdzXCI6IFtcbiAgICAgIFwiU3VwcG9ydFwiLFxuICAgICAgXCJUYW5rXCJcbiAgICBdLFxuICAgIFwic3RhdHNcIjoge1xuICAgICAgXCJocFwiOiA2MTAsXG4gICAgICBcImhwcGVybGV2ZWxcIjogOTUsXG4gICAgICBcIm1wXCI6IDMyNSxcbiAgICAgIFwibXBwZXJsZXZlbFwiOiA0MCxcbiAgICAgIFwibW92ZXNwZWVkXCI6IDMzNSxcbiAgICAgIFwiYXJtb3JcIjogMjcsXG4gICAgICBcImFybW9ycGVybGV2ZWxcIjogMy41LFxuICAgICAgXCJzcGVsbGJsb2NrXCI6IDMyLjEsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAxLjI1LFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiAxNzUsXG4gICAgICBcImhwcmVnZW5cIjogNi41LFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC41NSxcbiAgICAgIFwibXByZWdlblwiOiA4LFxuICAgICAgXCJtcHJlZ2VucGVybGV2ZWxcIjogMSxcbiAgICAgIFwiY3JpdFwiOiAwLFxuICAgICAgXCJjcml0cGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlXCI6IDU2LFxuICAgICAgXCJhdHRhY2tkYW1hZ2VwZXJsZXZlbFwiOiAzLjIsXG4gICAgICBcImF0dGFja3NwZWVkb2Zmc2V0XCI6IDAsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMi41XG4gICAgfSxcbiAgICBcImljb25cIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL2NoYW1waW9uL1RhaG1LZW5jaC5wbmdcIixcbiAgICBcInNwcml0ZVwiOiB7XG4gICAgICBcInVybFwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvc3ByaXRlL2NoYW1waW9uMy5wbmdcIixcbiAgICAgIFwieFwiOiAwLFxuICAgICAgXCJ5XCI6IDQ4XG4gICAgfSxcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiJydUaGUgd2hvbGUgd29ybGQncyBhIHJpdmVyLCBhbmQgSSdtIGl0cyBraW5nLicnPGJyPlRhaG0gS2VuY2ggdHJhdmVscyBSdW5ldGVycmEncyB3YXRlcndheXMsIGZlZWRpbmcgaGlzIGluc2F0aWFibGUgYXBwZXRpdGUgd2l0aCB0aGUgbWlzZXJ5IG9mIHRoZSB1bnN1c3BlY3RpbmcuIFRoZSBzaW5ndWxhcmx5IGNoYXJtaW5nIGdvdXJtYW5kIHNhdm9ycyBldmVyeSBtb21lbnQgb2YgaGlzIHZpY3RpbXMnIHN1ZmZlcmluZy4gIEEgZGVhbCAuLi5cIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcInRhbGl5YWhcIixcbiAgICBcImtleVwiOiBcIjE2M1wiLFxuICAgIFwibmFtZVwiOiBcIlRhbGl5YWhcIixcbiAgICBcInRpdGxlXCI6IFwidGhlIFN0b25ld2VhdmVyXCIsXG4gICAgXCJ0YWdzXCI6IFtcbiAgICAgIFwiTWFnZVwiLFxuICAgICAgXCJTdXBwb3J0XCJcbiAgICBdLFxuICAgIFwic3RhdHNcIjoge1xuICAgICAgXCJocFwiOiA1MjAsXG4gICAgICBcImhwcGVybGV2ZWxcIjogNzUsXG4gICAgICBcIm1wXCI6IDM0MCxcbiAgICAgIFwibXBwZXJsZXZlbFwiOiA2MCxcbiAgICAgIFwibW92ZXNwZWVkXCI6IDMyNSxcbiAgICAgIFwiYXJtb3JcIjogMjAsXG4gICAgICBcImFybW9ycGVybGV2ZWxcIjogMyxcbiAgICAgIFwic3BlbGxibG9ja1wiOiAzMCxcbiAgICAgIFwic3BlbGxibG9ja3BlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja3JhbmdlXCI6IDUyNSxcbiAgICAgIFwiaHByZWdlblwiOiA3LFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC43LFxuICAgICAgXCJtcHJlZ2VuXCI6IDcsXG4gICAgICBcIm1wcmVnZW5wZXJsZXZlbFwiOiAwLjg1LFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNTYsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDMuMyxcbiAgICAgIFwiYXR0YWNrc3BlZWRvZmZzZXRcIjogMCxcbiAgICAgIFwiYXR0YWNrc3BlZWRwZXJsZXZlbFwiOiAxLjM2XG4gICAgfSxcbiAgICBcImljb25cIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL2NoYW1waW9uL1RhbGl5YWgucG5nXCIsXG4gICAgXCJzcHJpdGVcIjoge1xuICAgICAgXCJ1cmxcIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3Nwcml0ZS9jaGFtcGlvbjMucG5nXCIsXG4gICAgICBcInhcIjogNDgsXG4gICAgICBcInlcIjogNDhcbiAgICB9LFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJUYWxpeWFoIGlzIGEgbm9tYWRpYyBtYWdlIGZyb20gU2h1cmltYSB3aG8gd2VhdmVzIHN0b25lIHdpdGggZW5lcmdldGljIGVudGh1c2lhc20gYW5kIHJhdyBkZXRlcm1pbmF0aW9uLiBUb3JuIGJldHdlZW4gdGVlbmFnZSB3b25kZXIgYW5kIGFkdWx0IHJlc3BvbnNpYmlsaXR5LCBzaGUgaGFzIGNyb3NzZWQgbmVhcmx5IGFsbCBvZiBWYWxvcmFuIG9uIGEgam91cm5leSB0byBsZWFybiB0aGUgdHJ1ZSBuYXR1cmUgb2YgaGVyIGdyb3dpbmcgLi4uXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJ0YWxvblwiLFxuICAgIFwia2V5XCI6IFwiOTFcIixcbiAgICBcIm5hbWVcIjogXCJUYWxvblwiLFxuICAgIFwidGl0bGVcIjogXCJ0aGUgQmxhZGUncyBTaGFkb3dcIixcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJBc3Nhc3NpblwiLFxuICAgICAgXCJGaWdodGVyXCJcbiAgICBdLFxuICAgIFwic3RhdHNcIjoge1xuICAgICAgXCJocFwiOiA1ODIuOCxcbiAgICAgIFwiaHBwZXJsZXZlbFwiOiA4NSxcbiAgICAgIFwibXBcIjogMzc3LjIsXG4gICAgICBcIm1wcGVybGV2ZWxcIjogMzcsXG4gICAgICBcIm1vdmVzcGVlZFwiOiAzNTAsXG4gICAgICBcImFybW9yXCI6IDI2Ljg4LFxuICAgICAgXCJhcm1vcnBlcmxldmVsXCI6IDMuNSxcbiAgICAgIFwic3BlbGxibG9ja1wiOiAzMi4xLFxuICAgICAgXCJzcGVsbGJsb2NrcGVybGV2ZWxcIjogMS4yNSxcbiAgICAgIFwiYXR0YWNrcmFuZ2VcIjogMTI1LFxuICAgICAgXCJocHJlZ2VuXCI6IDguNTEsXG4gICAgICBcImhwcmVnZW5wZXJsZXZlbFwiOiAwLjc1LFxuICAgICAgXCJtcHJlZ2VuXCI6IDcuNTksXG4gICAgICBcIm1wcmVnZW5wZXJsZXZlbFwiOiAwLjUsXG4gICAgICBcImNyaXRcIjogMCxcbiAgICAgIFwiY3JpdHBlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja2RhbWFnZVwiOiA1NS4yMDgsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDMuMSxcbiAgICAgIFwiYXR0YWNrc3BlZWRvZmZzZXRcIjogLTAuMDY1LFxuICAgICAgXCJhdHRhY2tzcGVlZHBlcmxldmVsXCI6IDIuN1xuICAgIH0sXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9jaGFtcGlvbi9UYWxvbi5wbmdcIixcbiAgICBcInNwcml0ZVwiOiB7XG4gICAgICBcInVybFwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvc3ByaXRlL2NoYW1waW9uMy5wbmdcIixcbiAgICAgIFwieFwiOiA5NixcbiAgICAgIFwieVwiOiA0OFxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIicnVGhlIHRocmVlIGRlYWRsaWVzdCBibGFkZW1hc3RlcnMgaW4gYWxsIG9mIFZhbG9yYW4gYXJlIGJvdW5kIHRvIHRoZSBob3VzZSBvZiBEdSBDb3V0ZWF1OiBteSBmYXRoZXIsIG15c2VsZiwgYW5kIFRhbG9uLiBDaGFsbGVuZ2UgdXMsIGlmIHlvdSBkYXJlLicnPGJyPi0tIEthdGFyaW5hIER1IENvdXRlYXU8YnI+PGJyPlRhbG9uJ3MgZWFybGllc3QgbWVtb3JpZXMgYXJlIHRoZSBkYXJrbmVzcyBvZiBOb3h1cycgdW5kZXJncm91bmQgLi4uXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJ0YXJpY1wiLFxuICAgIFwia2V5XCI6IFwiNDRcIixcbiAgICBcIm5hbWVcIjogXCJUYXJpY1wiLFxuICAgIFwidGl0bGVcIjogXCJ0aGUgU2hpZWxkIG9mIFZhbG9yYW5cIixcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJTdXBwb3J0XCIsXG4gICAgICBcIkZpZ2h0ZXJcIlxuICAgIF0sXG4gICAgXCJzdGF0c1wiOiB7XG4gICAgICBcImhwXCI6IDU3NSxcbiAgICAgIFwiaHBwZXJsZXZlbFwiOiA5MCxcbiAgICAgIFwibXBcIjogMzAwLFxuICAgICAgXCJtcHBlcmxldmVsXCI6IDYwLFxuICAgICAgXCJtb3Zlc3BlZWRcIjogMzQwLFxuICAgICAgXCJhcm1vclwiOiAyNSxcbiAgICAgIFwiYXJtb3JwZXJsZXZlbFwiOiAzLjQsXG4gICAgICBcInNwZWxsYmxvY2tcIjogMzIuMSxcbiAgICAgIFwic3BlbGxibG9ja3BlcmxldmVsXCI6IDEuMjUsXG4gICAgICBcImF0dGFja3JhbmdlXCI6IDE1MCxcbiAgICAgIFwiaHByZWdlblwiOiA2LFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC41LFxuICAgICAgXCJtcHJlZ2VuXCI6IDUsXG4gICAgICBcIm1wcmVnZW5wZXJsZXZlbFwiOiAxLFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNTUsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDMuNSxcbiAgICAgIFwiYXR0YWNrc3BlZWRvZmZzZXRcIjogMCxcbiAgICAgIFwiYXR0YWNrc3BlZWRwZXJsZXZlbFwiOiAyXG4gICAgfSxcbiAgICBcImljb25cIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL2NoYW1waW9uL1RhcmljLnBuZ1wiLFxuICAgIFwic3ByaXRlXCI6IHtcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcHJpdGUvY2hhbXBpb24zLnBuZ1wiLFxuICAgICAgXCJ4XCI6IDE0NCxcbiAgICAgIFwieVwiOiA0OFxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIicnVGhlIGJlc3Qgd2VhcG9ucyBhcmUgYmVhdXRpZnVsLicnPGJyPjxicj5UYXJpYyBpcyB0aGUgQXNwZWN0IG9mIHRoZSBQcm90ZWN0b3IsIHdpZWxkaW5nIGluY3JlZGlibGUgcG93ZXIgYXMgUnVuZXRlcnJhJ3MgZ3VhcmRpYW4gb2YgbGlmZSwgbG92ZSwgYW5kIGJlYXV0eS4gU2hhbWVkIGJ5IGEgZGVyZWxpY3Rpb24gb2YgZHV0eSBhbmQgZXhpbGVkIGZyb20gaGlzIGhvbWVsYW5kIERlbWFjaWEsIFRhcmljIGFzY2VuZGVkIE1vdW50IC4uLlwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwidGVlbW9cIixcbiAgICBcImtleVwiOiBcIjE3XCIsXG4gICAgXCJuYW1lXCI6IFwiVGVlbW9cIixcbiAgICBcInRpdGxlXCI6IFwidGhlIFN3aWZ0IFNjb3V0XCIsXG4gICAgXCJ0YWdzXCI6IFtcbiAgICAgIFwiTWFya3NtYW5cIixcbiAgICAgIFwiQXNzYXNzaW5cIlxuICAgIF0sXG4gICAgXCJzdGF0c1wiOiB7XG4gICAgICBcImhwXCI6IDUxNS43NixcbiAgICAgIFwiaHBwZXJsZXZlbFwiOiA4MixcbiAgICAgIFwibXBcIjogMjY3LjIsXG4gICAgICBcIm1wcGVybGV2ZWxcIjogNDAsXG4gICAgICBcIm1vdmVzcGVlZFwiOiAzMzAsXG4gICAgICBcImFybW9yXCI6IDI0LjMsXG4gICAgICBcImFybW9ycGVybGV2ZWxcIjogMy43NSxcbiAgICAgIFwic3BlbGxibG9ja1wiOiAzMCxcbiAgICAgIFwic3BlbGxibG9ja3BlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja3JhbmdlXCI6IDUwMCxcbiAgICAgIFwiaHByZWdlblwiOiA1Ljc0LFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC42NSxcbiAgICAgIFwibXByZWdlblwiOiA3LjIwNSxcbiAgICAgIFwibXByZWdlbnBlcmxldmVsXCI6IDAuNDUsXG4gICAgICBcImNyaXRcIjogMCxcbiAgICAgIFwiY3JpdHBlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja2RhbWFnZVwiOiA0OS41NCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlcGVybGV2ZWxcIjogMyxcbiAgICAgIFwiYXR0YWNrc3BlZWRvZmZzZXRcIjogLTAuMDk0NyxcbiAgICAgIFwiYXR0YWNrc3BlZWRwZXJsZXZlbFwiOiAzLjM4XG4gICAgfSxcbiAgICBcImljb25cIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL2NoYW1waW9uL1RlZW1vLnBuZ1wiLFxuICAgIFwic3ByaXRlXCI6IHtcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcHJpdGUvY2hhbXBpb24zLnBuZ1wiLFxuICAgICAgXCJ4XCI6IDE5MixcbiAgICAgIFwieVwiOiA0OFxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIlRlZW1vIGlzIGEgbGVnZW5kIGFtb25nIGhpcyB5b3JkbGUgYnJvdGhlcnMgYW5kIHNpc3RlcnMgaW4gQmFuZGxlIENpdHkuIEFzIGZhciBhcyB5b3JkbGVzIGFyZSBjb25jZXJuZWQsIHRoZXJlIGlzIHNvbWV0aGluZyBqdXN0IHNsaWdodGx5IG9mZiBhYm91dCBoaW0uIFdoaWxlIFRlZW1vIGVuam95cyB0aGUgY29tcGFuaW9uc2hpcCBvZiBvdGhlciB5b3JkbGVzLCBoZSBhbHNvIGluc2lzdHMgb24gZnJlcXVlbnQgc29sbyBtaXNzaW9ucyAuLi5cIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcInRocmVzaFwiLFxuICAgIFwia2V5XCI6IFwiNDEyXCIsXG4gICAgXCJuYW1lXCI6IFwiVGhyZXNoXCIsXG4gICAgXCJ0aXRsZVwiOiBcInRoZSBDaGFpbiBXYXJkZW5cIixcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJTdXBwb3J0XCIsXG4gICAgICBcIkZpZ2h0ZXJcIlxuICAgIF0sXG4gICAgXCJzdGF0c1wiOiB7XG4gICAgICBcImhwXCI6IDU2MC41MixcbiAgICAgIFwiaHBwZXJsZXZlbFwiOiA5MyxcbiAgICAgIFwibXBcIjogMjczLjkyLFxuICAgICAgXCJtcHBlcmxldmVsXCI6IDQ0LFxuICAgICAgXCJtb3Zlc3BlZWRcIjogMzM1LFxuICAgICAgXCJhcm1vclwiOiAxNixcbiAgICAgIFwiYXJtb3JwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJzcGVsbGJsb2NrXCI6IDMwLFxuICAgICAgXCJzcGVsbGJsb2NrcGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrcmFuZ2VcIjogNDUwLFxuICAgICAgXCJocHJlZ2VuXCI6IDYuOTIsXG4gICAgICBcImhwcmVnZW5wZXJsZXZlbFwiOiAwLjU1LFxuICAgICAgXCJtcHJlZ2VuXCI6IDYsXG4gICAgICBcIm1wcmVnZW5wZXJsZXZlbFwiOiAwLjgsXG4gICAgICBcImNyaXRcIjogMCxcbiAgICAgIFwiY3JpdHBlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja2RhbWFnZVwiOiA0Ny42OTYsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDIuMixcbiAgICAgIFwiYXR0YWNrc3BlZWRvZmZzZXRcIjogMCxcbiAgICAgIFwiYXR0YWNrc3BlZWRwZXJsZXZlbFwiOiAzLjVcbiAgICB9LFxuICAgIFwiaWNvblwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvY2hhbXBpb24vVGhyZXNoLnBuZ1wiLFxuICAgIFwic3ByaXRlXCI6IHtcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcHJpdGUvY2hhbXBpb24zLnBuZ1wiLFxuICAgICAgXCJ4XCI6IDI0MCxcbiAgICAgIFwieVwiOiA0OFxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIicnVGhlIG1pbmQgaXMgYSB3b25kcm91cyB0aGluZyB0byB0ZWFyIGFwYXJ0LicnPGJyPjxicj5TYWRpc3RpYyBhbmQgY3VubmluZywgVGhyZXNoIGlzIGEgcmVzdGxlc3Mgc3Bpcml0IHdobyBwcmlkZXMgaGltc2VsZiBvbiB0b3JtZW50aW5nIG1vcnRhbHMgYW5kIGJyZWFraW5nIHRoZW0gd2l0aCBzbG93LCBleGNydWNpYXRpbmcgaW52ZW50aXZlbmVzcy4gSGlzIHZpY3RpbXMgc3VmZmVyIGZhciBiZXlvbmQgdGhlIHBvaW50IG9mIGRlYXRoLC4uLlwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwidHJpc3RhbmFcIixcbiAgICBcImtleVwiOiBcIjE4XCIsXG4gICAgXCJuYW1lXCI6IFwiVHJpc3RhbmFcIixcbiAgICBcInRpdGxlXCI6IFwidGhlIFlvcmRsZSBHdW5uZXJcIixcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJNYXJrc21hblwiLFxuICAgICAgXCJBc3Nhc3NpblwiXG4gICAgXSxcbiAgICBcInN0YXRzXCI6IHtcbiAgICAgIFwiaHBcIjogNTQyLjc2LFxuICAgICAgXCJocHBlcmxldmVsXCI6IDgyLFxuICAgICAgXCJtcFwiOiAyNDYuNzYsXG4gICAgICBcIm1wcGVybGV2ZWxcIjogMzIsXG4gICAgICBcIm1vdmVzcGVlZFwiOiAzMjUsXG4gICAgICBcImFybW9yXCI6IDIyLFxuICAgICAgXCJhcm1vcnBlcmxldmVsXCI6IDMsXG4gICAgICBcInNwZWxsYmxvY2tcIjogMzAsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiA1NTAsXG4gICAgICBcImhwcmVnZW5cIjogNi4xOSxcbiAgICAgIFwiaHByZWdlbnBlcmxldmVsXCI6IDAuNjUsXG4gICAgICBcIm1wcmVnZW5cIjogNy4yMDUsXG4gICAgICBcIm1wcmVnZW5wZXJsZXZlbFwiOiAwLjQ1LFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNTYuOTYsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDIuNDEsXG4gICAgICBcImF0dGFja3NwZWVkb2Zmc2V0XCI6IC0wLjA0NzM0LFxuICAgICAgXCJhdHRhY2tzcGVlZHBlcmxldmVsXCI6IDEuNVxuICAgIH0sXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9jaGFtcGlvbi9UcmlzdGFuYS5wbmdcIixcbiAgICBcInNwcml0ZVwiOiB7XG4gICAgICBcInVybFwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvc3ByaXRlL2NoYW1waW9uMy5wbmdcIixcbiAgICAgIFwieFwiOiAyODgsXG4gICAgICBcInlcIjogNDhcbiAgICB9LFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJHcmVhdG5lc3MgY29tZXMgaW4gYWxsIHNoYXBlcyBhbmQgc2l6ZXMsIGFzIHByb3ZlbiBieSB0aGlzIGRpbWludXRpdmUsIGNhbm5vbi13aWVsZGluZ8KgeW9yZGxlLiBJbiBhIHdvcmxkIGZyYXVnaHQgd2l0aCB0dXJtb2lsLCBUcmlzdGFuYSByZWZ1c2VzIHRvIGJhY2sgZG93biBmcm9tIGFueSBjaGFsbGVuZ2UuIFNoZSByZXByZXNlbnRzIHRoZSBwaW5uYWNsZSBvZiBtYXJ0aWFsIHByb2ZpY2llbmN5LCB1bndhdmVyaW5nIGNvdXJhZ2UsIC4uLlwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwidHJ1bmRsZVwiLFxuICAgIFwia2V5XCI6IFwiNDhcIixcbiAgICBcIm5hbWVcIjogXCJUcnVuZGxlXCIsXG4gICAgXCJ0aXRsZVwiOiBcInRoZSBUcm9sbCBLaW5nXCIsXG4gICAgXCJ0YWdzXCI6IFtcbiAgICAgIFwiRmlnaHRlclwiLFxuICAgICAgXCJUYW5rXCJcbiAgICBdLFxuICAgIFwic3RhdHNcIjoge1xuICAgICAgXCJocFwiOiA2MTYuMjgsXG4gICAgICBcImhwcGVybGV2ZWxcIjogOTYsXG4gICAgICBcIm1wXCI6IDI4MS42LFxuICAgICAgXCJtcHBlcmxldmVsXCI6IDQ1LFxuICAgICAgXCJtb3Zlc3BlZWRcIjogMzUwLFxuICAgICAgXCJhcm1vclwiOiAyNy41MzYsXG4gICAgICBcImFybW9ycGVybGV2ZWxcIjogMi43LFxuICAgICAgXCJzcGVsbGJsb2NrXCI6IDMyLjEsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAxLjI1LFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiAxNzUsXG4gICAgICBcImhwcmVnZW5cIjogNixcbiAgICAgIFwiaHByZWdlbnBlcmxldmVsXCI6IDAuNzUsXG4gICAgICBcIm1wcmVnZW5cIjogNy41MDUsXG4gICAgICBcIm1wcmVnZW5wZXJsZXZlbFwiOiAwLjYsXG4gICAgICBcImNyaXRcIjogMCxcbiAgICAgIFwiY3JpdHBlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja2RhbWFnZVwiOiA2MC4wNCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlcGVybGV2ZWxcIjogMyxcbiAgICAgIFwiYXR0YWNrc3BlZWRvZmZzZXRcIjogLTAuMDY3MixcbiAgICAgIFwiYXR0YWNrc3BlZWRwZXJsZXZlbFwiOiAyLjlcbiAgICB9LFxuICAgIFwiaWNvblwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvY2hhbXBpb24vVHJ1bmRsZS5wbmdcIixcbiAgICBcInNwcml0ZVwiOiB7XG4gICAgICBcInVybFwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvc3ByaXRlL2NoYW1waW9uMy5wbmdcIixcbiAgICAgIFwieFwiOiAzMzYsXG4gICAgICBcInlcIjogNDhcbiAgICB9LFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJUcnVuZGxlIGlzIGEgaHVsa2luZyBhbmQgZGV2aW91cyB0cm9sbCB3aXRoIGEgbWlzY2hpZXZvdXMgc3RyZWFrLiBUaGVyZSBpcyBub3RoaW5nIGhlIGNhbid0IGJlYXQgaW50byBzdWJtaXNzaW9uIGFuZCBiZW5kIHRvIGhpcyB3aWxsLCBub3QgZXZlbiB0aGUgaWNlIGl0c2VsZi4gV2l0aCBoaXMgbWFzc2l2ZSwgZnJvemVuIGNsdWIsIGhlIGNoaWxscyBoaXMgZW5lbWllcyB0byB0aGUgY29yZSBhbmQgcnVucyB0aGVtIHRocm91Z2ggd2l0aCAuLi5cIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcInRyeW5kYW1lcmVcIixcbiAgICBcImtleVwiOiBcIjIzXCIsXG4gICAgXCJuYW1lXCI6IFwiVHJ5bmRhbWVyZVwiLFxuICAgIFwidGl0bGVcIjogXCJ0aGUgQmFyYmFyaWFuIEtpbmdcIixcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJGaWdodGVyXCIsXG4gICAgICBcIkFzc2Fzc2luXCJcbiAgICBdLFxuICAgIFwic3RhdHNcIjoge1xuICAgICAgXCJocFwiOiA2MjUuNjQsXG4gICAgICBcImhwcGVybGV2ZWxcIjogOTgsXG4gICAgICBcIm1wXCI6IDEwMCxcbiAgICAgIFwibXBwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJtb3Zlc3BlZWRcIjogMzQ1LFxuICAgICAgXCJhcm1vclwiOiAyNC4xMDgsXG4gICAgICBcImFybW9ycGVybGV2ZWxcIjogMy4xLFxuICAgICAgXCJzcGVsbGJsb2NrXCI6IDMyLjEsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAxLjI1LFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiAxMjUsXG4gICAgICBcImhwcmVnZW5cIjogOC41MSxcbiAgICAgIFwiaHByZWdlbnBlcmxldmVsXCI6IDAuOSxcbiAgICAgIFwibXByZWdlblwiOiAwLFxuICAgICAgXCJtcHJlZ2VucGVybGV2ZWxcIjogMCxcbiAgICAgIFwiY3JpdFwiOiAwLFxuICAgICAgXCJjcml0cGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlXCI6IDYxLjM3NixcbiAgICAgIFwiYXR0YWNrZGFtYWdlcGVybGV2ZWxcIjogMy4yLFxuICAgICAgXCJhdHRhY2tzcGVlZG9mZnNldFwiOiAtMC4wNjcyLFxuICAgICAgXCJhdHRhY2tzcGVlZHBlcmxldmVsXCI6IDIuOVxuICAgIH0sXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9jaGFtcGlvbi9UcnluZGFtZXJlLnBuZ1wiLFxuICAgIFwic3ByaXRlXCI6IHtcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcHJpdGUvY2hhbXBpb24zLnBuZ1wiLFxuICAgICAgXCJ4XCI6IDM4NCxcbiAgICAgIFwieVwiOiA0OFxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIkZ1ZWxlZCBieSBoaXMgdW5icmlkbGVkIGZ1cnkgYW5kIHJhZ2UsIFRyeW5kYW1lcmUgY3V0cyBoaXMgd2F5IHRocm91Z2ggdGhlIHR1bmRyYSwgbWFzdGVyaW5nIHRoZSBhcnQgb2YgYmF0dGxlIGJ5IGNoYWxsZW5naW5nIHRoZSBGcmVsam9yZCdzIGdyZWF0ZXN0IHdhcnJpb3JzLiBUaGUgd3JhdGhmdWwgYmFyYmFyaWFuIHNlZWtzIHJldmVuZ2Ugb24gdGhlIG9uZSB3aG8gZGVjaW1hdGVkIGhpcyBjbGFuIGFuZCBzdHJpa2VzIGRvd24gYWxsIC4uLlwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwidHdpc3RlZGZhdGVcIixcbiAgICBcImtleVwiOiBcIjRcIixcbiAgICBcIm5hbWVcIjogXCJUd2lzdGVkIEZhdGVcIixcbiAgICBcInRpdGxlXCI6IFwidGhlIENhcmQgTWFzdGVyXCIsXG4gICAgXCJ0YWdzXCI6IFtcbiAgICAgIFwiTWFnZVwiXG4gICAgXSxcbiAgICBcInN0YXRzXCI6IHtcbiAgICAgIFwiaHBcIjogNTIxLjc2LFxuICAgICAgXCJocHBlcmxldmVsXCI6IDgyLFxuICAgICAgXCJtcFwiOiAyNjUuODQsXG4gICAgICBcIm1wcGVybGV2ZWxcIjogMzgsXG4gICAgICBcIm1vdmVzcGVlZFwiOiAzMzAsXG4gICAgICBcImFybW9yXCI6IDIwLjU0MixcbiAgICAgIFwiYXJtb3JwZXJsZXZlbFwiOiAzLjE1LFxuICAgICAgXCJzcGVsbGJsb2NrXCI6IDMwLFxuICAgICAgXCJzcGVsbGJsb2NrcGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrcmFuZ2VcIjogNTI1LFxuICAgICAgXCJocHJlZ2VuXCI6IDUuNTA1LFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC42LFxuICAgICAgXCJtcHJlZ2VuXCI6IDYsXG4gICAgICBcIm1wcmVnZW5wZXJsZXZlbFwiOiAwLjgsXG4gICAgICBcImNyaXRcIjogMCxcbiAgICAgIFwiY3JpdHBlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja2RhbWFnZVwiOiA0OS45NTQsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDMuMyxcbiAgICAgIFwiYXR0YWNrc3BlZWRvZmZzZXRcIjogLTAuMDQsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMy4yMlxuICAgIH0sXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9jaGFtcGlvbi9Ud2lzdGVkRmF0ZS5wbmdcIixcbiAgICBcInNwcml0ZVwiOiB7XG4gICAgICBcInVybFwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvc3ByaXRlL2NoYW1waW9uMy5wbmdcIixcbiAgICAgIFwieFwiOiA0MzIsXG4gICAgICBcInlcIjogNDhcbiAgICB9LFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJUd2lzdGVkIEZhdGUgaXMgYW4gaW5mYW1vdXMgY2FyZCBzaGFycCBhbmQgc3dpbmRsZXIgd2hvIGhhcyBnYW1ibGVkIGFuZCBjaGFybWVkIGhpcyB3YXkgYWNyb3NzIG11Y2ggb2YgdGhlIGtub3duIHdvcmxkLCBlYXJuaW5nIHRoZSBlbm1pdHkgYW5kIGFkbWlyYXRpb24gb2YgdGhlIHJpY2ggYW5kIGZvb2xpc2ggYWxpa2UuIEhlIHJhcmVseSB0YWtlcyB0aGluZ3Mgc2VyaW91c2x5LCBncmVldGluZyBlYWNoIGRheSB3aXRoIGEgbW9ja2luZyAuLi5cIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcInR3aXRjaFwiLFxuICAgIFwia2V5XCI6IFwiMjlcIixcbiAgICBcIm5hbWVcIjogXCJUd2l0Y2hcIixcbiAgICBcInRpdGxlXCI6IFwidGhlIFBsYWd1ZSBSYXRcIixcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJNYXJrc21hblwiLFxuICAgICAgXCJBc3Nhc3NpblwiXG4gICAgXSxcbiAgICBcInN0YXRzXCI6IHtcbiAgICAgIFwiaHBcIjogNTI1LjA4LFxuICAgICAgXCJocHBlcmxldmVsXCI6IDgxLFxuICAgICAgXCJtcFwiOiAyODcuMixcbiAgICAgIFwibXBwZXJsZXZlbFwiOiA0MCxcbiAgICAgIFwibW92ZXNwZWVkXCI6IDMzMCxcbiAgICAgIFwiYXJtb3JcIjogMjMuMDQsXG4gICAgICBcImFybW9ycGVybGV2ZWxcIjogMyxcbiAgICAgIFwic3BlbGxibG9ja1wiOiAzMCxcbiAgICAgIFwic3BlbGxibG9ja3BlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja3JhbmdlXCI6IDU1MCxcbiAgICAgIFwiaHByZWdlblwiOiA2LjAwNSxcbiAgICAgIFwiaHByZWdlbnBlcmxldmVsXCI6IDAuNixcbiAgICAgIFwibXByZWdlblwiOiA3LjI1NSxcbiAgICAgIFwibXByZWdlbnBlcmxldmVsXCI6IDAuNDUsXG4gICAgICBcImNyaXRcIjogMCxcbiAgICAgIFwiY3JpdHBlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja2RhbWFnZVwiOiA1NS40NixcbiAgICAgIFwiYXR0YWNrZGFtYWdlcGVybGV2ZWxcIjogMi40MSxcbiAgICAgIFwiYXR0YWNrc3BlZWRvZmZzZXRcIjogLTAuMDgsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMy4zOFxuICAgIH0sXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9jaGFtcGlvbi9Ud2l0Y2gucG5nXCIsXG4gICAgXCJzcHJpdGVcIjoge1xuICAgICAgXCJ1cmxcIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3Nwcml0ZS9jaGFtcGlvbjMucG5nXCIsXG4gICAgICBcInhcIjogMCxcbiAgICAgIFwieVwiOiA5NlxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIkguSS5WLkUuIEluY2lkZW50IFJlcG9ydDxicj5Db2RlIFZpb2xhdGlvbjogSW5kdXN0cmlhbCBIb21pY2lkZTxicj5DYXNlZmlsZSBTdGF0dXM6IFVuc29sdmVkPGJyPkludmVzdGlnYXRpbmcgQWdlbnQ6IFJvbCwgUC48YnI+PGJyPlRlYW0gcmVzcG9uZGVkIHRvIHJlcG9ydCBvZiBzdXNwaWNpb3VzIGNoYXJhY3RlciwgY3JpbWluYWwgYWN0aXZpdHk7IHByb2NlZWRlZCB0byBTdW1wIFdvcmtzLCBTZWN0b3IgOTBUWi4gU2VjdG9yIDkwVFogLi4uXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJ1ZHlyXCIsXG4gICAgXCJrZXlcIjogXCI3N1wiLFxuICAgIFwibmFtZVwiOiBcIlVkeXJcIixcbiAgICBcInRpdGxlXCI6IFwidGhlIFNwaXJpdCBXYWxrZXJcIixcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJGaWdodGVyXCIsXG4gICAgICBcIlRhbmtcIlxuICAgIF0sXG4gICAgXCJzdGF0c1wiOiB7XG4gICAgICBcImhwXCI6IDU5My4zMixcbiAgICAgIFwiaHBwZXJsZXZlbFwiOiA5OSxcbiAgICAgIFwibXBcIjogMjcwLjQsXG4gICAgICBcIm1wcGVybGV2ZWxcIjogMzAsXG4gICAgICBcIm1vdmVzcGVlZFwiOiAzNDUsXG4gICAgICBcImFybW9yXCI6IDI1LjQ3LFxuICAgICAgXCJhcm1vcnBlcmxldmVsXCI6IDQsXG4gICAgICBcInNwZWxsYmxvY2tcIjogMzIuMSxcbiAgICAgIFwic3BlbGxibG9ja3BlcmxldmVsXCI6IDEuMjUsXG4gICAgICBcImF0dGFja3JhbmdlXCI6IDEyNSxcbiAgICAgIFwiaHByZWdlblwiOiA2LFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC43NSxcbiAgICAgIFwibXByZWdlblwiOiA3LjUwNSxcbiAgICAgIFwibXByZWdlbnBlcmxldmVsXCI6IDAuNDUsXG4gICAgICBcImNyaXRcIjogMCxcbiAgICAgIFwiY3JpdHBlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja2RhbWFnZVwiOiA1OC4yODYsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDMuMixcbiAgICAgIFwiYXR0YWNrc3BlZWRvZmZzZXRcIjogLTAuMDUsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMi42N1xuICAgIH0sXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9jaGFtcGlvbi9VZHlyLnBuZ1wiLFxuICAgIFwic3ByaXRlXCI6IHtcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcHJpdGUvY2hhbXBpb24zLnBuZ1wiLFxuICAgICAgXCJ4XCI6IDQ4LFxuICAgICAgXCJ5XCI6IDk2XG4gICAgfSxcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiVWR5ciBpcyBtb3JlIHRoYW4gYSBtYW47IGhlIGlzIGEgdmVzc2VsIGZvciB0aGUgdW50YW1lZCBwb3dlciBvZiBmb3VyIHByaW1hbCBhbmltYWwgc3Bpcml0cy4gV2hlbiB0YXBwaW5nIGludG8gdGhlIHNwaXJpdHMnIGJlc3RpYWwgbmF0dXJlcywgVWR5ciBjYW4gaGFybmVzcyB0aGVpciB1bmlxdWUgc3RyZW5ndGhzOiB0aGUgdGlnZXIgZ3JhbnRzIGhpbSBzcGVlZCBhbmQgZmVyb2NpdHksIHRoZSB0dXJ0bGUgcmVzaWxpZW5jZSwgdGhlIC4uLlwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwidXJnb3RcIixcbiAgICBcImtleVwiOiBcIjZcIixcbiAgICBcIm5hbWVcIjogXCJVcmdvdFwiLFxuICAgIFwidGl0bGVcIjogXCJ0aGUgSGVhZHNtYW4ncyBQcmlkZVwiLFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcIk1hcmtzbWFuXCIsXG4gICAgICBcIkZpZ2h0ZXJcIlxuICAgIF0sXG4gICAgXCJzdGF0c1wiOiB7XG4gICAgICBcImhwXCI6IDU4Ni41MixcbiAgICAgIFwiaHBwZXJsZXZlbFwiOiA4OSxcbiAgICAgIFwibXBcIjogMzEyLjQsXG4gICAgICBcIm1wcGVybGV2ZWxcIjogNTUsXG4gICAgICBcIm1vdmVzcGVlZFwiOiAzMzUsXG4gICAgICBcImFybW9yXCI6IDI0LjU0NCxcbiAgICAgIFwiYXJtb3JwZXJsZXZlbFwiOiAzLjMsXG4gICAgICBcInNwZWxsYmxvY2tcIjogMzAsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiA0MjUsXG4gICAgICBcImhwcmVnZW5cIjogNi41MDUsXG4gICAgICBcImhwcmVnZW5wZXJsZXZlbFwiOiAwLjYsXG4gICAgICBcIm1wcmVnZW5cIjogOC41OSxcbiAgICAgIFwibXByZWdlbnBlcmxldmVsXCI6IDAuNjUsXG4gICAgICBcImNyaXRcIjogMCxcbiAgICAgIFwiY3JpdHBlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja2RhbWFnZVwiOiA1NC4wNSxcbiAgICAgIFwiYXR0YWNrZGFtYWdlcGVybGV2ZWxcIjogMy42LFxuICAgICAgXCJhdHRhY2tzcGVlZG9mZnNldFwiOiAtMC4wMyxcbiAgICAgIFwiYXR0YWNrc3BlZWRwZXJsZXZlbFwiOiAyLjlcbiAgICB9LFxuICAgIFwiaWNvblwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvY2hhbXBpb24vVXJnb3QucG5nXCIsXG4gICAgXCJzcHJpdGVcIjoge1xuICAgICAgXCJ1cmxcIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3Nwcml0ZS9jaGFtcGlvbjMucG5nXCIsXG4gICAgICBcInhcIjogOTYsXG4gICAgICBcInlcIjogOTZcbiAgICB9LFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGVyZSBhcmUgd2FycmlvcnMgd2hvIGJlY29tZSBncmVhdCBmb3IgdGhlaXIgc3RyZW5ndGgsIGN1bm5pbmcsIG9yIHNraWxsIHdpdGggYXJtcy4gT3RoZXJzIHNpbXBseSByZWZ1c2UgdG8gZGllLiBVcmdvdCwgb25jZSBhIGdyZWF0IHNvbGRpZXIgb2YgTm94dXMsIG1heSBjb25zdGl0dXRlIGEgY2FzZSBpbiBzdXBwb3J0IG9mIHRoZSBsYXR0ZXIuIFByb25lIHRvIGRpdmluZyBoZWFkbG9uZyBpbnRvIGVuZW15IGJhdHRsZSBsaW5lcywgLi4uXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJ2YXJ1c1wiLFxuICAgIFwia2V5XCI6IFwiMTEwXCIsXG4gICAgXCJuYW1lXCI6IFwiVmFydXNcIixcbiAgICBcInRpdGxlXCI6IFwidGhlIEFycm93IG9mIFJldHJpYnV0aW9uXCIsXG4gICAgXCJ0YWdzXCI6IFtcbiAgICAgIFwiTWFya3NtYW5cIixcbiAgICAgIFwiTWFnZVwiXG4gICAgXSxcbiAgICBcInN0YXRzXCI6IHtcbiAgICAgIFwiaHBcIjogNTM3Ljc2LFxuICAgICAgXCJocHBlcmxldmVsXCI6IDgyLFxuICAgICAgXCJtcFwiOiAzNjAuNDgsXG4gICAgICBcIm1wcGVybGV2ZWxcIjogMzMsXG4gICAgICBcIm1vdmVzcGVlZFwiOiAzMzAsXG4gICAgICBcImFybW9yXCI6IDIzLjIxMixcbiAgICAgIFwiYXJtb3JwZXJsZXZlbFwiOiAzLjQsXG4gICAgICBcInNwZWxsYmxvY2tcIjogMzAsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiA1NzUsXG4gICAgICBcImhwcmVnZW5cIjogNS40MixcbiAgICAgIFwiaHByZWdlbnBlcmxldmVsXCI6IDAuNTUsXG4gICAgICBcIm1wcmVnZW5cIjogNy4zNCxcbiAgICAgIFwibXByZWdlbnBlcmxldmVsXCI6IDAuOCxcbiAgICAgIFwiY3JpdFwiOiAwLFxuICAgICAgXCJjcml0cGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlXCI6IDU0LjY2LFxuICAgICAgXCJhdHRhY2tkYW1hZ2VwZXJsZXZlbFwiOiAyLjQxLFxuICAgICAgXCJhdHRhY2tzcGVlZG9mZnNldFwiOiAtMC4wNSxcbiAgICAgIFwiYXR0YWNrc3BlZWRwZXJsZXZlbFwiOiAzXG4gICAgfSxcbiAgICBcImljb25cIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL2NoYW1waW9uL1ZhcnVzLnBuZ1wiLFxuICAgIFwic3ByaXRlXCI6IHtcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcHJpdGUvY2hhbXBpb24zLnBuZ1wiLFxuICAgICAgXCJ4XCI6IDE0NCxcbiAgICAgIFwieVwiOiA5NlxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIicnVGhlIGxpZmUgb2YgYW4gYXJyb3cgaXMgZmxlZXRpbmcsIGJ1aWx0IG9mIG5vdGhpbmcgYnV0IGRpcmVjdGlvbiBhbmQgaW50ZW50LicnPGJyPjxicj5Gb3IgaGlzIGluY29tcGFyYWJsZSBza2lsbCB3aXRoIHRoZSBib3cgYW5kIGhpcyB1bnF1ZXN0aW9uZWQgc2Vuc2Ugb2YgaG9ub3IsIFZhcnVzIHdhcyBjaG9zZW4gdG8gYmUgdGhlIHdhcmRlbiBvZiBhIHNhY3JlZCBJb25pYW4gdGVtcGxlLiBUaGUgdGVtcGxlIHdhcyBidWlsdCB0byAuLi5cIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcInZheW5lXCIsXG4gICAgXCJrZXlcIjogXCI2N1wiLFxuICAgIFwibmFtZVwiOiBcIlZheW5lXCIsXG4gICAgXCJ0aXRsZVwiOiBcInRoZSBOaWdodCBIdW50ZXJcIixcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJNYXJrc21hblwiLFxuICAgICAgXCJBc3Nhc3NpblwiXG4gICAgXSxcbiAgICBcInN0YXRzXCI6IHtcbiAgICAgIFwiaHBcIjogNDk4LjQ0LFxuICAgICAgXCJocHBlcmxldmVsXCI6IDgzLFxuICAgICAgXCJtcFwiOiAyMzEuOCxcbiAgICAgIFwibXBwZXJsZXZlbFwiOiAzNSxcbiAgICAgIFwibW92ZXNwZWVkXCI6IDMzMCxcbiAgICAgIFwiYXJtb3JcIjogMTkuMDEyLFxuICAgICAgXCJhcm1vcnBlcmxldmVsXCI6IDMuNCxcbiAgICAgIFwic3BlbGxibG9ja1wiOiAzMCxcbiAgICAgIFwic3BlbGxibG9ja3BlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja3JhbmdlXCI6IDU1MCxcbiAgICAgIFwiaHByZWdlblwiOiA1LjQyLFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC41NSxcbiAgICAgIFwibXByZWdlblwiOiA2Ljk3LFxuICAgICAgXCJtcHJlZ2VucGVybGV2ZWxcIjogMC40LFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNTUuODgsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDEuNjYsXG4gICAgICBcImF0dGFja3NwZWVkb2Zmc2V0XCI6IC0wLjA1LFxuICAgICAgXCJhdHRhY2tzcGVlZHBlcmxldmVsXCI6IDRcbiAgICB9LFxuICAgIFwiaWNvblwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvY2hhbXBpb24vVmF5bmUucG5nXCIsXG4gICAgXCJzcHJpdGVcIjoge1xuICAgICAgXCJ1cmxcIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3Nwcml0ZS9jaGFtcGlvbjMucG5nXCIsXG4gICAgICBcInhcIjogMTkyLFxuICAgICAgXCJ5XCI6IDk2XG4gICAgfSxcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIHdvcmxkIGlzIG5vdCBhbHdheXMgYXMgY2l2aWxpemVkIGFzIHBlb3BsZSBtaWdodCB0aGluay4gVGhlcmUgYXJlIHN0aWxsIHRob3NlIHdobyB3b3VsZCBmb2xsb3cgdGhlIGJsYWNrZXN0IHBhdGhzIG9mIG1hZ2ljIGFuZCBiZWNvbWUgY29ycnVwdGVkIGJ5IHRoZSBkYXJrZXIgcG93ZXJzIHRoYXQgZmxvdyB0aHJvdWdoIFJ1bmV0ZXJyYS4gU2hhdW5hIFZheW5lIGtub3dzIHRoaXMgZmFjdCB3ZWxsLjxicj48YnI+QXMgYSB5b3VuZyAuLi5cIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcInZlaWdhclwiLFxuICAgIFwia2V5XCI6IFwiNDVcIixcbiAgICBcIm5hbWVcIjogXCJWZWlnYXJcIixcbiAgICBcInRpdGxlXCI6IFwidGhlIFRpbnkgTWFzdGVyIG9mIEV2aWxcIixcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJNYWdlXCJcbiAgICBdLFxuICAgIFwic3RhdHNcIjoge1xuICAgICAgXCJocFwiOiA0OTIuNzYsXG4gICAgICBcImhwcGVybGV2ZWxcIjogODIsXG4gICAgICBcIm1wXCI6IDM5Mi40LFxuICAgICAgXCJtcHBlcmxldmVsXCI6IDUyLFxuICAgICAgXCJtb3Zlc3BlZWRcIjogMzQwLFxuICAgICAgXCJhcm1vclwiOiAyMi41NSxcbiAgICAgIFwiYXJtb3JwZXJsZXZlbFwiOiAzLjc1LFxuICAgICAgXCJzcGVsbGJsb2NrXCI6IDMwLFxuICAgICAgXCJzcGVsbGJsb2NrcGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrcmFuZ2VcIjogNTI1LFxuICAgICAgXCJocHJlZ2VuXCI6IDUuNDIsXG4gICAgICBcImhwcmVnZW5wZXJsZXZlbFwiOiAwLjU1LFxuICAgICAgXCJtcHJlZ2VuXCI6IDYsXG4gICAgICBcIm1wcmVnZW5wZXJsZXZlbFwiOiAwLjgsXG4gICAgICBcImNyaXRcIjogMCxcbiAgICAgIFwiY3JpdHBlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja2RhbWFnZVwiOiA1MC43MSxcbiAgICAgIFwiYXR0YWNrZGFtYWdlcGVybGV2ZWxcIjogMi42MjUsXG4gICAgICBcImF0dGFja3NwZWVkb2Zmc2V0XCI6IDAsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMi4yNFxuICAgIH0sXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9jaGFtcGlvbi9WZWlnYXIucG5nXCIsXG4gICAgXCJzcHJpdGVcIjoge1xuICAgICAgXCJ1cmxcIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3Nwcml0ZS9jaGFtcGlvbjMucG5nXCIsXG4gICAgICBcInhcIjogMjQwLFxuICAgICAgXCJ5XCI6IDk2XG4gICAgfSxcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiVG8gbW9zdCwgdGhvdWdodHMgb2YgeW9yZGxlcyBkbyBub3QgY29uanVyZSBpbWFnZXMgdG8gYmUgZmVhcmVkLiBUaGUgZWFzeWdvaW5nIGhhbGYtcGludCByYWNlLCB0aG91Z2ggZmllcmNlLCBpcyBvZnRlbiByZWdhcmRlZCB3aXRoIHNvbWUgZGVncmVlIG9mIGpvdmlhbGl0eS4gVGhlaXIgaGlnaC1waXRjaGVkIHZvaWNlcyBhbmQgbmF0dXJhbGx5IGN1dGUgZm9ybXMgaW5zcGlyZSBzb21ldGhpbmcgb2YgYSBwcm90ZWN0aXZlIC4uLlwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwidmVsa296XCIsXG4gICAgXCJrZXlcIjogXCIxNjFcIixcbiAgICBcIm5hbWVcIjogXCJWZWwnS296XCIsXG4gICAgXCJ0aXRsZVwiOiBcInRoZSBFeWUgb2YgdGhlIFZvaWRcIixcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJNYWdlXCJcbiAgICBdLFxuICAgIFwic3RhdHNcIjoge1xuICAgICAgXCJocFwiOiA1MDcuNjgsXG4gICAgICBcImhwcGVybGV2ZWxcIjogNzYsXG4gICAgICBcIm1wXCI6IDM3NS42LFxuICAgICAgXCJtcHBlcmxldmVsXCI6IDQyLFxuICAgICAgXCJtb3Zlc3BlZWRcIjogMzQwLFxuICAgICAgXCJhcm1vclwiOiAyMS44OCxcbiAgICAgIFwiYXJtb3JwZXJsZXZlbFwiOiAzLjUsXG4gICAgICBcInNwZWxsYmxvY2tcIjogMzAsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiA1MjUsXG4gICAgICBcImhwcmVnZW5cIjogNS40MixcbiAgICAgIFwiaHByZWdlbnBlcmxldmVsXCI6IDAuNTUsXG4gICAgICBcIm1wcmVnZW5cIjogNixcbiAgICAgIFwibXByZWdlbnBlcmxldmVsXCI6IDAuOCxcbiAgICAgIFwiY3JpdFwiOiAwLFxuICAgICAgXCJjcml0cGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlXCI6IDU0LjkzNzksXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDMuMTQxNTksXG4gICAgICBcImF0dGFja3NwZWVkb2Zmc2V0XCI6IDAsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMS4zNlxuICAgIH0sXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9jaGFtcGlvbi9WZWxrb3oucG5nXCIsXG4gICAgXCJzcHJpdGVcIjoge1xuICAgICAgXCJ1cmxcIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3Nwcml0ZS9jaGFtcGlvbjMucG5nXCIsXG4gICAgICBcInhcIjogMjg4LFxuICAgICAgXCJ5XCI6IDk2XG4gICAgfSxcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiSSBwYXNzIGludG8gdGhlIHN1ZGRlbiBnbGFyZS4gQmxpbmsuIEJsaW5rLCBibGluaywgYmxpbmsuIE15IGV5ZXMgYWRqdXN0IGFuZCBldmFsdWF0ZSB0aGUgbGFuZHNjYXBlIGJlZm9yZSBtZS48YnI+PGJyPlRoZXJlJ3MgYSBzY3VycnlpbmcuIEkgbG9vayBkb3duIHRvIGZpbmQgYSBzbWFsbCwgd2hpdGUgY3JlYXR1cmUgc3RhbmRpbmcgb24gaXRzIGhpbmQgbGVncywgc25pZmZpbmcgYXQgbXkgYm9keS4gSXQgaW50cmlndWVzIG1lLi4uLlwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwidmlcIixcbiAgICBcImtleVwiOiBcIjI1NFwiLFxuICAgIFwibmFtZVwiOiBcIlZpXCIsXG4gICAgXCJ0aXRsZVwiOiBcInRoZSBQaWx0b3ZlciBFbmZvcmNlclwiLFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcIkZpZ2h0ZXJcIixcbiAgICAgIFwiQXNzYXNzaW5cIlxuICAgIF0sXG4gICAgXCJzdGF0c1wiOiB7XG4gICAgICBcImhwXCI6IDU4Mi44LFxuICAgICAgXCJocHBlcmxldmVsXCI6IDg1LFxuICAgICAgXCJtcFwiOiAyOTUuNixcbiAgICAgIFwibXBwZXJsZXZlbFwiOiA0NSxcbiAgICAgIFwibW92ZXNwZWVkXCI6IDM0NSxcbiAgICAgIFwiYXJtb3JcIjogMjUuODgsXG4gICAgICBcImFybW9ycGVybGV2ZWxcIjogMy41LFxuICAgICAgXCJzcGVsbGJsb2NrXCI6IDMyLjEsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAxLjI1LFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiAxMjUsXG4gICAgICBcImhwcmVnZW5cIjogOS4wMSxcbiAgICAgIFwiaHByZWdlbnBlcmxldmVsXCI6IDAuOSxcbiAgICAgIFwibXByZWdlblwiOiA4LjA5LFxuICAgICAgXCJtcHJlZ2VucGVybGV2ZWxcIjogMC42NSxcbiAgICAgIFwiY3JpdFwiOiAwLFxuICAgICAgXCJjcml0cGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlXCI6IDU1Ljg4LFxuICAgICAgXCJhdHRhY2tkYW1hZ2VwZXJsZXZlbFwiOiAzLjUsXG4gICAgICBcImF0dGFja3NwZWVkb2Zmc2V0XCI6IC0wLjAzLFxuICAgICAgXCJhdHRhY2tzcGVlZHBlcmxldmVsXCI6IDIuNVxuICAgIH0sXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9jaGFtcGlvbi9WaS5wbmdcIixcbiAgICBcInNwcml0ZVwiOiB7XG4gICAgICBcInVybFwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvc3ByaXRlL2NoYW1waW9uMy5wbmdcIixcbiAgICAgIFwieFwiOiAzMzYsXG4gICAgICBcInlcIjogOTZcbiAgICB9LFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJUbyBWaSwgZXZlcnkgcHJvYmxlbSBpcyBqdXN0IGFub3RoZXIgYnJpY2sgd2FsbCB0byBwdW5jaCB0aHJvdWdoIHdpdGggaGVyIGdpZ2FudGljIGhleHRlY2ggZ2F1bnRsZXRzLiBUaG91Z2ggc2hlIGdyZXcgdXAgb24gdGhlIHdyb25nIHNpZGUgb2YgdGhlIGxhdywgVmkgbm93IHVzZXMgaGVyIGNyaW1pbmFsIGtub3ctaG93IHRvIHNlcnZlIFBpbHRvdmVyJ3MgcG9saWNlIGZvcmNlLiBWaSdzIGJyYXNoIGF0dGl0dWRlLCBhYnJhc2l2ZSAuLi5cIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcInZpa3RvclwiLFxuICAgIFwia2V5XCI6IFwiMTEyXCIsXG4gICAgXCJuYW1lXCI6IFwiVmlrdG9yXCIsXG4gICAgXCJ0aXRsZVwiOiBcInRoZSBNYWNoaW5lIEhlcmFsZFwiLFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcIk1hZ2VcIlxuICAgIF0sXG4gICAgXCJzdGF0c1wiOiB7XG4gICAgICBcImhwXCI6IDUxNi4wNCxcbiAgICAgIFwiaHBwZXJsZXZlbFwiOiA3OCxcbiAgICAgIFwibXBcIjogMzI0LFxuICAgICAgXCJtcHBlcmxldmVsXCI6IDUwLFxuICAgICAgXCJtb3Zlc3BlZWRcIjogMzM1LFxuICAgICAgXCJhcm1vclwiOiAyMi43MixcbiAgICAgIFwiYXJtb3JwZXJsZXZlbFwiOiA0LFxuICAgICAgXCJzcGVsbGJsb2NrXCI6IDMwLFxuICAgICAgXCJzcGVsbGJsb2NrcGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrcmFuZ2VcIjogNTI1LFxuICAgICAgXCJocHJlZ2VuXCI6IDcuODQsXG4gICAgICBcImhwcmVnZW5wZXJsZXZlbFwiOiAwLjY1LFxuICAgICAgXCJtcHJlZ2VuXCI6IDYsXG4gICAgICBcIm1wcmVnZW5wZXJsZXZlbFwiOiAwLjgsXG4gICAgICBcImNyaXRcIjogMCxcbiAgICAgIFwiY3JpdHBlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja2RhbWFnZVwiOiA1Mi4wNCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlcGVybGV2ZWxcIjogMyxcbiAgICAgIFwiYXR0YWNrc3BlZWRvZmZzZXRcIjogLTAuMDUsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMi4xMVxuICAgIH0sXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9jaGFtcGlvbi9WaWt0b3IucG5nXCIsXG4gICAgXCJzcHJpdGVcIjoge1xuICAgICAgXCJ1cmxcIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3Nwcml0ZS9jaGFtcGlvbjMucG5nXCIsXG4gICAgICBcInhcIjogMzg0LFxuICAgICAgXCJ5XCI6IDk2XG4gICAgfSxcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiRWFybHkgaW4gbGlmZSwgVmlrdG9yIGRpc2NvdmVyZWQgaGlzIHBhc3Npb24gZm9yIHNjaWVuY2UgYW5kIGludmVudGlvbiwgcGFydGljdWxhcmx5IGluIHRoZSBmaWVsZCBvZiBtZWNoYW5pY2FsIGF1dG9tYXRpb24uIEhlIGF0dGVuZGVkIFphdW4ncyBwcmVzdGlnaW91cyBDb2xsZWdlIG9mIFRlY2htYXR1cmd5IGFuZCBsZWQgdGhlIHRlYW0gdGhhdCBjb25zdHJ1Y3RlZCBCbGl0emNyYW5rIC0gYSBzY2llbnRpZmljIGJyZWFrdGhyb3VnaCAuLi5cIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcInZsYWRpbWlyXCIsXG4gICAgXCJrZXlcIjogXCI4XCIsXG4gICAgXCJuYW1lXCI6IFwiVmxhZGltaXJcIixcbiAgICBcInRpdGxlXCI6IFwidGhlIENyaW1zb24gUmVhcGVyXCIsXG4gICAgXCJ0YWdzXCI6IFtcbiAgICAgIFwiTWFnZVwiLFxuICAgICAgXCJUYW5rXCJcbiAgICBdLFxuICAgIFwic3RhdHNcIjoge1xuICAgICAgXCJocFwiOiA1MjUsXG4gICAgICBcImhwcGVybGV2ZWxcIjogODQsXG4gICAgICBcIm1wXCI6IDIsXG4gICAgICBcIm1wcGVybGV2ZWxcIjogMCxcbiAgICAgIFwibW92ZXNwZWVkXCI6IDMzMCxcbiAgICAgIFwiYXJtb3JcIjogMjMsXG4gICAgICBcImFybW9ycGVybGV2ZWxcIjogMy4zLFxuICAgICAgXCJzcGVsbGJsb2NrXCI6IDMwLFxuICAgICAgXCJzcGVsbGJsb2NrcGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrcmFuZ2VcIjogNDUwLFxuICAgICAgXCJocHJlZ2VuXCI6IDcuMDA1LFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC42LFxuICAgICAgXCJtcHJlZ2VuXCI6IDAsXG4gICAgICBcIm1wcmVnZW5wZXJsZXZlbFwiOiAwLFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNTIsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDMsXG4gICAgICBcImF0dGFja3NwZWVkb2Zmc2V0XCI6IDAsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMlxuICAgIH0sXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9jaGFtcGlvbi9WbGFkaW1pci5wbmdcIixcbiAgICBcInNwcml0ZVwiOiB7XG4gICAgICBcInVybFwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvc3ByaXRlL2NoYW1waW9uMy5wbmdcIixcbiAgICAgIFwieFwiOiA0MzIsXG4gICAgICBcInlcIjogOTZcbiAgICB9LFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGVyZSBpcyBhIHRlbXBsZSBoaWRkZW4gaW4gdGhlIG1vdW50YWlucyBiZXR3ZWVuIE5veHVzIGFuZCB0aGUgVGVtcGVzdCBGbGF0cywgd2hlcmUgdGhlIHNlY3JldHMgb2YgYW4gYW5jaWVudCBhbmQgdGVycmlmeWluZyBzb3JjZXJ5IGFyZSBrZXB0LiBUaGUgYXJlYSBzdXJyb3VuZGluZyB0aGUgdGVtcGxlIGlzIGxpdHRlcmVkIHdpdGggdGhlIGV4c2FuZ3VpbmF0ZWQgY29ycHNlcyBvZiB0aG9zZSB3aG8gaGF2ZSBtaXN0YWtlbmx5IC4uLlwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwidm9saWJlYXJcIixcbiAgICBcImtleVwiOiBcIjEwNlwiLFxuICAgIFwibmFtZVwiOiBcIlZvbGliZWFyXCIsXG4gICAgXCJ0aXRsZVwiOiBcInRoZSBUaHVuZGVyJ3MgUm9hclwiLFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcIkZpZ2h0ZXJcIixcbiAgICAgIFwiVGFua1wiXG4gICAgXSxcbiAgICBcInN0YXRzXCI6IHtcbiAgICAgIFwiaHBcIjogNTg0LjQ4LFxuICAgICAgXCJocHBlcmxldmVsXCI6IDg2LFxuICAgICAgXCJtcFwiOiAyNzAuNCxcbiAgICAgIFwibXBwZXJsZXZlbFwiOiAzMCxcbiAgICAgIFwibW92ZXNwZWVkXCI6IDM0NSxcbiAgICAgIFwiYXJtb3JcIjogMjYuMzgsXG4gICAgICBcImFybW9ycGVybGV2ZWxcIjogMy41LFxuICAgICAgXCJzcGVsbGJsb2NrXCI6IDMyLjEsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAxLjI1LFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiAxMjUsXG4gICAgICBcImhwcmVnZW5cIjogOC4wOSxcbiAgICAgIFwiaHByZWdlbnBlcmxldmVsXCI6IDAuNjUsXG4gICAgICBcIm1wcmVnZW5cIjogOC4wOSxcbiAgICAgIFwibXByZWdlbnBlcmxldmVsXCI6IDAuNjUsXG4gICAgICBcImNyaXRcIjogMCxcbiAgICAgIFwiY3JpdHBlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja2RhbWFnZVwiOiA1OS41NDQsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDMuMyxcbiAgICAgIFwiYXR0YWNrc3BlZWRvZmZzZXRcIjogLTAuMDUsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMi42N1xuICAgIH0sXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9jaGFtcGlvbi9Wb2xpYmVhci5wbmdcIixcbiAgICBcInNwcml0ZVwiOiB7XG4gICAgICBcInVybFwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvc3ByaXRlL2NoYW1waW9uNC5wbmdcIixcbiAgICAgIFwieFwiOiAwLFxuICAgICAgXCJ5XCI6IDBcbiAgICB9LFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgdW5mb3JnaXZpbmcgbm9ydGhlcm4gcmVhY2hlcyBvZiB0aGUgRnJlbGpvcmQgYXJlIGhvbWUgdG8gdGhlIFVyc2luZSwgYSBmaWVyY2UgYW5kIHdhcmxpa2UgcmFjZSB0aGF0IGhhcyBlbmR1cmVkIHRoZSBiYXJyZW4gdHVuZHJhIGZvciB0aG91c2FuZHMgb2YgeWVhcnMuIFRoZWlyIGxlYWRlciBpcyBhIGZ1cmlvdXMgYWR2ZXJzYXJ5IHdobyBjb21tYW5kcyB0aGUgZm9yY2Ugb2YgbGlnaHRuaW5nIHRvIHN0cmlrZSBmZWFyIHdpdGhpbiAuLi5cIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcIndhcndpY2tcIixcbiAgICBcImtleVwiOiBcIjE5XCIsXG4gICAgXCJuYW1lXCI6IFwiV2Fyd2lja1wiLFxuICAgIFwidGl0bGVcIjogXCJ0aGUgQmxvb2QgSHVudGVyXCIsXG4gICAgXCJ0YWdzXCI6IFtcbiAgICAgIFwiRmlnaHRlclwiLFxuICAgICAgXCJUYW5rXCJcbiAgICBdLFxuICAgIFwic3RhdHNcIjoge1xuICAgICAgXCJocFwiOiA1OTIuNjQsXG4gICAgICBcImhwcGVybGV2ZWxcIjogOTgsXG4gICAgICBcIm1wXCI6IDI0MC40LFxuICAgICAgXCJtcHBlcmxldmVsXCI6IDMwLFxuICAgICAgXCJtb3Zlc3BlZWRcIjogMzQ1LFxuICAgICAgXCJhcm1vclwiOiAyNS44OCxcbiAgICAgIFwiYXJtb3JwZXJsZXZlbFwiOiAzLjUsXG4gICAgICBcInNwZWxsYmxvY2tcIjogMzIuMSxcbiAgICAgIFwic3BlbGxibG9ja3BlcmxldmVsXCI6IDEuMjUsXG4gICAgICBcImF0dGFja3JhbmdlXCI6IDEyNSxcbiAgICAgIFwiaHByZWdlblwiOiA4LjM5LFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC44LFxuICAgICAgXCJtcHJlZ2VuXCI6IDguMTA1LFxuICAgICAgXCJtcHJlZ2VucGVybGV2ZWxcIjogMC42LFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNjIuNDMsXG4gICAgICBcImF0dGFja2RhbWFnZXBlcmxldmVsXCI6IDMuMzc1LFxuICAgICAgXCJhdHRhY2tzcGVlZG9mZnNldFwiOiAtMC4wOCxcbiAgICAgIFwiYXR0YWNrc3BlZWRwZXJsZXZlbFwiOiAyLjg4XG4gICAgfSxcbiAgICBcImljb25cIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL2NoYW1waW9uL1dhcndpY2sucG5nXCIsXG4gICAgXCJzcHJpdGVcIjoge1xuICAgICAgXCJ1cmxcIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3Nwcml0ZS9jaGFtcGlvbjQucG5nXCIsXG4gICAgICBcInhcIjogNDgsXG4gICAgICBcInlcIjogMFxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIldhcndpY2sgd2FzIG9uY2UgYSBtYW4gcmV2ZXJlZCBmb3IgaGlzIGFiaWxpdHkgdG8gdHJhY2sgZG93biBodW1hbiBzcGVjaW1lbnMgZm9yIHRoZSBkYXJrZXN0IHR5cGVzIG9mIHNjaWVudGlmaWMgcmVzZWFyY2guIFdoZW4gaGlzIGFtYml0aW9ucyBleGNlZWRlZCBoaXMgcGh5c2ljYWwgbGltaXRzLCBoZSBkcmFuayBhIGRhbmdlcm91cyBlbGl4aXIgdG8gdHJhbnNmb3JtIGhpbXNlbGYgaW50byBhbiB1bnN0b3BwYWJsZSBtYW5odW50ZXIuIC4uLlwiXG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwieGVyYXRoXCIsXG4gICAgXCJrZXlcIjogXCIxMDFcIixcbiAgICBcIm5hbWVcIjogXCJYZXJhdGhcIixcbiAgICBcInRpdGxlXCI6IFwidGhlIE1hZ3VzIEFzY2VuZGFudFwiLFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcIk1hZ2VcIixcbiAgICAgIFwiQXNzYXNzaW5cIlxuICAgIF0sXG4gICAgXCJzdGF0c1wiOiB7XG4gICAgICBcImhwXCI6IDUxNC40LFxuICAgICAgXCJocHBlcmxldmVsXCI6IDgwLFxuICAgICAgXCJtcFwiOiAzNjYuOTYsXG4gICAgICBcIm1wcGVybGV2ZWxcIjogNDQsXG4gICAgICBcIm1vdmVzcGVlZFwiOiAzNDAsXG4gICAgICBcImFybW9yXCI6IDIxLjg4LFxuICAgICAgXCJhcm1vcnBlcmxldmVsXCI6IDMuNSxcbiAgICAgIFwic3BlbGxibG9ja1wiOiAzMCxcbiAgICAgIFwic3BlbGxibG9ja3BlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja3JhbmdlXCI6IDUyNSxcbiAgICAgIFwiaHByZWdlblwiOiA1LjQyLFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC41NSxcbiAgICAgIFwibXByZWdlblwiOiA2LFxuICAgICAgXCJtcHJlZ2VucGVybGV2ZWxcIjogMC44LFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNTQuNyxcbiAgICAgIFwiYXR0YWNrZGFtYWdlcGVybGV2ZWxcIjogMyxcbiAgICAgIFwiYXR0YWNrc3BlZWRvZmZzZXRcIjogMCxcbiAgICAgIFwiYXR0YWNrc3BlZWRwZXJsZXZlbFwiOiAxLjM2XG4gICAgfSxcbiAgICBcImljb25cIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL2NoYW1waW9uL1hlcmF0aC5wbmdcIixcbiAgICBcInNwcml0ZVwiOiB7XG4gICAgICBcInVybFwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvc3ByaXRlL2NoYW1waW9uNC5wbmdcIixcbiAgICAgIFwieFwiOiA5NixcbiAgICAgIFwieVwiOiAwXG4gICAgfSxcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiJydBIGxpZmV0aW1lIGFzIGEgc2xhdmUgaGFzIHByZXBhcmVkIG1lIGZvciBldGVybml0eSBhcyB5b3VyIG1hc3Rlci4nJzxicj48YnI+WGVyYXRoIGlzIGFuIEFzY2VuZGVkIE1hZ3VzIG9mIGFuY2llbnQgU2h1cmltYSwgYSBiZWluZyBvZiBhcmNhbmUgZW5lcmd5IHdyaXRoaW5nIGluIHRoZSBicm9rZW4gc2hhcmRzIG9mIGEgbWFnaWNhbCBzYXJjb3BoYWd1cy4gRm9yIG1pbGxlbm5pYSwgaGUgd2FzIHRyYXBwZWQgYmVuZWF0aCB0aGUgLi4uXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJ4aW56aGFvXCIsXG4gICAgXCJrZXlcIjogXCI1XCIsXG4gICAgXCJuYW1lXCI6IFwiWGluIFpoYW9cIixcbiAgICBcInRpdGxlXCI6IFwidGhlIFNlbmVzY2hhbCBvZiBEZW1hY2lhXCIsXG4gICAgXCJ0YWdzXCI6IFtcbiAgICAgIFwiRmlnaHRlclwiLFxuICAgICAgXCJBc3Nhc3NpblwiXG4gICAgXSxcbiAgICBcInN0YXRzXCI6IHtcbiAgICAgIFwiaHBcIjogNjAwLFxuICAgICAgXCJocHBlcmxldmVsXCI6IDkyLFxuICAgICAgXCJtcFwiOiAyNzMuOCxcbiAgICAgIFwibXBwZXJsZXZlbFwiOiAzNSxcbiAgICAgIFwibW92ZXNwZWVkXCI6IDM0NSxcbiAgICAgIFwiYXJtb3JcIjogMjUuODgsXG4gICAgICBcImFybW9ycGVybGV2ZWxcIjogMy41LFxuICAgICAgXCJzcGVsbGJsb2NrXCI6IDMyLjEsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAxLjI1LFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiAxNzUsXG4gICAgICBcImhwcmVnZW5cIjogOC4xNzUsXG4gICAgICBcImhwcmVnZW5wZXJsZXZlbFwiOiAwLjcsXG4gICAgICBcIm1wcmVnZW5cIjogNy4yNTUsXG4gICAgICBcIm1wcmVnZW5wZXJsZXZlbFwiOiAwLjQ1LFxuICAgICAgXCJjcml0XCI6IDAsXG4gICAgICBcImNyaXRwZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tkYW1hZ2VcIjogNTcuNTQ0LFxuICAgICAgXCJhdHRhY2tkYW1hZ2VwZXJsZXZlbFwiOiAzLjMsXG4gICAgICBcImF0dGFja3NwZWVkb2Zmc2V0XCI6IDAsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMi42XG4gICAgfSxcbiAgICBcImljb25cIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL2NoYW1waW9uL1hpblpoYW8ucG5nXCIsXG4gICAgXCJzcHJpdGVcIjoge1xuICAgICAgXCJ1cmxcIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3Nwcml0ZS9jaGFtcGlvbjQucG5nXCIsXG4gICAgICBcInhcIjogMTQ0LFxuICAgICAgXCJ5XCI6IDBcbiAgICB9LFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCInJ0RlYXRoIGlzIGluZXZpdGFibGUsIG9uZSBjYW4gb25seSBhdm9pZCBkZWZlYXQuJyc8YnI+PGJyPldoZW5ldmVyIEphcnZhbiBJSUksIHRoZSBraW5nIG9mIERlbWFjaWEsIGRlbGl2ZXJzIG9uZSBvZiBoaXMgcmFsbHlpbmcgc3BlZWNoZXMgZnJvbSB0aGUgZ2xpbnRpbmcgbWFyYmxlIGJhbGNvbnkgYXRvcCB0aGUgUm95YWwgUGFsYWNlLCBYaW4gWmhhbyBpcyBhdCBoaXMgc2lkZS4gQ29pbmVkIHRoZSBTZW5lc2NoYWwgb2YgRGVtYWNpYSwuLi5cIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcInlhc3VvXCIsXG4gICAgXCJrZXlcIjogXCIxNTdcIixcbiAgICBcIm5hbWVcIjogXCJZYXN1b1wiLFxuICAgIFwidGl0bGVcIjogXCJ0aGUgVW5mb3JnaXZlblwiLFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcIkZpZ2h0ZXJcIixcbiAgICAgIFwiQXNzYXNzaW5cIlxuICAgIF0sXG4gICAgXCJzdGF0c1wiOiB7XG4gICAgICBcImhwXCI6IDUxNy43NixcbiAgICAgIFwiaHBwZXJsZXZlbFwiOiA4MixcbiAgICAgIFwibXBcIjogMTAwLFxuICAgICAgXCJtcHBlcmxldmVsXCI6IDAsXG4gICAgICBcIm1vdmVzcGVlZFwiOiAzNDUsXG4gICAgICBcImFybW9yXCI6IDI0LjcxMixcbiAgICAgIFwiYXJtb3JwZXJsZXZlbFwiOiAzLjQsXG4gICAgICBcInNwZWxsYmxvY2tcIjogMzAsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiAxNzUsXG4gICAgICBcImhwcmVnZW5cIjogNi41MSxcbiAgICAgIFwiaHByZWdlbnBlcmxldmVsXCI6IDAuOSxcbiAgICAgIFwibXByZWdlblwiOiAwLFxuICAgICAgXCJtcHJlZ2VucGVybGV2ZWxcIjogMCxcbiAgICAgIFwiY3JpdFwiOiAwLFxuICAgICAgXCJjcml0cGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlXCI6IDU1LjM3NixcbiAgICAgIFwiYXR0YWNrZGFtYWdlcGVybGV2ZWxcIjogMy4yLFxuICAgICAgXCJhdHRhY2tzcGVlZG9mZnNldFwiOiAtMC4wNjcsXG4gICAgICBcImF0dGFja3NwZWVkcGVybGV2ZWxcIjogMi41XG4gICAgfSxcbiAgICBcImljb25cIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL2NoYW1waW9uL1lhc3VvLnBuZ1wiLFxuICAgIFwic3ByaXRlXCI6IHtcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcHJpdGUvY2hhbXBpb240LnBuZ1wiLFxuICAgICAgXCJ4XCI6IDE5MixcbiAgICAgIFwieVwiOiAwXG4gICAgfSxcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiWWFzdW8gaXMgYSBtYW4gb2YgcmVzb2x2ZSwgYW4gYWdpbGUgc3dvcmRzbWFuIHdobyB3aWVsZHMgdGhlIHdpbmQgaXRzZWxmIHRvIGN1dCBkb3duIGhpcyBmb2VzLiBUaGlzIG9uY2UtcHJvdWQgd2FycmlvciBoYXMgYmVlbiBkaXNncmFjZWQgYnkgYSBmYWxzZSBhY2N1c2F0aW9uIGFuZCBmb3JjZWQgaW50byBhIGRlc3BlcmF0ZSBmaWdodCBmb3Igc3Vydml2YWwuIFdpdGggdGhlIHdvcmxkIHR1cm5lZCBhZ2FpbnN0IGhpbSwgaGUgd2lsbCAuLi5cIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcInlvcmlja1wiLFxuICAgIFwia2V5XCI6IFwiODNcIixcbiAgICBcIm5hbWVcIjogXCJZb3JpY2tcIixcbiAgICBcInRpdGxlXCI6IFwiU2hlcGhlcmQgb2YgU291bHNcIixcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJGaWdodGVyXCIsXG4gICAgICBcIlRhbmtcIlxuICAgIF0sXG4gICAgXCJzdGF0c1wiOiB7XG4gICAgICBcImhwXCI6IDU4MCxcbiAgICAgIFwiaHBwZXJsZXZlbFwiOiAxMDAsXG4gICAgICBcIm1wXCI6IDMwMCxcbiAgICAgIFwibXBwZXJsZXZlbFwiOiA0MCxcbiAgICAgIFwibW92ZXNwZWVkXCI6IDM0MCxcbiAgICAgIFwiYXJtb3JcIjogMzAsXG4gICAgICBcImFybW9ycGVybGV2ZWxcIjogNCxcbiAgICAgIFwic3BlbGxibG9ja1wiOiAzMixcbiAgICAgIFwic3BlbGxibG9ja3BlcmxldmVsXCI6IDEuMjUsXG4gICAgICBcImF0dGFja3JhbmdlXCI6IDE3NSxcbiAgICAgIFwiaHByZWdlblwiOiA4LFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC44LFxuICAgICAgXCJtcHJlZ2VuXCI6IDcuNSxcbiAgICAgIFwibXByZWdlbnBlcmxldmVsXCI6IDAuNzUsXG4gICAgICBcImNyaXRcIjogMCxcbiAgICAgIFwiY3JpdHBlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja2RhbWFnZVwiOiA1NyxcbiAgICAgIFwiYXR0YWNrZGFtYWdlcGVybGV2ZWxcIjogNSxcbiAgICAgIFwiYXR0YWNrc3BlZWRvZmZzZXRcIjogMCxcbiAgICAgIFwiYXR0YWNrc3BlZWRwZXJsZXZlbFwiOiAyXG4gICAgfSxcbiAgICBcImljb25cIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL2NoYW1waW9uL1lvcmljay5wbmdcIixcbiAgICBcInNwcml0ZVwiOiB7XG4gICAgICBcInVybFwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvc3ByaXRlL2NoYW1waW9uNC5wbmdcIixcbiAgICAgIFwieFwiOiAyNDAsXG4gICAgICBcInlcIjogMFxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIicnVGhlc2UgaXNsZXPigKYgSG93IHRoZXkgc2NyZWFtLicnPGJyPlRoZSBsYXN0IHN1cnZpdm9yIG9mIGEgbG9uZy1mb3Jnb3R0ZW4gcmVsaWdpb3VzIG9yZGVyLCBZb3JpY2sgaXMgYm90aCBibGVzc2VkIGFuZCBjdXJzZWQgd2l0aCBwb3dlciBvdmVyIHRoZSBkZWFkLiBUcmFwcGVkIG9uIHRoZSBTaGFkb3cgSXNsZXMsIGhpcyBvbmx5IGNvbXBhbmlvbnMgYXJlIHRoZSByb3R0aW5nIGNvcnBzZXMgYW5kIHNocmlla2luZyBzcGlyaXRzIHRoYXQgLi4uXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJ6YWNcIixcbiAgICBcImtleVwiOiBcIjE1NFwiLFxuICAgIFwibmFtZVwiOiBcIlphY1wiLFxuICAgIFwidGl0bGVcIjogXCJ0aGUgU2VjcmV0IFdlYXBvblwiLFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcIlRhbmtcIixcbiAgICAgIFwiRmlnaHRlclwiXG4gICAgXSxcbiAgICBcInN0YXRzXCI6IHtcbiAgICAgIFwiaHBcIjogNjE0LjYsXG4gICAgICBcImhwcGVybGV2ZWxcIjogOTUsXG4gICAgICBcIm1wXCI6IDAsXG4gICAgICBcIm1wcGVybGV2ZWxcIjogMCxcbiAgICAgIFwibW92ZXNwZWVkXCI6IDM0MCxcbiAgICAgIFwiYXJtb3JcIjogMjMuODgsXG4gICAgICBcImFybW9ycGVybGV2ZWxcIjogMy41LFxuICAgICAgXCJzcGVsbGJsb2NrXCI6IDMyLjEsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAxLjI1LFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiAxNzUsXG4gICAgICBcImhwcmVnZW5cIjogNy45MixcbiAgICAgIFwiaHByZWdlbnBlcmxldmVsXCI6IDAuNTUsXG4gICAgICBcIm1wcmVnZW5cIjogMCxcbiAgICAgIFwibXByZWdlbnBlcmxldmVsXCI6IDAsXG4gICAgICBcImNyaXRcIjogMCxcbiAgICAgIFwiY3JpdHBlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja2RhbWFnZVwiOiA1OS42NyxcbiAgICAgIFwiYXR0YWNrZGFtYWdlcGVybGV2ZWxcIjogMy4zNzUsXG4gICAgICBcImF0dGFja3NwZWVkb2Zmc2V0XCI6IC0wLjAyLFxuICAgICAgXCJhdHRhY2tzcGVlZHBlcmxldmVsXCI6IDEuNlxuICAgIH0sXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9jaGFtcGlvbi9aYWMucG5nXCIsXG4gICAgXCJzcHJpdGVcIjoge1xuICAgICAgXCJ1cmxcIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3Nwcml0ZS9jaGFtcGlvbjQucG5nXCIsXG4gICAgICBcInhcIjogMjg4LFxuICAgICAgXCJ5XCI6IDBcbiAgICB9LFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJaYWMgaXMgdGhlIHByb2R1Y3Qgb2YgYSBaYXVuIGV4cGVyaW1lbnQgdG8gbWFudWZhY3R1cmUgYSBoZXhjaGVtLWVuZ2luZWVyZWQgc3VwZXJzb2xkaWVyIC0gdGhlIFphdW4gQW1vcnBob3VzIENvbWJhdGFudC4gQ29tYmluaW5nIGJydXRlIHN0cmVuZ3RoIHdpdGggbGltaXRsZXNzIGZsZXhpYmlsaXR5LCBoZSBpcyBhIHZlcnNhdGlsZSBqdWdnZXJuYXV0OiBhIGNyZWF0aXZlIGZpZ2h0ZXIgd2hvIGJvdW5jZXMgb3ZlciBvYnN0YWNsZXMgLi4uXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJ6ZWRcIixcbiAgICBcImtleVwiOiBcIjIzOFwiLFxuICAgIFwibmFtZVwiOiBcIlplZFwiLFxuICAgIFwidGl0bGVcIjogXCJ0aGUgTWFzdGVyIG9mIFNoYWRvd3NcIixcbiAgICBcInRhZ3NcIjogW1xuICAgICAgXCJBc3Nhc3NpblwiLFxuICAgICAgXCJGaWdodGVyXCJcbiAgICBdLFxuICAgIFwic3RhdHNcIjoge1xuICAgICAgXCJocFwiOiA1NzkuNCxcbiAgICAgIFwiaHBwZXJsZXZlbFwiOiA4MCxcbiAgICAgIFwibXBcIjogMjAwLFxuICAgICAgXCJtcHBlcmxldmVsXCI6IDAsXG4gICAgICBcIm1vdmVzcGVlZFwiOiAzNDUsXG4gICAgICBcImFybW9yXCI6IDI2Ljg4LFxuICAgICAgXCJhcm1vcnBlcmxldmVsXCI6IDMuNSxcbiAgICAgIFwic3BlbGxibG9ja1wiOiAzMi4xLFxuICAgICAgXCJzcGVsbGJsb2NrcGVybGV2ZWxcIjogMS4yNSxcbiAgICAgIFwiYXR0YWNrcmFuZ2VcIjogMTI1LFxuICAgICAgXCJocHJlZ2VuXCI6IDcuMDksXG4gICAgICBcImhwcmVnZW5wZXJsZXZlbFwiOiAwLjY1LFxuICAgICAgXCJtcHJlZ2VuXCI6IDUwLFxuICAgICAgXCJtcHJlZ2VucGVybGV2ZWxcIjogMCxcbiAgICAgIFwiY3JpdFwiOiAwLFxuICAgICAgXCJjcml0cGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlXCI6IDU0LjcxMixcbiAgICAgIFwiYXR0YWNrZGFtYWdlcGVybGV2ZWxcIjogMy40LFxuICAgICAgXCJhdHRhY2tzcGVlZG9mZnNldFwiOiAtMC4wMyxcbiAgICAgIFwiYXR0YWNrc3BlZWRwZXJsZXZlbFwiOiAyLjFcbiAgICB9LFxuICAgIFwiaWNvblwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvY2hhbXBpb24vWmVkLnBuZ1wiLFxuICAgIFwic3ByaXRlXCI6IHtcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcHJpdGUvY2hhbXBpb240LnBuZ1wiLFxuICAgICAgXCJ4XCI6IDMzNixcbiAgICAgIFwieVwiOiAwXG4gICAgfSxcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiWmVkIGlzIHRoZSBmaXJzdCBuaW5qYSBpbiAyMDAgeWVhcnMgdG8gdW5sb2NrIHRoZSBhbmNpZW50LCBmb3JiaWRkZW4gd2F5cy4gSGUgZGVmaWVkIGhpcyBjbGFuIGFuZCBtYXN0ZXIsIGNhc3Rpbmcgb2ZmIHRoZSBiYWxhbmNlIGFuZCBkaXNjaXBsaW5lIHRoYXQgaGFkIHNoYWNrbGVkIGhpbSBhbGwgaGlzIGxpZmUuIFplZCBub3cgb2ZmZXJzIHBvd2VyIHRvIHRob3NlIHdobyBlbWJyYWNlIGtub3dsZWRnZSBvZiB0aGUgc2hhZG93cywgLi4uXCJcbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJ6aWdnc1wiLFxuICAgIFwia2V5XCI6IFwiMTE1XCIsXG4gICAgXCJuYW1lXCI6IFwiWmlnZ3NcIixcbiAgICBcInRpdGxlXCI6IFwidGhlIEhleHBsb3NpdmVzIEV4cGVydFwiLFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcIk1hZ2VcIlxuICAgIF0sXG4gICAgXCJzdGF0c1wiOiB7XG4gICAgICBcImhwXCI6IDUyNC40LFxuICAgICAgXCJocHBlcmxldmVsXCI6IDgwLFxuICAgICAgXCJtcFwiOiAzODQsXG4gICAgICBcIm1wcGVybGV2ZWxcIjogNDcsXG4gICAgICBcIm1vdmVzcGVlZFwiOiAzMjUsXG4gICAgICBcImFybW9yXCI6IDIxLjU0NCxcbiAgICAgIFwiYXJtb3JwZXJsZXZlbFwiOiAzLjMsXG4gICAgICBcInNwZWxsYmxvY2tcIjogMzAsXG4gICAgICBcInNwZWxsYmxvY2twZXJsZXZlbFwiOiAwLFxuICAgICAgXCJhdHRhY2tyYW5nZVwiOiA1NTAsXG4gICAgICBcImhwcmVnZW5cIjogNi4yNTUsXG4gICAgICBcImhwcmVnZW5wZXJsZXZlbFwiOiAwLjYsXG4gICAgICBcIm1wcmVnZW5cIjogNixcbiAgICAgIFwibXByZWdlbnBlcmxldmVsXCI6IDAuOCxcbiAgICAgIFwiY3JpdFwiOiAwLFxuICAgICAgXCJjcml0cGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlXCI6IDU0LjIwOCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlcGVybGV2ZWxcIjogMy4xLFxuICAgICAgXCJhdHRhY2tzcGVlZG9mZnNldFwiOiAtMC4wNDczNCxcbiAgICAgIFwiYXR0YWNrc3BlZWRwZXJsZXZlbFwiOiAyXG4gICAgfSxcbiAgICBcImljb25cIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL2NoYW1waW9uL1ppZ2dzLnBuZ1wiLFxuICAgIFwic3ByaXRlXCI6IHtcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcHJpdGUvY2hhbXBpb240LnBuZ1wiLFxuICAgICAgXCJ4XCI6IDM4NCxcbiAgICAgIFwieVwiOiAwXG4gICAgfSxcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiWmlnZ3Mgd2FzIGJvcm4gd2l0aCBhIHRhbGVudCBmb3IgdGlua2VyaW5nLCBidXQgaGlzIGNoYW90aWMsIGh5cGVyYWN0aXZlIG5hdHVyZSB3YXMgdW51c3VhbCBhbW9uZyB5b3JkbGUgc2NpZW50aXN0cy4gQXNwaXJpbmcgdG8gYmUgYSByZXZlcmVkIGludmVudG9yIGxpa2UgSGVpbWVyZGluZ2VyLCBoZSByYXR0bGVkIHRocm91Z2ggYW1iaXRpb3VzIHByb2plY3RzIHdpdGggbWFuaWMgemVhbCwgZW1ib2xkZW5lZCBieSBib3RoIGhpcyAuLi5cIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcInppbGVhblwiLFxuICAgIFwia2V5XCI6IFwiMjZcIixcbiAgICBcIm5hbWVcIjogXCJaaWxlYW5cIixcbiAgICBcInRpdGxlXCI6IFwidGhlIENocm9ub2tlZXBlclwiLFxuICAgIFwidGFnc1wiOiBbXG4gICAgICBcIlN1cHBvcnRcIixcbiAgICAgIFwiTWFnZVwiXG4gICAgXSxcbiAgICBcInN0YXRzXCI6IHtcbiAgICAgIFwiaHBcIjogNDk5LjI4LFxuICAgICAgXCJocHBlcmxldmVsXCI6IDc3LFxuICAgICAgXCJtcFwiOiAzNjAuOCxcbiAgICAgIFwibXBwZXJsZXZlbFwiOiA2MCxcbiAgICAgIFwibW92ZXNwZWVkXCI6IDMzNSxcbiAgICAgIFwiYXJtb3JcIjogMTkuMTM0LFxuICAgICAgXCJhcm1vcnBlcmxldmVsXCI6IDMuOCxcbiAgICAgIFwic3BlbGxibG9ja1wiOiAzMCxcbiAgICAgIFwic3BlbGxibG9ja3BlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja3JhbmdlXCI6IDU1MCxcbiAgICAgIFwiaHByZWdlblwiOiA1LjQ0LFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC41LFxuICAgICAgXCJtcHJlZ2VuXCI6IDguNSxcbiAgICAgIFwibXByZWdlbnBlcmxldmVsXCI6IDAuOCxcbiAgICAgIFwiY3JpdFwiOiAwLFxuICAgICAgXCJjcml0cGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlXCI6IDUxLjY0LFxuICAgICAgXCJhdHRhY2tkYW1hZ2VwZXJsZXZlbFwiOiAzLFxuICAgICAgXCJhdHRhY2tzcGVlZG9mZnNldFwiOiAwLFxuICAgICAgXCJhdHRhY2tzcGVlZHBlcmxldmVsXCI6IDIuMTNcbiAgICB9LFxuICAgIFwiaWNvblwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvY2hhbXBpb24vWmlsZWFuLnBuZ1wiLFxuICAgIFwic3ByaXRlXCI6IHtcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcHJpdGUvY2hhbXBpb240LnBuZ1wiLFxuICAgICAgXCJ4XCI6IDQzMixcbiAgICAgIFwieVwiOiAwXG4gICAgfSxcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiSW4gdGhlIHdhc3RlbGFuZHMgb2YgVXJ0aXN0YW4sIHRoZXJlIHdhcyBvbmNlIGEgZ3JlYXQgY2l0eS4gSXQgcGVyaXNoZWQgbG9uZyBhZ28gaW4gYSB0ZXJyaWJsZSBSdW5lIFdhciwgbGlrZSBtb3N0IG9mIHRoZSBsYW5kcyBiZWxvdyB0aGUgR3JlYXQgQmFycmllci4gTmV2ZXJ0aGVsZXNzLCBvbmUgbWFuIHN1cnZpdmVkOiBhIHNvcmNlcmVyIG5hbWVkIFppbGVhbi4gQmVpbmcgb2JzZXNzZWQgd2l0aCB0aW1lLCBpdCB3YXMgb25seSAuLi5cIlxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcInp5cmFcIixcbiAgICBcImtleVwiOiBcIjE0M1wiLFxuICAgIFwibmFtZVwiOiBcIlp5cmFcIixcbiAgICBcInRpdGxlXCI6IFwiUmlzZSBvZiB0aGUgVGhvcm5zXCIsXG4gICAgXCJ0YWdzXCI6IFtcbiAgICAgIFwiTWFnZVwiLFxuICAgICAgXCJTdXBwb3J0XCJcbiAgICBdLFxuICAgIFwic3RhdHNcIjoge1xuICAgICAgXCJocFwiOiA0OTkuMzIsXG4gICAgICBcImhwcGVybGV2ZWxcIjogNzQsXG4gICAgICBcIm1wXCI6IDMzNCxcbiAgICAgIFwibXBwZXJsZXZlbFwiOiA1MCxcbiAgICAgIFwibW92ZXNwZWVkXCI6IDM0MCxcbiAgICAgIFwiYXJtb3JcIjogMjAuMDQsXG4gICAgICBcImFybW9ycGVybGV2ZWxcIjogMyxcbiAgICAgIFwic3BlbGxibG9ja1wiOiAzMCxcbiAgICAgIFwic3BlbGxibG9ja3BlcmxldmVsXCI6IDAsXG4gICAgICBcImF0dGFja3JhbmdlXCI6IDU3NSxcbiAgICAgIFwiaHByZWdlblwiOiA1LjY5LFxuICAgICAgXCJocHJlZ2VucGVybGV2ZWxcIjogMC41LFxuICAgICAgXCJtcHJlZ2VuXCI6IDguNSxcbiAgICAgIFwibXByZWdlbnBlcmxldmVsXCI6IDAuOCxcbiAgICAgIFwiY3JpdFwiOiAwLFxuICAgICAgXCJjcml0cGVybGV2ZWxcIjogMCxcbiAgICAgIFwiYXR0YWNrZGFtYWdlXCI6IDUzLjM3NixcbiAgICAgIFwiYXR0YWNrZGFtYWdlcGVybGV2ZWxcIjogMy4yLFxuICAgICAgXCJhdHRhY2tzcGVlZG9mZnNldFwiOiAwLFxuICAgICAgXCJhdHRhY2tzcGVlZHBlcmxldmVsXCI6IDIuMTFcbiAgICB9LFxuICAgIFwiaWNvblwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvY2hhbXBpb24vWnlyYS5wbmdcIixcbiAgICBcInNwcml0ZVwiOiB7XG4gICAgICBcInVybFwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvc3ByaXRlL2NoYW1waW9uNC5wbmdcIixcbiAgICAgIFwieFwiOiAwLFxuICAgICAgXCJ5XCI6IDQ4XG4gICAgfSxcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiTG9uZ2luZyB0byB0YWtlIGNvbnRyb2wgb2YgaGVyIGZhdGUsIHRoZSBhbmNpZW50LCBkeWluZyBwbGFudCBaeXJhIHRyYW5zZmVycmVkIGhlciBjb25zY2lvdXNuZXNzIGludG8gYSBodW1hbiBib2R5IGZvciBhIHNlY29uZCBjaGFuY2UgYXQgbGlmZS4gQ2VudHVyaWVzIGFnbywgc2hlIGFuZCBoZXIga2luZCBkb21pbmF0ZWQgdGhlIEt1bXVuZ3UgSnVuZ2xlLCB1c2luZyB0aG9ybnMgYW5kIHZpbmVzIHRvIGNvbnN1bWUgYW55IGFuaW1hbCAuLi5cIlxuICB9XG5dIiwibW9kdWxlLmV4cG9ydHM9W1xuICB7XG4gICAgXCJpZFwiOiBcImJhcnJpZXJcIixcbiAgICBcIm5hbWVcIjogXCJCYXJyaWVyXCIsXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIlNoaWVsZHMgeW91ciBjaGFtcGlvbiBmcm9tIDExNS00NTUgZGFtYWdlIChkZXBlbmRpbmcgb24gY2hhbXBpb24gbGV2ZWwpIGZvciAyIHNlY29uZHMuXCIsXG4gICAgXCJ0b29sdGlwXCI6IFwiVGVtcG9yYXJpbHkgc2hpZWxkcyB7eyBmMSB9fSBkYW1hZ2UgZnJvbSB5b3VyIGNoYW1waW9uIGZvciAyIHNlY29uZHMuXCIsXG4gICAgXCJjb29sZG93blwiOiAxODAsXG4gICAgXCJrZXlcIjogXCIyMVwiLFxuICAgIFwic3VtbW9uZXJMZXZlbFwiOiA0LFxuICAgIFwibWF4YW1tb1wiOiBcIi0xXCIsXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcGVsbC9TdW1tb25lckJhcnJpZXIucG5nXCIsXG4gICAgXCJzcHJpdGVcIjoge1xuICAgICAgXCJ1cmxcIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3Nwcml0ZS9zcGVsbDAucG5nXCIsXG4gICAgICBcInhcIjogMCxcbiAgICAgIFwieVwiOiAwXG4gICAgfVxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcImJvb3N0XCIsXG4gICAgXCJuYW1lXCI6IFwiQ2xlYW5zZVwiLFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJSZW1vdmVzIGFsbCBkaXNhYmxlcyBhbmQgc3VtbW9uZXIgc3BlbGwgZGVidWZmcyBhZmZlY3RpbmcgeW91ciBjaGFtcGlvbiBhbmQgbG93ZXJzIHRoZSBkdXJhdGlvbiBvZiBpbmNvbWluZyBkaXNhYmxlcyBieSA2NSUgZm9yIDMgc2Vjb25kcy5cIixcbiAgICBcInRvb2x0aXBcIjogXCJSZW1vdmVzIGFsbCBkaXNhYmxlcyBhbmQgc3VtbW9uZXIgc3BlbGwgZGVidWZmcyBhZmZlY3RpbmcgeW91ciBjaGFtcGlvbiBhbmQgcmVkdWNlcyB0aGUgZHVyYXRpb24gb2YgZGlzYWJsZXMgYnkgNjUlIGZvciB0aGUgbmV4dCB7eyBmMSB9fSBzZWNvbmRzLlwiLFxuICAgIFwiY29vbGRvd25cIjogMjEwLFxuICAgIFwia2V5XCI6IFwiMVwiLFxuICAgIFwic3VtbW9uZXJMZXZlbFwiOiA2LFxuICAgIFwibWF4YW1tb1wiOiBcIi0xXCIsXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcGVsbC9TdW1tb25lckJvb3N0LnBuZ1wiLFxuICAgIFwic3ByaXRlXCI6IHtcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcHJpdGUvc3BlbGwwLnBuZ1wiLFxuICAgICAgXCJ4XCI6IDQ4LFxuICAgICAgXCJ5XCI6IDBcbiAgICB9XG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwiZG90XCIsXG4gICAgXCJuYW1lXCI6IFwiSWduaXRlXCIsXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIklnbml0ZXMgdGFyZ2V0IGVuZW15IGNoYW1waW9uLCBkZWFsaW5nIDcwLTQxMCB0cnVlIGRhbWFnZSAoZGVwZW5kaW5nIG9uIGNoYW1waW9uIGxldmVsKSBvdmVyIDUgc2Vjb25kcywgZ3JhbnRzIHlvdSB2aXNpb24gb2YgdGhlIHRhcmdldCwgYW5kIHJlZHVjZXMgaGVhbGluZyBlZmZlY3RzIG9uIHRoZW0gZm9yIHRoZSBkdXJhdGlvbi5cIixcbiAgICBcInRvb2x0aXBcIjogXCJJZ25pdGUgZGVhbHMgPHNwYW4gY2xhc3M9XFxcImNvbG9yRkVGQ0ZGXFxcIj57eyBmMSB9fTwvc3Bhbj4gdHJ1ZSBkYW1hZ2UgdG8gdGFyZ2V0IGVuZW15IGNoYW1waW9uIG92ZXIgNSBzZWNvbmRzLCBncmFudHMgeW91IHZpc2lvbiBvZiB0aGUgdGFyZ2V0IGFuZCBhcHBsaWVzIEdyaWV2b3VzIFdvdW5kcyBmb3IgdGhlIGR1cmF0aW9uLjxicj48YnI+PGk+KEdyaWV2b3VzIFdvdW5kcyByZWR1Y2VzIGhlYWxpbmcgZWZmZWN0cyBieSA0MCUuIFRoaXMgdmlzaW9uIGRvZXMgbm90IHJldmVhbCBzdGVhbHRoZWQgZW5lbWllcy4pPC9pPlwiLFxuICAgIFwiY29vbGRvd25cIjogMjEwLFxuICAgIFwia2V5XCI6IFwiMTRcIixcbiAgICBcInN1bW1vbmVyTGV2ZWxcIjogMTAsXG4gICAgXCJtYXhhbW1vXCI6IFwiLTFcIixcbiAgICBcImljb25cIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3NwZWxsL1N1bW1vbmVyRG90LnBuZ1wiLFxuICAgIFwic3ByaXRlXCI6IHtcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcHJpdGUvc3BlbGwwLnBuZ1wiLFxuICAgICAgXCJ4XCI6IDE0NCxcbiAgICAgIFwieVwiOiAwXG4gICAgfVxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcImV4aGF1c3RcIixcbiAgICBcIm5hbWVcIjogXCJFeGhhdXN0XCIsXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIkV4aGF1c3RzIHRhcmdldCBlbmVteSBjaGFtcGlvbiwgcmVkdWNpbmcgdGhlaXIgTW92ZW1lbnQgU3BlZWQgYW5kIEF0dGFjayBTcGVlZCBieSAzMCUsIHRoZWlyIEFybW9yIGFuZCBNYWdpYyBSZXNpc3QgYnkgMTAsIGFuZCB0aGVpciBkYW1hZ2UgZGVhbHQgYnkgNDAlIGZvciAyLjUgc2Vjb25kcy5cIixcbiAgICBcInRvb2x0aXBcIjogXCJFeGhhdXN0cyB0YXJnZXQgZW5lbXkgY2hhbXBpb24sIHJlZHVjaW5nIHRoZWlyIE1vdmVtZW50IFNwZWVkIGFuZCBBdHRhY2sgU3BlZWQgYnkge3sgZjMgfX0lLCB0aGVpciBBcm1vciBhbmQgTWFnaWMgUmVzaXN0IGJ5IHt7IGY0IH19LCBhbmQgdGhlaXIgZGFtYWdlIGRlYWx0IGJ5IHt7IGYyIH19JSBmb3IgMi41IHNlY29uZHMuXCIsXG4gICAgXCJjb29sZG93blwiOiAyMTAsXG4gICAgXCJrZXlcIjogXCIzXCIsXG4gICAgXCJzdW1tb25lckxldmVsXCI6IDQsXG4gICAgXCJtYXhhbW1vXCI6IFwiLTFcIixcbiAgICBcImljb25cIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3NwZWxsL1N1bW1vbmVyRXhoYXVzdC5wbmdcIixcbiAgICBcInNwcml0ZVwiOiB7XG4gICAgICBcInVybFwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvc3ByaXRlL3NwZWxsMC5wbmdcIixcbiAgICAgIFwieFwiOiAxOTIsXG4gICAgICBcInlcIjogMFxuICAgIH1cbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJmbGFzaFwiLFxuICAgIFwibmFtZVwiOiBcIkZsYXNoXCIsXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIlRlbGVwb3J0cyB5b3VyIGNoYW1waW9uIGEgc2hvcnQgZGlzdGFuY2UgdG93YXJkIHlvdXIgY3Vyc29yJ3MgbG9jYXRpb24uXCIsXG4gICAgXCJ0b29sdGlwXCI6IFwiVGVsZXBvcnRzIHlvdXIgY2hhbXBpb24gYSBzaG9ydCBkaXN0YW5jZSB0b3dhcmQgeW91ciBjdXJzb3IncyBsb2NhdGlvbi5cIixcbiAgICBcImNvb2xkb3duXCI6IDMwMCxcbiAgICBcImtleVwiOiBcIjRcIixcbiAgICBcInN1bW1vbmVyTGV2ZWxcIjogOCxcbiAgICBcIm1heGFtbW9cIjogXCItMVwiLFxuICAgIFwiaWNvblwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvc3BlbGwvU3VtbW9uZXJGbGFzaC5wbmdcIixcbiAgICBcInNwcml0ZVwiOiB7XG4gICAgICBcInVybFwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvc3ByaXRlL3NwZWxsMC5wbmdcIixcbiAgICAgIFwieFwiOiAyNDAsXG4gICAgICBcInlcIjogMFxuICAgIH1cbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJoYXN0ZVwiLFxuICAgIFwibmFtZVwiOiBcIkdob3N0XCIsXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIllvdXIgY2hhbXBpb24gY2FuIG1vdmUgdGhyb3VnaCB1bml0cyBhbmQgaGFzIDI4LTQ1JSAoZGVwZW5kaW5nIG9uIGNoYW1waW9uIGxldmVsKSBpbmNyZWFzZWQgTW92ZW1lbnQgU3BlZWQgZm9yIDEwIHNlY29uZHMuXCIsXG4gICAgXCJ0b29sdGlwXCI6IFwiWW91ciBjaGFtcGlvbiBjYW4gbW92ZSB0aHJvdWdoIHVuaXRzIGFuZCBoYXMge3sgZjEgfX0lIGluY3JlYXNlZCBNb3ZlbWVudCBTcGVlZCBmb3IgMTAgc2Vjb25kcy5cIixcbiAgICBcImNvb2xkb3duXCI6IDE4MCxcbiAgICBcImtleVwiOiBcIjZcIixcbiAgICBcInN1bW1vbmVyTGV2ZWxcIjogMSxcbiAgICBcIm1heGFtbW9cIjogXCItMVwiLFxuICAgIFwiaWNvblwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvc3BlbGwvU3VtbW9uZXJIYXN0ZS5wbmdcIixcbiAgICBcInNwcml0ZVwiOiB7XG4gICAgICBcInVybFwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvc3ByaXRlL3NwZWxsMC5wbmdcIixcbiAgICAgIFwieFwiOiAyODgsXG4gICAgICBcInlcIjogMFxuICAgIH1cbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJoZWFsXCIsXG4gICAgXCJuYW1lXCI6IFwiSGVhbFwiLFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJSZXN0b3JlcyA5MC0zNDUgSGVhbHRoIChkZXBlbmRpbmcgb24gY2hhbXBpb24gbGV2ZWwpIGFuZCBncmFudHMgMzAlIE1vdmVtZW50IFNwZWVkIGZvciAxIHNlY29uZCB0byB5b3UgYW5kIHRhcmdldCBhbGxpZWQgY2hhbXBpb24uIFRoaXMgaGVhbGluZyBpcyBoYWx2ZWQgZm9yIHVuaXRzIHJlY2VudGx5IGFmZmVjdGVkIGJ5IFN1bW1vbmVyIEhlYWwuXCIsXG4gICAgXCJ0b29sdGlwXCI6IFwiUmVzdG9yZXMge3sgZjEgfX0gSGVhbHRoIGFuZCBncmFudHMgMzAlIE1vdmVtZW50IFNwZWVkIGZvciAxIHNlY29uZCB0byB5b3VyIGNoYW1waW9uIGFuZCB0YXJnZXQgYWxsaWVkIGNoYW1waW9uLiBUaGlzIGhlYWxpbmcgaXMgaGFsdmVkIGZvciB1bml0cyByZWNlbnRseSBhZmZlY3RlZCBieSBTdW1tb25lciBIZWFsLjxicj48YnI+PHNwYW4gY2xhc3M9XFxcImNvbG9yRkZGRjAwXFxcIj5JZiB0aGlzIHNwZWxsIGNhbm5vdCBmaW5kIGEgdGFyZ2V0LCBpdCB3aWxsIGNhc3Qgb24gdGhlIG1vc3Qgd291bmRlZCBhbGxpZWQgY2hhbXBpb24gaW4gcmFuZ2UuPC9zcGFuPlwiLFxuICAgIFwiY29vbGRvd25cIjogMjQwLFxuICAgIFwia2V5XCI6IFwiN1wiLFxuICAgIFwic3VtbW9uZXJMZXZlbFwiOiAxLFxuICAgIFwibWF4YW1tb1wiOiBcIi0xXCIsXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcGVsbC9TdW1tb25lckhlYWwucG5nXCIsXG4gICAgXCJzcHJpdGVcIjoge1xuICAgICAgXCJ1cmxcIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3Nwcml0ZS9zcGVsbDAucG5nXCIsXG4gICAgICBcInhcIjogMzM2LFxuICAgICAgXCJ5XCI6IDBcbiAgICB9XG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwibWFuYVwiLFxuICAgIFwibmFtZVwiOiBcIkNsYXJpdHlcIixcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiUmVzdG9yZXMgNTAlIG9mIHlvdXIgY2hhbXBpb24ncyBtYXhpbXVtIE1hbmEuIEFsc28gcmVzdG9yZXMgYWxsaWVzIGZvciAyNSUgb2YgdGhlaXIgbWF4aW11bSBNYW5hLlwiLFxuICAgIFwidG9vbHRpcFwiOiBcIlJlc3RvcmVzIHt7IGYxIH19JSBtYXhpbXVtIE1hbmEgdG8geW91ciBDaGFtcGlvbiBhbmQge3sgZjIgfX0lIHRvIG5lYXJieSBhbGxpZXMuXCIsXG4gICAgXCJjb29sZG93blwiOiAyNDAsXG4gICAgXCJrZXlcIjogXCIxM1wiLFxuICAgIFwic3VtbW9uZXJMZXZlbFwiOiAxLFxuICAgIFwibWF4YW1tb1wiOiBcIi0xXCIsXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcGVsbC9TdW1tb25lck1hbmEucG5nXCIsXG4gICAgXCJzcHJpdGVcIjoge1xuICAgICAgXCJ1cmxcIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3Nwcml0ZS9zcGVsbDAucG5nXCIsXG4gICAgICBcInhcIjogMzg0LFxuICAgICAgXCJ5XCI6IDBcbiAgICB9XG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwicG9yb3JlY2FsbFwiLFxuICAgIFwibmFtZVwiOiBcIlRvIHRoZSBLaW5nIVwiLFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJRdWlja2x5IHRyYXZlbCB0byB0aGUgUG9ybyBLaW5nJ3Mgc2lkZS5cIixcbiAgICBcInRvb2x0aXBcIjogXCI8c3BhbiBjbGFzcz1cXFwiY29sb3JGRkUwNzZcXFwiPlBhc3NpdmU6PC9zcGFuPiBIaXR0aW5nIGFuIGVuZW15IGNoYW1waW9uIHdpdGggYSBQb3JvIGdpdmVzIHlvdXIgdGVhbSBhIFBvcm8gTWFyay4gVXBvbiByZWFjaGluZyAxMCBQb3JvIE1hcmtzLCB5b3VyIHRlYW0gc3VtbW9ucyB0aGUgUG9ybyBLaW5nIHRvIGZpZ2h0IGFsb25nc2lkZSB0aGVtLiBXaGlsZSB0aGUgUG9ybyBLaW5nIGlzIGFjdGl2ZSwgbm8gUG9ybyBNYXJrcyBjYW4gYmUgc2NvcmVkIGJ5IGVpdGhlciB0ZWFtLjxicj48YnI+PHNwYW4gY2xhc3M9XFxcImNvbG9yRkZFMDc2XFxcIj5BY3RpdmU6PC9zcGFuPiBRdWlja2x5IGRhc2ggdG8gS2luZyBQb3JvJ3Mgc2lkZS4gQ2FuIG9ubHkgYmUgY2FzdCB3aGlsZSB0aGUgUG9ybyBLaW5nIGlzIHN1bW1vbmVkIGZvciB5b3VyIHRlYW0uIDxicj48YnI+PGk+PHNwYW4gY2xhc3M9XFxcImNvbG9yRkREMDE3XFxcIj4nJ1Bvcm9zIHR1ZyB0aGUgaGVhcnRzdHJpbmdzLiBUaGUgcmVzdCBvZiB5b3UganVzdCBjb21lcyBhbG9uZyBmb3IgdGhlIHJpZGUuJyc8L3NwYW4+PC9pPlwiLFxuICAgIFwiY29vbGRvd25cIjogMTAsXG4gICAgXCJrZXlcIjogXCIzMFwiLFxuICAgIFwic3VtbW9uZXJMZXZlbFwiOiAxLFxuICAgIFwibWF4YW1tb1wiOiBcIi0xXCIsXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcGVsbC9TdW1tb25lclBvcm9SZWNhbGwucG5nXCIsXG4gICAgXCJzcHJpdGVcIjoge1xuICAgICAgXCJ1cmxcIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3Nwcml0ZS9zcGVsbDAucG5nXCIsXG4gICAgICBcInhcIjogNDMyLFxuICAgICAgXCJ5XCI6IDBcbiAgICB9XG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwicG9yb3Rocm93XCIsXG4gICAgXCJuYW1lXCI6IFwiUG9ybyBUb3NzXCIsXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIlRvc3MgYSBQb3JvIGF0IHlvdXIgZW5lbWllcy4gSWYgaXQgaGl0cywgeW91IGNhbiBxdWlja2x5IHRyYXZlbCB0byB5b3VyIHRhcmdldCBhcyBhIGZvbGxvdyB1cC5cIixcbiAgICBcInRvb2x0aXBcIjogXCJUb3NzIGEgUG9ybyBhIGxvbmcgZGlzdGFuY2UsIGRlYWxpbmcge3sgZjIgfX0gdHJ1ZSBkYW1hZ2UgdG8gdGhlIGZpcnN0IGVuZW15IHVuaXQgaGl0LiBUaGlzIGFiaWxpdHkgY2FuIGJlIHJlY2FzdCBmb3IgMyBzZWNvbmRzIGlmIGl0IGhpdHMgYW4gZW5lbXkgdG8gZGFzaCB0byB0aGUgdGFyZ2V0IGhpdC4gRGFzaGluZyB0byB0aGUgdGFyZ2V0IHdpbGwgcmVkdWNlIHRoZSBjb29sZG93biBvZiBQb3JvIFRvc3MgYnkgNSBzZWNvbmRzLjxicj48YnI+UG9yb3MgYXJlIG5vdCBibG9ja2VkIGJ5IHNwZWxsIHNoaWVsZHMgb3Igd2luZCB3YWxscyBiZWNhdXNlIHRoZXkgYXJlIGFuaW1hbHMsIG5vdCBzcGVsbHMhPGJyPjxicj48aT48c3BhbiBjbGFzcz1cXFwiY29sb3JGREQwMTdcXFwiPicnUG9yb3MgYXJlIGEgbW9kZWwgZm9yIFJ1bmV0ZXJyYW4gYWVyb2R5bmFtaWNzLicnPC9zcGFuPjwvaT5cIixcbiAgICBcImNvb2xkb3duXCI6IDIwLFxuICAgIFwia2V5XCI6IFwiMzFcIixcbiAgICBcInN1bW1vbmVyTGV2ZWxcIjogMSxcbiAgICBcIm1heGFtbW9cIjogXCItMVwiLFxuICAgIFwiaWNvblwiOiBcImh0dHA6Ly9kZHJhZ29uLmxlYWd1ZW9mbGVnZW5kcy5jb20vY2RuLzYuMjEuMS9pbWcvc3BlbGwvU3VtbW9uZXJQb3JvVGhyb3cucG5nXCIsXG4gICAgXCJzcHJpdGVcIjoge1xuICAgICAgXCJ1cmxcIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3Nwcml0ZS9zcGVsbDAucG5nXCIsXG4gICAgICBcInhcIjogMCxcbiAgICAgIFwieVwiOiA0OFxuICAgIH1cbiAgfSxcbiAge1xuICAgIFwiaWRcIjogXCJzbWl0ZVwiLFxuICAgIFwibmFtZVwiOiBcIlNtaXRlXCIsXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIkRlYWxzIDM5MC0xMDAwIHRydWUgZGFtYWdlIChkZXBlbmRpbmcgb24gY2hhbXBpb24gbGV2ZWwpIHRvIHRhcmdldCBlcGljIG9yIGxhcmdlIG1vbnN0ZXIgb3IgZW5lbXkgbWluaW9uLlwiLFxuICAgIFwidG9vbHRpcFwiOiBcIkRlYWxzIDxzcGFuIGNsYXNzPVxcXCJjb2xvckZFRkNGRlxcXCI+e3sgZjEgfX08L3NwYW4+IHRydWUgZGFtYWdlIHRvIHRhcmdldCBlcGljIG9yIGxhcmdlIG1vbnN0ZXIgb3IgZW5lbXkgbWluaW9uLjxicj48YnI+U21pdGUgcmVnYWlucyBhIGNoYXJnZSBldmVyeSB7eyBmMyB9fSBzZWNvbmRzLCB1cCB0byBhIG1heGltdW0gb2YgMiBjaGFyZ2VzLjxicj48YnI+PGk+U21pdGluZyBMYXJnZSBNb25zdGVycyBpbnN0YW50bHkgaGFydmVzdHMgYWRkaXRpb25hbCBib251c2VzIGJhc2VkIG9uIHRoZSBNb25zdGVyLiBNb3VzZSBvdmVyIGxhcmdlIGp1bmdsZSBtb25zdGVycyB0byBzZWUgcG90ZW50aWFsIGJvbnVzIHJld2FyZHMuPC9pPlwiLFxuICAgIFwiY29vbGRvd25cIjogNzUsXG4gICAgXCJrZXlcIjogXCIxMVwiLFxuICAgIFwic3VtbW9uZXJMZXZlbFwiOiAxMCxcbiAgICBcIm1heGFtbW9cIjogXCIyXCIsXG4gICAgXCJpY29uXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcGVsbC9TdW1tb25lclNtaXRlLnBuZ1wiLFxuICAgIFwic3ByaXRlXCI6IHtcbiAgICAgIFwidXJsXCI6IFwiaHR0cDovL2RkcmFnb24ubGVhZ3Vlb2ZsZWdlbmRzLmNvbS9jZG4vNi4yMS4xL2ltZy9zcHJpdGUvc3BlbGwwLnBuZ1wiLFxuICAgICAgXCJ4XCI6IDQ4LFxuICAgICAgXCJ5XCI6IDQ4XG4gICAgfVxuICB9LFxuICB7XG4gICAgXCJpZFwiOiBcInNub3diYWxsXCIsXG4gICAgXCJuYW1lXCI6IFwiTWFya1wiLFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaHJvdyBhIHNub3diYWxsIGluIGEgc3RyYWlnaHQgbGluZSBhdCB5b3VyIGVuZW1pZXMuIElmIGl0IGhpdHMgYW4gZW5lbXksIHRoZXkgYmVjb21lIG1hcmtlZCBhbmQgeW91ciBjaGFtcGlvbiBjYW4gcXVpY2tseSB0cmF2ZWwgdG8gdGhlIG1hcmtlZCB0YXJnZXQgYXMgYSBmb2xsb3cgdXAuXCIsXG4gICAgXCJ0b29sdGlwXCI6IFwiVGhyb3cgYSBzbm93YmFsbCBhIGxvbmcgZGlzdGFuY2UsIGRlYWxpbmcge3sgZjEgfX0gdHJ1ZSBkYW1hZ2UgdG8gdGhlIGZpcnN0IGVuZW15IHVuaXQgaGl0LiBJZiBpdCBoaXRzIGFuIGVuZW15LCB0aGlzIGFiaWxpdHkgY2FuIGJlIHJlY2FzdCBmb3Ige3sgZjIgfX0gc2Vjb25kcyB0byBEYXNoIHRvIHRoZSB0YWdnZWQgdW5pdCwgZGVhbGluZyBhbiBhZGRpdGlvbmFsIHt7IGY1IH19IHRydWUgZGFtYWdlLiBEYXNoaW5nIHRvIHRoZSB0YXJnZXQgd2lsbCByZWR1Y2UgdGhlIGNvb2xkb3duIG9mIE1hcmsgYnkge3sgZjMgfX0lLjxicj48YnI+PHNwYW4gY2xhc3M9XFxcImNvbG9yRkZGRjAwXFxcIj5NYXJrIHByb2plY3RpbGVzIGFyZSBub3Qgc3RvcHBlZCBieSBzcGVsbCBzaGllbGRzIG9yIHByb2plY3RpbGUgbWl0aWdhdGlvbi48L3NwYW4+XCIsXG4gICAgXCJjb29sZG93blwiOiA4MCxcbiAgICBcImtleVwiOiBcIjMyXCIsXG4gICAgXCJzdW1tb25lckxldmVsXCI6IDEsXG4gICAgXCJtYXhhbW1vXCI6IFwiLTFcIixcbiAgICBcImljb25cIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3NwZWxsL1N1bW1vbmVyU25vd2JhbGwucG5nXCIsXG4gICAgXCJzcHJpdGVcIjoge1xuICAgICAgXCJ1cmxcIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3Nwcml0ZS9zcGVsbDAucG5nXCIsXG4gICAgICBcInhcIjogOTYsXG4gICAgICBcInlcIjogNDhcbiAgICB9XG4gIH0sXG4gIHtcbiAgICBcImlkXCI6IFwidGVsZXBvcnRcIixcbiAgICBcIm5hbWVcIjogXCJUZWxlcG9ydFwiLFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJBZnRlciBjaGFubmVsaW5nIGZvciA0LjUgc2Vjb25kcywgdGVsZXBvcnRzIHlvdXIgY2hhbXBpb24gdG8gdGFyZ2V0IGFsbGllZCBzdHJ1Y3R1cmUsIG1pbmlvbiwgb3Igd2FyZC5cIixcbiAgICBcInRvb2x0aXBcIjogXCJBZnRlciBjaGFubmVsaW5nIGZvciB7eyBmMSB9fSBzZWNvbmRzLCB5b3VyIGNoYW1waW9uIHRlbGVwb3J0cyB0byB0YXJnZXQgYWxsaWVkIHN0cnVjdHVyZSwgbWluaW9uLCBvciB3YXJkLjxicj48YnI+WW91IG1heSByZWFjdGl2YXRlIFRlbGVwb3J0IHRvIGNhbmNlbCBpdCwgcGxhY2luZyBpdCBvbiBhIHt7IGYzIH19IHNlY29uZCBjb29sZG93bi5cIixcbiAgICBcImNvb2xkb3duXCI6IDMwMCxcbiAgICBcImtleVwiOiBcIjEyXCIsXG4gICAgXCJzdW1tb25lckxldmVsXCI6IDYsXG4gICAgXCJtYXhhbW1vXCI6IFwiLTFcIixcbiAgICBcImljb25cIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3NwZWxsL1N1bW1vbmVyVGVsZXBvcnQucG5nXCIsXG4gICAgXCJzcHJpdGVcIjoge1xuICAgICAgXCJ1cmxcIjogXCJodHRwOi8vZGRyYWdvbi5sZWFndWVvZmxlZ2VuZHMuY29tL2Nkbi82LjIxLjEvaW1nL3Nwcml0ZS9zcGVsbDAucG5nXCIsXG4gICAgICBcInhcIjogMTQ0LFxuICAgICAgXCJ5XCI6IDQ4XG4gICAgfVxuICB9XG5dIiwiXHJcbi8qKlxyXG4gKiBFbGVtZW50IHByb3RvdHlwZS5cclxuICovXHJcblxyXG52YXIgcHJvdG8gPSBFbGVtZW50LnByb3RvdHlwZTtcclxuXHJcbi8qKlxyXG4gKiBWZW5kb3IgZnVuY3Rpb24uXHJcbiAqL1xyXG5cclxudmFyIHZlbmRvciA9IHByb3RvLm1hdGNoZXNTZWxlY3RvclxyXG4gIHx8IHByb3RvLndlYmtpdE1hdGNoZXNTZWxlY3RvclxyXG4gIHx8IHByb3RvLm1vek1hdGNoZXNTZWxlY3RvclxyXG4gIHx8IHByb3RvLm1zTWF0Y2hlc1NlbGVjdG9yXHJcbiAgfHwgcHJvdG8ub01hdGNoZXNTZWxlY3RvcjtcclxuXHJcbi8qKlxyXG4gKiBFeHBvc2UgYG1hdGNoKClgLlxyXG4gKi9cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gbWF0Y2g7XHJcblxyXG4vKipcclxuICogTWF0Y2ggYGVsYCB0byBgc2VsZWN0b3JgLlxyXG4gKlxyXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBzZWxlY3RvclxyXG4gKiBAcmV0dXJuIHtCb29sZWFufVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIG1hdGNoKGVsLCBzZWxlY3Rvcikge1xyXG4gIGlmICh2ZW5kb3IpIHJldHVybiB2ZW5kb3IuY2FsbChlbCwgc2VsZWN0b3IpO1xyXG4gIHZhciBub2RlcyA9IGVsLnBhcmVudE5vZGUucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7ICsraSkge1xyXG4gICAgaWYgKG5vZGVzW2ldID09IGVsKSByZXR1cm4gdHJ1ZTtcclxuICB9XHJcbiAgcmV0dXJuIGZhbHNlO1xyXG59IiwiJ3VzZSBzdHJpY3QnO1xuLy8gQ3JlYXRlIGEgcmFuZ2Ugb2JqZWN0IGZvciBlZmZpY2VudGx5IHJlbmRlcmluZyBzdHJpbmdzIHRvIGVsZW1lbnRzLlxudmFyIHJhbmdlO1xuXG52YXIgZG9jID0gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBkb2N1bWVudDtcblxudmFyIHRlc3RFbCA9IGRvYyA/XG4gICAgZG9jLmJvZHkgfHwgZG9jLmNyZWF0ZUVsZW1lbnQoJ2RpdicpIDpcbiAgICB7fTtcblxudmFyIE5TX1hIVE1MID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwnO1xuXG52YXIgRUxFTUVOVF9OT0RFID0gMTtcbnZhciBURVhUX05PREUgPSAzO1xudmFyIENPTU1FTlRfTk9ERSA9IDg7XG5cbi8vIEZpeGVzIDxodHRwczovL2dpdGh1Yi5jb20vcGF0cmljay1zdGVlbGUtaWRlbS9tb3JwaGRvbS9pc3N1ZXMvMzI+XG4vLyAoSUU3KyBzdXBwb3J0KSA8PUlFNyBkb2VzIG5vdCBzdXBwb3J0IGVsLmhhc0F0dHJpYnV0ZShuYW1lKVxudmFyIGhhc0F0dHJpYnV0ZU5TO1xuXG5pZiAodGVzdEVsLmhhc0F0dHJpYnV0ZU5TKSB7XG4gICAgaGFzQXR0cmlidXRlTlMgPSBmdW5jdGlvbihlbCwgbmFtZXNwYWNlVVJJLCBuYW1lKSB7XG4gICAgICAgIHJldHVybiBlbC5oYXNBdHRyaWJ1dGVOUyhuYW1lc3BhY2VVUkksIG5hbWUpO1xuICAgIH07XG59IGVsc2UgaWYgKHRlc3RFbC5oYXNBdHRyaWJ1dGUpIHtcbiAgICBoYXNBdHRyaWJ1dGVOUyA9IGZ1bmN0aW9uKGVsLCBuYW1lc3BhY2VVUkksIG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGVsLmhhc0F0dHJpYnV0ZShuYW1lKTtcbiAgICB9O1xufSBlbHNlIHtcbiAgICBoYXNBdHRyaWJ1dGVOUyA9IGZ1bmN0aW9uKGVsLCBuYW1lc3BhY2VVUkksIG5hbWUpIHtcbiAgICAgICAgcmV0dXJuICEhZWwuZ2V0QXR0cmlidXRlTm9kZShuYW1lKTtcbiAgICB9O1xufVxuXG5mdW5jdGlvbiB0b0VsZW1lbnQoc3RyKSB7XG4gICAgaWYgKCFyYW5nZSAmJiBkb2MuY3JlYXRlUmFuZ2UpIHtcbiAgICAgICAgcmFuZ2UgPSBkb2MuY3JlYXRlUmFuZ2UoKTtcbiAgICAgICAgcmFuZ2Uuc2VsZWN0Tm9kZShkb2MuYm9keSk7XG4gICAgfVxuXG4gICAgdmFyIGZyYWdtZW50O1xuICAgIGlmIChyYW5nZSAmJiByYW5nZS5jcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQpIHtcbiAgICAgICAgZnJhZ21lbnQgPSByYW5nZS5jcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQoc3RyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBmcmFnbWVudCA9IGRvYy5jcmVhdGVFbGVtZW50KCdib2R5Jyk7XG4gICAgICAgIGZyYWdtZW50LmlubmVySFRNTCA9IHN0cjtcbiAgICB9XG4gICAgcmV0dXJuIGZyYWdtZW50LmNoaWxkTm9kZXNbMF07XG59XG5cbmZ1bmN0aW9uIHN5bmNCb29sZWFuQXR0clByb3AoZnJvbUVsLCB0b0VsLCBuYW1lKSB7XG4gICAgaWYgKGZyb21FbFtuYW1lXSAhPT0gdG9FbFtuYW1lXSkge1xuICAgICAgICBmcm9tRWxbbmFtZV0gPSB0b0VsW25hbWVdO1xuICAgICAgICBpZiAoZnJvbUVsW25hbWVdKSB7XG4gICAgICAgICAgICBmcm9tRWwuc2V0QXR0cmlidXRlKG5hbWUsICcnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZyb21FbC5yZW1vdmVBdHRyaWJ1dGUobmFtZSwgJycpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG52YXIgc3BlY2lhbEVsSGFuZGxlcnMgPSB7XG4gICAgLyoqXG4gICAgICogTmVlZGVkIGZvciBJRS4gQXBwYXJlbnRseSBJRSBkb2Vzbid0IHRoaW5rIHRoYXQgXCJzZWxlY3RlZFwiIGlzIGFuXG4gICAgICogYXR0cmlidXRlIHdoZW4gcmVhZGluZyBvdmVyIHRoZSBhdHRyaWJ1dGVzIHVzaW5nIHNlbGVjdEVsLmF0dHJpYnV0ZXNcbiAgICAgKi9cbiAgICBPUFRJT046IGZ1bmN0aW9uKGZyb21FbCwgdG9FbCkge1xuICAgICAgICBzeW5jQm9vbGVhbkF0dHJQcm9wKGZyb21FbCwgdG9FbCwgJ3NlbGVjdGVkJyk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBUaGUgXCJ2YWx1ZVwiIGF0dHJpYnV0ZSBpcyBzcGVjaWFsIGZvciB0aGUgPGlucHV0PiBlbGVtZW50IHNpbmNlIGl0IHNldHNcbiAgICAgKiB0aGUgaW5pdGlhbCB2YWx1ZS4gQ2hhbmdpbmcgdGhlIFwidmFsdWVcIiBhdHRyaWJ1dGUgd2l0aG91dCBjaGFuZ2luZyB0aGVcbiAgICAgKiBcInZhbHVlXCIgcHJvcGVydHkgd2lsbCBoYXZlIG5vIGVmZmVjdCBzaW5jZSBpdCBpcyBvbmx5IHVzZWQgdG8gdGhlIHNldCB0aGVcbiAgICAgKiBpbml0aWFsIHZhbHVlLiAgU2ltaWxhciBmb3IgdGhlIFwiY2hlY2tlZFwiIGF0dHJpYnV0ZSwgYW5kIFwiZGlzYWJsZWRcIi5cbiAgICAgKi9cbiAgICBJTlBVVDogZnVuY3Rpb24oZnJvbUVsLCB0b0VsKSB7XG4gICAgICAgIHN5bmNCb29sZWFuQXR0clByb3AoZnJvbUVsLCB0b0VsLCAnY2hlY2tlZCcpO1xuICAgICAgICBzeW5jQm9vbGVhbkF0dHJQcm9wKGZyb21FbCwgdG9FbCwgJ2Rpc2FibGVkJyk7XG5cbiAgICAgICAgaWYgKGZyb21FbC52YWx1ZSAhPT0gdG9FbC52YWx1ZSkge1xuICAgICAgICAgICAgZnJvbUVsLnZhbHVlID0gdG9FbC52YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaGFzQXR0cmlidXRlTlModG9FbCwgbnVsbCwgJ3ZhbHVlJykpIHtcbiAgICAgICAgICAgIGZyb21FbC5yZW1vdmVBdHRyaWJ1dGUoJ3ZhbHVlJyk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgVEVYVEFSRUE6IGZ1bmN0aW9uKGZyb21FbCwgdG9FbCkge1xuICAgICAgICB2YXIgbmV3VmFsdWUgPSB0b0VsLnZhbHVlO1xuICAgICAgICBpZiAoZnJvbUVsLnZhbHVlICE9PSBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgZnJvbUVsLnZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZnJvbUVsLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgIGZyb21FbC5maXJzdENoaWxkLm5vZGVWYWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHR3byBub2RlJ3MgbmFtZXMgYXJlIHRoZSBzYW1lLlxuICpcbiAqIE5PVEU6IFdlIGRvbid0IGJvdGhlciBjaGVja2luZyBgbmFtZXNwYWNlVVJJYCBiZWNhdXNlIHlvdSB3aWxsIG5ldmVyIGZpbmQgdHdvIEhUTUwgZWxlbWVudHMgd2l0aCB0aGUgc2FtZVxuICogICAgICAgbm9kZU5hbWUgYW5kIGRpZmZlcmVudCBuYW1lc3BhY2UgVVJJcy5cbiAqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGFcbiAqIEBwYXJhbSB7RWxlbWVudH0gYiBUaGUgdGFyZ2V0IGVsZW1lbnRcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGNvbXBhcmVOb2RlTmFtZXMoZnJvbUVsLCB0b0VsKSB7XG4gICAgdmFyIGZyb21Ob2RlTmFtZSA9IGZyb21FbC5ub2RlTmFtZTtcbiAgICB2YXIgdG9Ob2RlTmFtZSA9IHRvRWwubm9kZU5hbWU7XG5cbiAgICBpZiAoZnJvbU5vZGVOYW1lID09PSB0b05vZGVOYW1lKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0b0VsLmFjdHVhbGl6ZSAmJlxuICAgICAgICBmcm9tTm9kZU5hbWUuY2hhckNvZGVBdCgwKSA8IDkxICYmIC8qIGZyb20gdGFnIG5hbWUgaXMgdXBwZXIgY2FzZSAqL1xuICAgICAgICB0b05vZGVOYW1lLmNoYXJDb2RlQXQoMCkgPiA5MCAvKiB0YXJnZXQgdGFnIG5hbWUgaXMgbG93ZXIgY2FzZSAqLykge1xuICAgICAgICAvLyBJZiB0aGUgdGFyZ2V0IGVsZW1lbnQgaXMgYSB2aXJ0dWFsIERPTSBub2RlIHRoZW4gd2UgbWF5IG5lZWQgdG8gbm9ybWFsaXplIHRoZSB0YWcgbmFtZVxuICAgICAgICAvLyBiZWZvcmUgY29tcGFyaW5nLiBOb3JtYWwgSFRNTCBlbGVtZW50cyB0aGF0IGFyZSBpbiB0aGUgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJcbiAgICAgICAgLy8gYXJlIGNvbnZlcnRlZCB0byB1cHBlciBjYXNlXG4gICAgICAgIHJldHVybiBmcm9tTm9kZU5hbWUgPT09IHRvTm9kZU5hbWUudG9VcHBlckNhc2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuXG4vKipcbiAqIENyZWF0ZSBhbiBlbGVtZW50LCBvcHRpb25hbGx5IHdpdGggYSBrbm93biBuYW1lc3BhY2UgVVJJLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIHRoZSBlbGVtZW50IG5hbWUsIGUuZy4gJ2Rpdicgb3IgJ3N2ZydcbiAqIEBwYXJhbSB7c3RyaW5nfSBbbmFtZXNwYWNlVVJJXSB0aGUgZWxlbWVudCdzIG5hbWVzcGFjZSBVUkksIGkuZS4gdGhlIHZhbHVlIG9mXG4gKiBpdHMgYHhtbG5zYCBhdHRyaWJ1dGUgb3IgaXRzIGluZmVycmVkIG5hbWVzcGFjZS5cbiAqXG4gKiBAcmV0dXJuIHtFbGVtZW50fVxuICovXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50TlMobmFtZSwgbmFtZXNwYWNlVVJJKSB7XG4gICAgcmV0dXJuICFuYW1lc3BhY2VVUkkgfHwgbmFtZXNwYWNlVVJJID09PSBOU19YSFRNTCA/XG4gICAgICAgIGRvYy5jcmVhdGVFbGVtZW50KG5hbWUpIDpcbiAgICAgICAgZG9jLmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2VVUkksIG5hbWUpO1xufVxuXG4vKipcbiAqIExvb3Agb3ZlciBhbGwgb2YgdGhlIGF0dHJpYnV0ZXMgb24gdGhlIHRhcmdldCBub2RlIGFuZCBtYWtlIHN1cmUgdGhlIG9yaWdpbmFsXG4gKiBET00gbm9kZSBoYXMgdGhlIHNhbWUgYXR0cmlidXRlcy4gSWYgYW4gYXR0cmlidXRlIGZvdW5kIG9uIHRoZSBvcmlnaW5hbCBub2RlXG4gKiBpcyBub3Qgb24gdGhlIG5ldyBub2RlIHRoZW4gcmVtb3ZlIGl0IGZyb20gdGhlIG9yaWdpbmFsIG5vZGUuXG4gKlxuICogQHBhcmFtICB7RWxlbWVudH0gZnJvbU5vZGVcbiAqIEBwYXJhbSAge0VsZW1lbnR9IHRvTm9kZVxuICovXG5mdW5jdGlvbiBtb3JwaEF0dHJzKGZyb21Ob2RlLCB0b05vZGUpIHtcbiAgICBpZiAodG9Ob2RlLmFzc2lnbkF0dHJpYnV0ZXMpIHtcbiAgICAgICAgdG9Ob2RlLmFzc2lnbkF0dHJpYnV0ZXMoZnJvbU5vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBhdHRycyA9IHRvTm9kZS5hdHRyaWJ1dGVzO1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIGF0dHI7XG4gICAgICAgIHZhciBhdHRyTmFtZTtcbiAgICAgICAgdmFyIGF0dHJOYW1lc3BhY2VVUkk7XG4gICAgICAgIHZhciBhdHRyVmFsdWU7XG4gICAgICAgIHZhciBmcm9tVmFsdWU7XG5cbiAgICAgICAgZm9yIChpID0gYXR0cnMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgICAgIGF0dHIgPSBhdHRyc1tpXTtcbiAgICAgICAgICAgIGF0dHJOYW1lID0gYXR0ci5uYW1lO1xuICAgICAgICAgICAgYXR0ck5hbWVzcGFjZVVSSSA9IGF0dHIubmFtZXNwYWNlVVJJO1xuICAgICAgICAgICAgYXR0clZhbHVlID0gYXR0ci52YWx1ZTtcblxuICAgICAgICAgICAgaWYgKGF0dHJOYW1lc3BhY2VVUkkpIHtcbiAgICAgICAgICAgICAgICBhdHRyTmFtZSA9IGF0dHIubG9jYWxOYW1lIHx8IGF0dHJOYW1lO1xuICAgICAgICAgICAgICAgIGZyb21WYWx1ZSA9IGZyb21Ob2RlLmdldEF0dHJpYnV0ZU5TKGF0dHJOYW1lc3BhY2VVUkksIGF0dHJOYW1lKTtcblxuICAgICAgICAgICAgICAgIGlmIChmcm9tVmFsdWUgIT09IGF0dHJWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBmcm9tTm9kZS5zZXRBdHRyaWJ1dGVOUyhhdHRyTmFtZXNwYWNlVVJJLCBhdHRyTmFtZSwgYXR0clZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZyb21WYWx1ZSA9IGZyb21Ob2RlLmdldEF0dHJpYnV0ZShhdHRyTmFtZSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoZnJvbVZhbHVlICE9PSBhdHRyVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgZnJvbU5vZGUuc2V0QXR0cmlidXRlKGF0dHJOYW1lLCBhdHRyVmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlbW92ZSBhbnkgZXh0cmEgYXR0cmlidXRlcyBmb3VuZCBvbiB0aGUgb3JpZ2luYWwgRE9NIGVsZW1lbnQgdGhhdFxuICAgICAgICAvLyB3ZXJlbid0IGZvdW5kIG9uIHRoZSB0YXJnZXQgZWxlbWVudC5cbiAgICAgICAgYXR0cnMgPSBmcm9tTm9kZS5hdHRyaWJ1dGVzO1xuXG4gICAgICAgIGZvciAoaSA9IGF0dHJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgICAgICBhdHRyID0gYXR0cnNbaV07XG4gICAgICAgICAgICBpZiAoYXR0ci5zcGVjaWZpZWQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgYXR0ck5hbWUgPSBhdHRyLm5hbWU7XG4gICAgICAgICAgICAgICAgYXR0ck5hbWVzcGFjZVVSSSA9IGF0dHIubmFtZXNwYWNlVVJJO1xuXG4gICAgICAgICAgICAgICAgaWYgKGF0dHJOYW1lc3BhY2VVUkkpIHtcbiAgICAgICAgICAgICAgICAgICAgYXR0ck5hbWUgPSBhdHRyLmxvY2FsTmFtZSB8fCBhdHRyTmFtZTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIWhhc0F0dHJpYnV0ZU5TKHRvTm9kZSwgYXR0ck5hbWVzcGFjZVVSSSwgYXR0ck5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmcm9tTm9kZS5yZW1vdmVBdHRyaWJ1dGVOUyhhdHRyTmFtZXNwYWNlVVJJLCBhdHRyTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWhhc0F0dHJpYnV0ZU5TKHRvTm9kZSwgbnVsbCwgYXR0ck5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmcm9tTm9kZS5yZW1vdmVBdHRyaWJ1dGUoYXR0ck5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbiAqIENvcGllcyB0aGUgY2hpbGRyZW4gb2Ygb25lIERPTSBlbGVtZW50IHRvIGFub3RoZXIgRE9NIGVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gbW92ZUNoaWxkcmVuKGZyb21FbCwgdG9FbCkge1xuICAgIHZhciBjdXJDaGlsZCA9IGZyb21FbC5maXJzdENoaWxkO1xuICAgIHdoaWxlIChjdXJDaGlsZCkge1xuICAgICAgICB2YXIgbmV4dENoaWxkID0gY3VyQ2hpbGQubmV4dFNpYmxpbmc7XG4gICAgICAgIHRvRWwuYXBwZW5kQ2hpbGQoY3VyQ2hpbGQpO1xuICAgICAgICBjdXJDaGlsZCA9IG5leHRDaGlsZDtcbiAgICB9XG4gICAgcmV0dXJuIHRvRWw7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRHZXROb2RlS2V5KG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5pZDtcbn1cblxuZnVuY3Rpb24gbW9ycGhkb20oZnJvbU5vZGUsIHRvTm9kZSwgb3B0aW9ucykge1xuICAgIGlmICghb3B0aW9ucykge1xuICAgICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB0b05vZGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmIChmcm9tTm9kZS5ub2RlTmFtZSA9PT0gJyNkb2N1bWVudCcgfHwgZnJvbU5vZGUubm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgICAgICAgICAgdmFyIHRvTm9kZUh0bWwgPSB0b05vZGU7XG4gICAgICAgICAgICB0b05vZGUgPSBkb2MuY3JlYXRlRWxlbWVudCgnaHRtbCcpO1xuICAgICAgICAgICAgdG9Ob2RlLmlubmVySFRNTCA9IHRvTm9kZUh0bWw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0b05vZGUgPSB0b0VsZW1lbnQodG9Ob2RlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBnZXROb2RlS2V5ID0gb3B0aW9ucy5nZXROb2RlS2V5IHx8IGRlZmF1bHRHZXROb2RlS2V5O1xuICAgIHZhciBvbkJlZm9yZU5vZGVBZGRlZCA9IG9wdGlvbnMub25CZWZvcmVOb2RlQWRkZWQgfHwgbm9vcDtcbiAgICB2YXIgb25Ob2RlQWRkZWQgPSBvcHRpb25zLm9uTm9kZUFkZGVkIHx8IG5vb3A7XG4gICAgdmFyIG9uQmVmb3JlRWxVcGRhdGVkID0gb3B0aW9ucy5vbkJlZm9yZUVsVXBkYXRlZCB8fCBub29wO1xuICAgIHZhciBvbkVsVXBkYXRlZCA9IG9wdGlvbnMub25FbFVwZGF0ZWQgfHwgbm9vcDtcbiAgICB2YXIgb25CZWZvcmVOb2RlRGlzY2FyZGVkID0gb3B0aW9ucy5vbkJlZm9yZU5vZGVEaXNjYXJkZWQgfHwgbm9vcDtcbiAgICB2YXIgb25Ob2RlRGlzY2FyZGVkID0gb3B0aW9ucy5vbk5vZGVEaXNjYXJkZWQgfHwgbm9vcDtcbiAgICB2YXIgb25CZWZvcmVFbENoaWxkcmVuVXBkYXRlZCA9IG9wdGlvbnMub25CZWZvcmVFbENoaWxkcmVuVXBkYXRlZCB8fCBub29wO1xuICAgIHZhciBjaGlsZHJlbk9ubHkgPSBvcHRpb25zLmNoaWxkcmVuT25seSA9PT0gdHJ1ZTtcblxuICAgIC8vIFRoaXMgb2JqZWN0IGlzIHVzZWQgYXMgYSBsb29rdXAgdG8gcXVpY2tseSBmaW5kIGFsbCBrZXllZCBlbGVtZW50cyBpbiB0aGUgb3JpZ2luYWwgRE9NIHRyZWUuXG4gICAgdmFyIGZyb21Ob2Rlc0xvb2t1cCA9IHt9O1xuICAgIHZhciBrZXllZFJlbW92YWxMaXN0O1xuXG4gICAgZnVuY3Rpb24gYWRkS2V5ZWRSZW1vdmFsKGtleSkge1xuICAgICAgICBpZiAoa2V5ZWRSZW1vdmFsTGlzdCkge1xuICAgICAgICAgICAga2V5ZWRSZW1vdmFsTGlzdC5wdXNoKGtleSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBrZXllZFJlbW92YWxMaXN0ID0gW2tleV07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3YWxrRGlzY2FyZGVkQ2hpbGROb2Rlcyhub2RlLCBza2lwS2V5ZWROb2Rlcykge1xuICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFKSB7XG4gICAgICAgICAgICB2YXIgY3VyQ2hpbGQgPSBub2RlLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICB3aGlsZSAoY3VyQ2hpbGQpIHtcblxuICAgICAgICAgICAgICAgIHZhciBrZXkgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgICAgICBpZiAoc2tpcEtleWVkTm9kZXMgJiYgKGtleSA9IGdldE5vZGVLZXkoY3VyQ2hpbGQpKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBJZiB3ZSBhcmUgc2tpcHBpbmcga2V5ZWQgbm9kZXMgdGhlbiB3ZSBhZGQgdGhlIGtleVxuICAgICAgICAgICAgICAgICAgICAvLyB0byBhIGxpc3Qgc28gdGhhdCBpdCBjYW4gYmUgaGFuZGxlZCBhdCB0aGUgdmVyeSBlbmQuXG4gICAgICAgICAgICAgICAgICAgIGFkZEtleWVkUmVtb3ZhbChrZXkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE9ubHkgcmVwb3J0IHRoZSBub2RlIGFzIGRpc2NhcmRlZCBpZiBpdCBpcyBub3Qga2V5ZWQuIFdlIGRvIHRoaXMgYmVjYXVzZVxuICAgICAgICAgICAgICAgICAgICAvLyBhdCB0aGUgZW5kIHdlIGxvb3AgdGhyb3VnaCBhbGwga2V5ZWQgZWxlbWVudHMgdGhhdCB3ZXJlIHVubWF0Y2hlZFxuICAgICAgICAgICAgICAgICAgICAvLyBhbmQgdGhlbiBkaXNjYXJkIHRoZW0gaW4gb25lIGZpbmFsIHBhc3MuXG4gICAgICAgICAgICAgICAgICAgIG9uTm9kZURpc2NhcmRlZChjdXJDaGlsZCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJDaGlsZC5maXJzdENoaWxkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3YWxrRGlzY2FyZGVkQ2hpbGROb2RlcyhjdXJDaGlsZCwgc2tpcEtleWVkTm9kZXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY3VyQ2hpbGQgPSBjdXJDaGlsZC5uZXh0U2libGluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYSBET00gbm9kZSBvdXQgb2YgdGhlIG9yaWdpbmFsIERPTVxuICAgICAqXG4gICAgICogQHBhcmFtICB7Tm9kZX0gbm9kZSBUaGUgbm9kZSB0byByZW1vdmVcbiAgICAgKiBAcGFyYW0gIHtOb2RlfSBwYXJlbnROb2RlIFRoZSBub2RlcyBwYXJlbnRcbiAgICAgKiBAcGFyYW0gIHtCb29sZWFufSBza2lwS2V5ZWROb2RlcyBJZiB0cnVlIHRoZW4gZWxlbWVudHMgd2l0aCBrZXlzIHdpbGwgYmUgc2tpcHBlZCBhbmQgbm90IGRpc2NhcmRlZC5cbiAgICAgKiBAcmV0dXJuIHt1bmRlZmluZWR9XG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVtb3ZlTm9kZShub2RlLCBwYXJlbnROb2RlLCBza2lwS2V5ZWROb2Rlcykge1xuICAgICAgICBpZiAob25CZWZvcmVOb2RlRGlzY2FyZGVkKG5vZGUpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgIHBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7XG4gICAgICAgIH1cblxuICAgICAgICBvbk5vZGVEaXNjYXJkZWQobm9kZSk7XG4gICAgICAgIHdhbGtEaXNjYXJkZWRDaGlsZE5vZGVzKG5vZGUsIHNraXBLZXllZE5vZGVzKTtcbiAgICB9XG5cbiAgICAvLyAvLyBUcmVlV2Fsa2VyIGltcGxlbWVudGF0aW9uIGlzIG5vIGZhc3RlciwgYnV0IGtlZXBpbmcgdGhpcyBhcm91bmQgaW4gY2FzZSB0aGlzIGNoYW5nZXMgaW4gdGhlIGZ1dHVyZVxuICAgIC8vIGZ1bmN0aW9uIGluZGV4VHJlZShyb290KSB7XG4gICAgLy8gICAgIHZhciB0cmVlV2Fsa2VyID0gZG9jdW1lbnQuY3JlYXRlVHJlZVdhbGtlcihcbiAgICAvLyAgICAgICAgIHJvb3QsXG4gICAgLy8gICAgICAgICBOb2RlRmlsdGVyLlNIT1dfRUxFTUVOVCk7XG4gICAgLy9cbiAgICAvLyAgICAgdmFyIGVsO1xuICAgIC8vICAgICB3aGlsZSgoZWwgPSB0cmVlV2Fsa2VyLm5leHROb2RlKCkpKSB7XG4gICAgLy8gICAgICAgICB2YXIga2V5ID0gZ2V0Tm9kZUtleShlbCk7XG4gICAgLy8gICAgICAgICBpZiAoa2V5KSB7XG4gICAgLy8gICAgICAgICAgICAgZnJvbU5vZGVzTG9va3VwW2tleV0gPSBlbDtcbiAgICAvLyAgICAgICAgIH1cbiAgICAvLyAgICAgfVxuICAgIC8vIH1cblxuICAgIC8vIC8vIE5vZGVJdGVyYXRvciBpbXBsZW1lbnRhdGlvbiBpcyBubyBmYXN0ZXIsIGJ1dCBrZWVwaW5nIHRoaXMgYXJvdW5kIGluIGNhc2UgdGhpcyBjaGFuZ2VzIGluIHRoZSBmdXR1cmVcbiAgICAvL1xuICAgIC8vIGZ1bmN0aW9uIGluZGV4VHJlZShub2RlKSB7XG4gICAgLy8gICAgIHZhciBub2RlSXRlcmF0b3IgPSBkb2N1bWVudC5jcmVhdGVOb2RlSXRlcmF0b3Iobm9kZSwgTm9kZUZpbHRlci5TSE9XX0VMRU1FTlQpO1xuICAgIC8vICAgICB2YXIgZWw7XG4gICAgLy8gICAgIHdoaWxlKChlbCA9IG5vZGVJdGVyYXRvci5uZXh0Tm9kZSgpKSkge1xuICAgIC8vICAgICAgICAgdmFyIGtleSA9IGdldE5vZGVLZXkoZWwpO1xuICAgIC8vICAgICAgICAgaWYgKGtleSkge1xuICAgIC8vICAgICAgICAgICAgIGZyb21Ob2Rlc0xvb2t1cFtrZXldID0gZWw7XG4gICAgLy8gICAgICAgICB9XG4gICAgLy8gICAgIH1cbiAgICAvLyB9XG5cbiAgICBmdW5jdGlvbiBpbmRleFRyZWUobm9kZSkge1xuICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFKSB7XG4gICAgICAgICAgICB2YXIgY3VyQ2hpbGQgPSBub2RlLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICB3aGlsZSAoY3VyQ2hpbGQpIHtcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0gZ2V0Tm9kZUtleShjdXJDaGlsZCk7XG4gICAgICAgICAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgICAgICAgICAgICBmcm9tTm9kZXNMb29rdXBba2V5XSA9IGN1ckNoaWxkO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFdhbGsgcmVjdXJzaXZlbHlcbiAgICAgICAgICAgICAgICBpbmRleFRyZWUoY3VyQ2hpbGQpO1xuXG4gICAgICAgICAgICAgICAgY3VyQ2hpbGQgPSBjdXJDaGlsZC5uZXh0U2libGluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGluZGV4VHJlZShmcm9tTm9kZSk7XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVOb2RlQWRkZWQoZWwpIHtcbiAgICAgICAgb25Ob2RlQWRkZWQoZWwpO1xuXG4gICAgICAgIHZhciBjdXJDaGlsZCA9IGVsLmZpcnN0Q2hpbGQ7XG4gICAgICAgIHdoaWxlIChjdXJDaGlsZCkge1xuICAgICAgICAgICAgdmFyIG5leHRTaWJsaW5nID0gY3VyQ2hpbGQubmV4dFNpYmxpbmc7XG5cbiAgICAgICAgICAgIHZhciBrZXkgPSBnZXROb2RlS2V5KGN1ckNoaWxkKTtcbiAgICAgICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICAgICAgICB2YXIgdW5tYXRjaGVkRnJvbUVsID0gZnJvbU5vZGVzTG9va3VwW2tleV07XG4gICAgICAgICAgICAgICAgaWYgKHVubWF0Y2hlZEZyb21FbCAmJiBjb21wYXJlTm9kZU5hbWVzKGN1ckNoaWxkLCB1bm1hdGNoZWRGcm9tRWwpKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1ckNoaWxkLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKHVubWF0Y2hlZEZyb21FbCwgY3VyQ2hpbGQpO1xuICAgICAgICAgICAgICAgICAgICBtb3JwaEVsKHVubWF0Y2hlZEZyb21FbCwgY3VyQ2hpbGQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaGFuZGxlTm9kZUFkZGVkKGN1ckNoaWxkKTtcbiAgICAgICAgICAgIGN1ckNoaWxkID0gbmV4dFNpYmxpbmc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb3JwaEVsKGZyb21FbCwgdG9FbCwgY2hpbGRyZW5Pbmx5KSB7XG4gICAgICAgIHZhciB0b0VsS2V5ID0gZ2V0Tm9kZUtleSh0b0VsKTtcbiAgICAgICAgdmFyIGN1ckZyb21Ob2RlS2V5O1xuXG4gICAgICAgIGlmICh0b0VsS2V5KSB7XG4gICAgICAgICAgICAvLyBJZiBhbiBlbGVtZW50IHdpdGggYW4gSUQgaXMgYmVpbmcgbW9ycGhlZCB0aGVuIGl0IGlzIHdpbGwgYmUgaW4gdGhlIGZpbmFsXG4gICAgICAgICAgICAvLyBET00gc28gY2xlYXIgaXQgb3V0IG9mIHRoZSBzYXZlZCBlbGVtZW50cyBjb2xsZWN0aW9uXG4gICAgICAgICAgICBkZWxldGUgZnJvbU5vZGVzTG9va3VwW3RvRWxLZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRvTm9kZS5pc1NhbWVOb2RlICYmIHRvTm9kZS5pc1NhbWVOb2RlKGZyb21Ob2RlKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFjaGlsZHJlbk9ubHkpIHtcbiAgICAgICAgICAgIGlmIChvbkJlZm9yZUVsVXBkYXRlZChmcm9tRWwsIHRvRWwpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbW9ycGhBdHRycyhmcm9tRWwsIHRvRWwpO1xuICAgICAgICAgICAgb25FbFVwZGF0ZWQoZnJvbUVsKTtcblxuICAgICAgICAgICAgaWYgKG9uQmVmb3JlRWxDaGlsZHJlblVwZGF0ZWQoZnJvbUVsLCB0b0VsKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZnJvbUVsLm5vZGVOYW1lICE9PSAnVEVYVEFSRUEnKSB7XG4gICAgICAgICAgICB2YXIgY3VyVG9Ob2RlQ2hpbGQgPSB0b0VsLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICB2YXIgY3VyRnJvbU5vZGVDaGlsZCA9IGZyb21FbC5maXJzdENoaWxkO1xuICAgICAgICAgICAgdmFyIGN1clRvTm9kZUtleTtcblxuICAgICAgICAgICAgdmFyIGZyb21OZXh0U2libGluZztcbiAgICAgICAgICAgIHZhciB0b05leHRTaWJsaW5nO1xuICAgICAgICAgICAgdmFyIG1hdGNoaW5nRnJvbUVsO1xuXG4gICAgICAgICAgICBvdXRlcjogd2hpbGUgKGN1clRvTm9kZUNoaWxkKSB7XG4gICAgICAgICAgICAgICAgdG9OZXh0U2libGluZyA9IGN1clRvTm9kZUNoaWxkLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgICAgIGN1clRvTm9kZUtleSA9IGdldE5vZGVLZXkoY3VyVG9Ob2RlQ2hpbGQpO1xuXG4gICAgICAgICAgICAgICAgd2hpbGUgKGN1ckZyb21Ob2RlQ2hpbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgZnJvbU5leHRTaWJsaW5nID0gY3VyRnJvbU5vZGVDaGlsZC5uZXh0U2libGluZztcblxuICAgICAgICAgICAgICAgICAgICBpZiAoY3VyVG9Ob2RlQ2hpbGQuaXNTYW1lTm9kZSAmJiBjdXJUb05vZGVDaGlsZC5pc1NhbWVOb2RlKGN1ckZyb21Ob2RlQ2hpbGQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJUb05vZGVDaGlsZCA9IHRvTmV4dFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJGcm9tTm9kZUNoaWxkID0gZnJvbU5leHRTaWJsaW5nO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjdXJGcm9tTm9kZUtleSA9IGdldE5vZGVLZXkoY3VyRnJvbU5vZGVDaGlsZCk7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1ckZyb21Ob2RlVHlwZSA9IGN1ckZyb21Ob2RlQ2hpbGQubm9kZVR5cGU7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGlzQ29tcGF0aWJsZSA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoY3VyRnJvbU5vZGVUeXBlID09PSBjdXJUb05vZGVDaGlsZC5ub2RlVHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1ckZyb21Ob2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQm90aCBub2RlcyBiZWluZyBjb21wYXJlZCBhcmUgRWxlbWVudCBub2Rlc1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1clRvTm9kZUtleSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgdGFyZ2V0IG5vZGUgaGFzIGEga2V5IHNvIHdlIHdhbnQgdG8gbWF0Y2ggaXQgdXAgd2l0aCB0aGUgY29ycmVjdCBlbGVtZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGluIHRoZSBvcmlnaW5hbCBET00gdHJlZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VyVG9Ob2RlS2V5ICE9PSBjdXJGcm9tTm9kZUtleSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIGN1cnJlbnQgZWxlbWVudCBpbiB0aGUgb3JpZ2luYWwgRE9NIHRyZWUgZG9lcyBub3QgaGF2ZSBhIG1hdGNoaW5nIGtleSBzb1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGV0J3MgY2hlY2sgb3VyIGxvb2t1cCB0byBzZWUgaWYgdGhlcmUgaXMgYSBtYXRjaGluZyBlbGVtZW50IGluIHRoZSBvcmlnaW5hbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRE9NIHRyZWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgobWF0Y2hpbmdGcm9tRWwgPSBmcm9tTm9kZXNMb29rdXBbY3VyVG9Ob2RlS2V5XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VyRnJvbU5vZGVDaGlsZC5uZXh0U2libGluZyA9PT0gbWF0Y2hpbmdGcm9tRWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3BlY2lhbCBjYXNlIGZvciBzaW5nbGUgZWxlbWVudCByZW1vdmFscy4gVG8gYXZvaWQgcmVtb3ZpbmcgdGhlIG9yaWdpbmFsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERPTSBub2RlIG91dCBvZiB0aGUgdHJlZSAoc2luY2UgdGhhdCBjYW4gYnJlYWsgQ1NTIHRyYW5zaXRpb25zLCBldGMuKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2Ugd2lsbCBpbnN0ZWFkIGRpc2NhcmQgdGhlIGN1cnJlbnQgbm9kZSBhbmQgd2FpdCB1bnRpbCB0aGUgbmV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpdGVyYXRpb24gdG8gcHJvcGVybHkgbWF0Y2ggdXAgdGhlIGtleWVkIHRhcmdldCBlbGVtZW50IHdpdGggaXRzIG1hdGNoaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVsZW1lbnQgaW4gdGhlIG9yaWdpbmFsIHRyZWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNDb21wYXRpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgZm91bmQgYSBtYXRjaGluZyBrZXllZCBlbGVtZW50IHNvbWV3aGVyZSBpbiB0aGUgb3JpZ2luYWwgRE9NIHRyZWUuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIExldCdzIG1vdmluZyB0aGUgb3JpZ2luYWwgRE9NIG5vZGUgaW50byB0aGUgY3VycmVudCBwb3NpdGlvbiBhbmQgbW9ycGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaXQuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTk9URTogV2UgdXNlIGluc2VydEJlZm9yZSBpbnN0ZWFkIG9mIHJlcGxhY2VDaGlsZCBiZWNhdXNlIHdlIHdhbnQgdG8gZ28gdGhyb3VnaFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgYHJlbW92ZU5vZGUoKWAgZnVuY3Rpb24gZm9yIHRoZSBub2RlIHRoYXQgaXMgYmVpbmcgZGlzY2FyZGVkIHNvIHRoYXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWxsIGxpZmVjeWNsZSBob29rcyBhcmUgY29ycmVjdGx5IGludm9rZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbUVsLmluc2VydEJlZm9yZShtYXRjaGluZ0Zyb21FbCwgY3VyRnJvbU5vZGVDaGlsZCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1ckZyb21Ob2RlS2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaW5jZSB0aGUgbm9kZSBpcyBrZXllZCBpdCBtaWdodCBiZSBtYXRjaGVkIHVwIGxhdGVyIHNvIHdlIGRlZmVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgYWN0dWFsIHJlbW92YWwgdG8gbGF0ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZEtleWVkUmVtb3ZhbChjdXJGcm9tTm9kZUtleSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOT1RFOiB3ZSBza2lwIG5lc3RlZCBrZXllZCBub2RlcyBmcm9tIGJlaW5nIHJlbW92ZWQgc2luY2UgdGhlcmUgaXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgIHN0aWxsIGEgY2hhbmNlIHRoZXkgd2lsbCBiZSBtYXRjaGVkIHVwIGxhdGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVOb2RlKGN1ckZyb21Ob2RlQ2hpbGQsIGZyb21FbCwgdHJ1ZSAvKiBza2lwIGtleWVkIG5vZGVzICovKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb21OZXh0U2libGluZyA9IGN1ckZyb21Ob2RlQ2hpbGQubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1ckZyb21Ob2RlQ2hpbGQgPSBtYXRjaGluZ0Zyb21FbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSBub2RlcyBhcmUgbm90IGNvbXBhdGlibGUgc2luY2UgdGhlIFwidG9cIiBub2RlIGhhcyBhIGtleSBhbmQgdGhlcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpcyBubyBtYXRjaGluZyBrZXllZCBub2RlIGluIHRoZSBzb3VyY2UgdHJlZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzQ29tcGF0aWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjdXJGcm9tTm9kZUtleSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgb3JpZ2luYWwgaGFzIGEga2V5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzQ29tcGF0aWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzQ29tcGF0aWJsZSA9IGlzQ29tcGF0aWJsZSAhPT0gZmFsc2UgJiYgY29tcGFyZU5vZGVOYW1lcyhjdXJGcm9tTm9kZUNoaWxkLCBjdXJUb05vZGVDaGlsZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzQ29tcGF0aWJsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSBmb3VuZCBjb21wYXRpYmxlIERPTSBlbGVtZW50cyBzbyB0cmFuc2Zvcm1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGN1cnJlbnQgXCJmcm9tXCIgbm9kZSB0byBtYXRjaCB0aGUgY3VycmVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0YXJnZXQgRE9NIG5vZGUuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vcnBoRWwoY3VyRnJvbU5vZGVDaGlsZCwgY3VyVG9Ob2RlQ2hpbGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjdXJGcm9tTm9kZVR5cGUgPT09IFRFWFRfTk9ERSB8fCBjdXJGcm9tTm9kZVR5cGUgPT0gQ09NTUVOVF9OT0RFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQm90aCBub2RlcyBiZWluZyBjb21wYXJlZCBhcmUgVGV4dCBvciBDb21tZW50IG5vZGVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNDb21wYXRpYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaW1wbHkgdXBkYXRlIG5vZGVWYWx1ZSBvbiB0aGUgb3JpZ2luYWwgbm9kZSB0b1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNoYW5nZSB0aGUgdGV4dCB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1ckZyb21Ob2RlQ2hpbGQubm9kZVZhbHVlID0gY3VyVG9Ob2RlQ2hpbGQubm9kZVZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzQ29tcGF0aWJsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWR2YW5jZSBib3RoIHRoZSBcInRvXCIgY2hpbGQgYW5kIHRoZSBcImZyb21cIiBjaGlsZCBzaW5jZSB3ZSBmb3VuZCBhIG1hdGNoXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJUb05vZGVDaGlsZCA9IHRvTmV4dFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJGcm9tTm9kZUNoaWxkID0gZnJvbU5leHRTaWJsaW5nO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBObyBjb21wYXRpYmxlIG1hdGNoIHNvIHJlbW92ZSB0aGUgb2xkIG5vZGUgZnJvbSB0aGUgRE9NIGFuZCBjb250aW51ZSB0cnlpbmcgdG8gZmluZCBhXG4gICAgICAgICAgICAgICAgICAgIC8vIG1hdGNoIGluIHRoZSBvcmlnaW5hbCBET00uIEhvd2V2ZXIsIHdlIG9ubHkgZG8gdGhpcyBpZiB0aGUgZnJvbSBub2RlIGlzIG5vdCBrZXllZFxuICAgICAgICAgICAgICAgICAgICAvLyBzaW5jZSBpdCBpcyBwb3NzaWJsZSB0aGF0IGEga2V5ZWQgbm9kZSBtaWdodCBtYXRjaCB1cCB3aXRoIGEgbm9kZSBzb21ld2hlcmUgZWxzZSBpbiB0aGVcbiAgICAgICAgICAgICAgICAgICAgLy8gdGFyZ2V0IHRyZWUgYW5kIHdlIGRvbid0IHdhbnQgdG8gZGlzY2FyZCBpdCBqdXN0IHlldCBzaW5jZSBpdCBzdGlsbCBtaWdodCBmaW5kIGFcbiAgICAgICAgICAgICAgICAgICAgLy8gaG9tZSBpbiB0aGUgZmluYWwgRE9NIHRyZWUuIEFmdGVyIGV2ZXJ5dGhpbmcgaXMgZG9uZSB3ZSB3aWxsIHJlbW92ZSBhbnkga2V5ZWQgbm9kZXNcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhhdCBkaWRuJ3QgZmluZCBhIGhvbWVcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1ckZyb21Ob2RlS2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTaW5jZSB0aGUgbm9kZSBpcyBrZXllZCBpdCBtaWdodCBiZSBtYXRjaGVkIHVwIGxhdGVyIHNvIHdlIGRlZmVyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgYWN0dWFsIHJlbW92YWwgdG8gbGF0ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEtleWVkUmVtb3ZhbChjdXJGcm9tTm9kZUtleSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBOT1RFOiB3ZSBza2lwIG5lc3RlZCBrZXllZCBub2RlcyBmcm9tIGJlaW5nIHJlbW92ZWQgc2luY2UgdGhlcmUgaXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgIHN0aWxsIGEgY2hhbmNlIHRoZXkgd2lsbCBiZSBtYXRjaGVkIHVwIGxhdGVyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVOb2RlKGN1ckZyb21Ob2RlQ2hpbGQsIGZyb21FbCwgdHJ1ZSAvKiBza2lwIGtleWVkIG5vZGVzICovKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGN1ckZyb21Ob2RlQ2hpbGQgPSBmcm9tTmV4dFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gSWYgd2UgZ290IHRoaXMgZmFyIHRoZW4gd2UgZGlkIG5vdCBmaW5kIGEgY2FuZGlkYXRlIG1hdGNoIGZvclxuICAgICAgICAgICAgICAgIC8vIG91ciBcInRvIG5vZGVcIiBhbmQgd2UgZXhoYXVzdGVkIGFsbCBvZiB0aGUgY2hpbGRyZW4gXCJmcm9tXCJcbiAgICAgICAgICAgICAgICAvLyBub2Rlcy4gVGhlcmVmb3JlLCB3ZSB3aWxsIGp1c3QgYXBwZW5kIHRoZSBjdXJyZW50IFwidG9cIiBub2RlXG4gICAgICAgICAgICAgICAgLy8gdG8gdGhlIGVuZFxuICAgICAgICAgICAgICAgIGlmIChjdXJUb05vZGVLZXkgJiYgKG1hdGNoaW5nRnJvbUVsID0gZnJvbU5vZGVzTG9va3VwW2N1clRvTm9kZUtleV0pICYmIGNvbXBhcmVOb2RlTmFtZXMobWF0Y2hpbmdGcm9tRWwsIGN1clRvTm9kZUNoaWxkKSkge1xuICAgICAgICAgICAgICAgICAgICBmcm9tRWwuYXBwZW5kQ2hpbGQobWF0Y2hpbmdGcm9tRWwpO1xuICAgICAgICAgICAgICAgICAgICBtb3JwaEVsKG1hdGNoaW5nRnJvbUVsLCBjdXJUb05vZGVDaGlsZCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9uQmVmb3JlTm9kZUFkZGVkUmVzdWx0ID0gb25CZWZvcmVOb2RlQWRkZWQoY3VyVG9Ob2RlQ2hpbGQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAob25CZWZvcmVOb2RlQWRkZWRSZXN1bHQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob25CZWZvcmVOb2RlQWRkZWRSZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJUb05vZGVDaGlsZCA9IG9uQmVmb3JlTm9kZUFkZGVkUmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VyVG9Ob2RlQ2hpbGQuYWN0dWFsaXplKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyVG9Ob2RlQ2hpbGQgPSBjdXJUb05vZGVDaGlsZC5hY3R1YWxpemUoZnJvbUVsLm93bmVyRG9jdW1lbnQgfHwgZG9jKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGZyb21FbC5hcHBlbmRDaGlsZChjdXJUb05vZGVDaGlsZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVOb2RlQWRkZWQoY3VyVG9Ob2RlQ2hpbGQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY3VyVG9Ob2RlQ2hpbGQgPSB0b05leHRTaWJsaW5nO1xuICAgICAgICAgICAgICAgIGN1ckZyb21Ob2RlQ2hpbGQgPSBmcm9tTmV4dFNpYmxpbmc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFdlIGhhdmUgcHJvY2Vzc2VkIGFsbCBvZiB0aGUgXCJ0byBub2Rlc1wiLiBJZiBjdXJGcm9tTm9kZUNoaWxkIGlzXG4gICAgICAgICAgICAvLyBub24tbnVsbCB0aGVuIHdlIHN0aWxsIGhhdmUgc29tZSBmcm9tIG5vZGVzIGxlZnQgb3ZlciB0aGF0IG5lZWRcbiAgICAgICAgICAgIC8vIHRvIGJlIHJlbW92ZWRcbiAgICAgICAgICAgIHdoaWxlIChjdXJGcm9tTm9kZUNoaWxkKSB7XG4gICAgICAgICAgICAgICAgZnJvbU5leHRTaWJsaW5nID0gY3VyRnJvbU5vZGVDaGlsZC5uZXh0U2libGluZztcbiAgICAgICAgICAgICAgICBpZiAoKGN1ckZyb21Ob2RlS2V5ID0gZ2V0Tm9kZUtleShjdXJGcm9tTm9kZUNoaWxkKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU2luY2UgdGhlIG5vZGUgaXMga2V5ZWQgaXQgbWlnaHQgYmUgbWF0Y2hlZCB1cCBsYXRlciBzbyB3ZSBkZWZlclxuICAgICAgICAgICAgICAgICAgICAvLyB0aGUgYWN0dWFsIHJlbW92YWwgdG8gbGF0ZXJcbiAgICAgICAgICAgICAgICAgICAgYWRkS2V5ZWRSZW1vdmFsKGN1ckZyb21Ob2RlS2V5KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBOT1RFOiB3ZSBza2lwIG5lc3RlZCBrZXllZCBub2RlcyBmcm9tIGJlaW5nIHJlbW92ZWQgc2luY2UgdGhlcmUgaXNcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgc3RpbGwgYSBjaGFuY2UgdGhleSB3aWxsIGJlIG1hdGNoZWQgdXAgbGF0ZXJcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlTm9kZShjdXJGcm9tTm9kZUNoaWxkLCBmcm9tRWwsIHRydWUgLyogc2tpcCBrZXllZCBub2RlcyAqLyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGN1ckZyb21Ob2RlQ2hpbGQgPSBmcm9tTmV4dFNpYmxpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc3BlY2lhbEVsSGFuZGxlciA9IHNwZWNpYWxFbEhhbmRsZXJzW2Zyb21FbC5ub2RlTmFtZV07XG4gICAgICAgIGlmIChzcGVjaWFsRWxIYW5kbGVyKSB7XG4gICAgICAgICAgICBzcGVjaWFsRWxIYW5kbGVyKGZyb21FbCwgdG9FbCk7XG4gICAgICAgIH1cbiAgICB9IC8vIEVORDogbW9ycGhFbCguLi4pXG5cbiAgICB2YXIgbW9ycGhlZE5vZGUgPSBmcm9tTm9kZTtcbiAgICB2YXIgbW9ycGhlZE5vZGVUeXBlID0gbW9ycGhlZE5vZGUubm9kZVR5cGU7XG4gICAgdmFyIHRvTm9kZVR5cGUgPSB0b05vZGUubm9kZVR5cGU7XG5cbiAgICBpZiAoIWNoaWxkcmVuT25seSkge1xuICAgICAgICAvLyBIYW5kbGUgdGhlIGNhc2Ugd2hlcmUgd2UgYXJlIGdpdmVuIHR3byBET00gbm9kZXMgdGhhdCBhcmUgbm90XG4gICAgICAgIC8vIGNvbXBhdGlibGUgKGUuZy4gPGRpdj4gLS0+IDxzcGFuPiBvciA8ZGl2PiAtLT4gVEVYVClcbiAgICAgICAgaWYgKG1vcnBoZWROb2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFKSB7XG4gICAgICAgICAgICBpZiAodG9Ob2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFjb21wYXJlTm9kZU5hbWVzKGZyb21Ob2RlLCB0b05vZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIG9uTm9kZURpc2NhcmRlZChmcm9tTm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIG1vcnBoZWROb2RlID0gbW92ZUNoaWxkcmVuKGZyb21Ob2RlLCBjcmVhdGVFbGVtZW50TlModG9Ob2RlLm5vZGVOYW1lLCB0b05vZGUubmFtZXNwYWNlVVJJKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBHb2luZyBmcm9tIGFuIGVsZW1lbnQgbm9kZSB0byBhIHRleHQgbm9kZVxuICAgICAgICAgICAgICAgIG1vcnBoZWROb2RlID0gdG9Ob2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKG1vcnBoZWROb2RlVHlwZSA9PT0gVEVYVF9OT0RFIHx8IG1vcnBoZWROb2RlVHlwZSA9PT0gQ09NTUVOVF9OT0RFKSB7IC8vIFRleHQgb3IgY29tbWVudCBub2RlXG4gICAgICAgICAgICBpZiAodG9Ob2RlVHlwZSA9PT0gbW9ycGhlZE5vZGVUeXBlKSB7XG4gICAgICAgICAgICAgICAgbW9ycGhlZE5vZGUubm9kZVZhbHVlID0gdG9Ob2RlLm5vZGVWYWx1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9ycGhlZE5vZGU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFRleHQgbm9kZSB0byBzb21ldGhpbmcgZWxzZVxuICAgICAgICAgICAgICAgIG1vcnBoZWROb2RlID0gdG9Ob2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG1vcnBoZWROb2RlID09PSB0b05vZGUpIHtcbiAgICAgICAgLy8gVGhlIFwidG8gbm9kZVwiIHdhcyBub3QgY29tcGF0aWJsZSB3aXRoIHRoZSBcImZyb20gbm9kZVwiIHNvIHdlIGhhZCB0b1xuICAgICAgICAvLyB0b3NzIG91dCB0aGUgXCJmcm9tIG5vZGVcIiBhbmQgdXNlIHRoZSBcInRvIG5vZGVcIlxuICAgICAgICBvbk5vZGVEaXNjYXJkZWQoZnJvbU5vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIG1vcnBoRWwobW9ycGhlZE5vZGUsIHRvTm9kZSwgY2hpbGRyZW5Pbmx5KTtcblxuICAgICAgICAvLyBXZSBub3cgbmVlZCB0byBsb29wIG92ZXIgYW55IGtleWVkIG5vZGVzIHRoYXQgbWlnaHQgbmVlZCB0byBiZVxuICAgICAgICAvLyByZW1vdmVkLiBXZSBvbmx5IGRvIHRoZSByZW1vdmFsIGlmIHdlIGtub3cgdGhhdCB0aGUga2V5ZWQgbm9kZVxuICAgICAgICAvLyBuZXZlciBmb3VuZCBhIG1hdGNoLiBXaGVuIGEga2V5ZWQgbm9kZSBpcyBtYXRjaGVkIHVwIHdlIHJlbW92ZVxuICAgICAgICAvLyBpdCBvdXQgb2YgZnJvbU5vZGVzTG9va3VwIGFuZCB3ZSB1c2UgZnJvbU5vZGVzTG9va3VwIHRvIGRldGVybWluZVxuICAgICAgICAvLyBpZiBhIGtleWVkIG5vZGUgaGFzIGJlZW4gbWF0Y2hlZCB1cCBvciBub3RcbiAgICAgICAgaWYgKGtleWVkUmVtb3ZhbExpc3QpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGk9MCwgbGVuPWtleWVkUmVtb3ZhbExpc3QubGVuZ3RoOyBpPGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVsVG9SZW1vdmUgPSBmcm9tTm9kZXNMb29rdXBba2V5ZWRSZW1vdmFsTGlzdFtpXV07XG4gICAgICAgICAgICAgICAgaWYgKGVsVG9SZW1vdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlTm9kZShlbFRvUmVtb3ZlLCBlbFRvUmVtb3ZlLnBhcmVudE5vZGUsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIWNoaWxkcmVuT25seSAmJiBtb3JwaGVkTm9kZSAhPT0gZnJvbU5vZGUgJiYgZnJvbU5vZGUucGFyZW50Tm9kZSkge1xuICAgICAgICBpZiAobW9ycGhlZE5vZGUuYWN0dWFsaXplKSB7XG4gICAgICAgICAgICBtb3JwaGVkTm9kZSA9IG1vcnBoZWROb2RlLmFjdHVhbGl6ZShmcm9tTm9kZS5vd25lckRvY3VtZW50IHx8IGRvYyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgd2UgaGFkIHRvIHN3YXAgb3V0IHRoZSBmcm9tIG5vZGUgd2l0aCBhIG5ldyBub2RlIGJlY2F1c2UgdGhlIG9sZFxuICAgICAgICAvLyBub2RlIHdhcyBub3QgY29tcGF0aWJsZSB3aXRoIHRoZSB0YXJnZXQgbm9kZSB0aGVuIHdlIG5lZWQgdG9cbiAgICAgICAgLy8gcmVwbGFjZSB0aGUgb2xkIERPTSBub2RlIGluIHRoZSBvcmlnaW5hbCBET00gdHJlZS4gVGhpcyBpcyBvbmx5XG4gICAgICAgIC8vIHBvc3NpYmxlIGlmIHRoZSBvcmlnaW5hbCBET00gbm9kZSB3YXMgcGFydCBvZiBhIERPTSB0cmVlIHdoaWNoXG4gICAgICAgIC8vIHdlIGtub3cgaXMgdGhlIGNhc2UgaWYgaXQgaGFzIGEgcGFyZW50IG5vZGUuXG4gICAgICAgIGZyb21Ob2RlLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKG1vcnBoZWROb2RlLCBmcm9tTm9kZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1vcnBoZWROb2RlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1vcnBoZG9tO1xuIiwiY29uc3Qgd2luZG93ID0gcmVxdWlyZSgnZ2xvYmFsL3dpbmRvdycpXG5jb25zdCBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5hbm9yYWZcblxuLy8gT25seSBjYWxsIFJBRiB3aGVuIG5lZWRlZFxuLy8gKGZuLCBmbj8pIC0+IGZuXG5mdW5jdGlvbiBuYW5vcmFmIChyZW5kZXIsIHJhZikge1xuICBhc3NlcnQuZXF1YWwodHlwZW9mIHJlbmRlciwgJ2Z1bmN0aW9uJywgJ25hbm9yYWY6IHJlbmRlciBzaG91bGQgYmUgYSBmdW5jdGlvbicpXG4gIGFzc2VydC5vayh0eXBlb2YgcmFmID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiByYWYgPT09ICd1bmRlZmluZWQnLCAnbmFub3JhZjogcmFmIHNob3VsZCBiZSBhIGZ1bmN0aW9uIG9yIHVuZGVmaW5lZCcpXG5cbiAgaWYgKCFyYWYpIHsgcmFmID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB9XG5cbiAgdmFyIGluUmVuZGVyaW5nVHJhbnNhY3Rpb24gPSBmYWxzZVxuICB2YXIgcmVkcmF3U2NoZWR1bGVkID0gZmFsc2VcbiAgdmFyIGN1cnJlbnRTdGF0ZSA9IG51bGxcblxuICAvLyBwYXNzIG5ldyBzdGF0ZSB0byBiZSByZW5kZXJlZFxuICAvLyAob2JqLCBvYmo/KSAtPiBudWxsXG4gIHJldHVybiBmdW5jdGlvbiBmcmFtZSAoc3RhdGUsIHByZXYpIHtcbiAgICBhc3NlcnQuZXF1YWwodHlwZW9mIHN0YXRlLCAnb2JqZWN0JywgJ25hbm9yYWY6IHN0YXRlIHNob3VsZCBiZSBhbiBvYmplY3QnKVxuICAgIGFzc2VydC5lcXVhbCh0eXBlb2YgcHJldiwgJ29iamVjdCcsICduYW5vcmFmOiBwcmV2IHNob3VsZCBiZSBhbiBvYmplY3QnKVxuICAgIGFzc2VydC5lcXVhbChpblJlbmRlcmluZ1RyYW5zYWN0aW9uLCBmYWxzZSwgJ25hbm9yYWY6IGluZmluaXRlIGxvb3AgZGV0ZWN0ZWQnKVxuXG4gICAgLy8gcmVxdWVzdCBhIHJlZHJhdyBmb3IgbmV4dCBmcmFtZVxuICAgIGlmIChjdXJyZW50U3RhdGUgPT09IG51bGwgJiYgIXJlZHJhd1NjaGVkdWxlZCkge1xuICAgICAgcmVkcmF3U2NoZWR1bGVkID0gdHJ1ZVxuXG4gICAgICByYWYoZnVuY3Rpb24gcmVkcmF3ICgpIHtcbiAgICAgICAgcmVkcmF3U2NoZWR1bGVkID0gZmFsc2VcbiAgICAgICAgaWYgKCFjdXJyZW50U3RhdGUpIHJldHVyblxuXG4gICAgICAgIGluUmVuZGVyaW5nVHJhbnNhY3Rpb24gPSB0cnVlXG4gICAgICAgIHJlbmRlcihjdXJyZW50U3RhdGUsIHByZXYpXG4gICAgICAgIGluUmVuZGVyaW5nVHJhbnNhY3Rpb24gPSBmYWxzZVxuXG4gICAgICAgIGN1cnJlbnRTdGF0ZSA9IG51bGxcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgLy8gdXBkYXRlIGRhdGEgZm9yIHJlZHJhd1xuICAgIGN1cnJlbnRTdGF0ZSA9IHN0YXRlXG4gIH1cbn1cbiIsIi8qIGdsb2JhbCBNdXRhdGlvbk9ic2VydmVyICovXG52YXIgZG9jdW1lbnQgPSByZXF1aXJlKCdnbG9iYWwvZG9jdW1lbnQnKVxudmFyIHdpbmRvdyA9IHJlcXVpcmUoJ2dsb2JhbC93aW5kb3cnKVxudmFyIHdhdGNoID0gT2JqZWN0LmNyZWF0ZShudWxsKVxudmFyIEtFWV9JRCA9ICdvbmxvYWRpZCcgKyAobmV3IERhdGUoKSAlIDllNikudG9TdHJpbmcoMzYpXG52YXIgS0VZX0FUVFIgPSAnZGF0YS0nICsgS0VZX0lEXG52YXIgSU5ERVggPSAwXG5cbmlmICh3aW5kb3cgJiYgd2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIpIHtcbiAgdmFyIG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24gKG11dGF0aW9ucykge1xuICAgIGlmIChPYmplY3Qua2V5cyh3YXRjaCkubGVuZ3RoIDwgMSkgcmV0dXJuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtdXRhdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChtdXRhdGlvbnNbaV0uYXR0cmlidXRlTmFtZSA9PT0gS0VZX0FUVFIpIHtcbiAgICAgICAgZWFjaEF0dHIobXV0YXRpb25zW2ldLCB0dXJub24sIHR1cm5vZmYpXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG4gICAgICBlYWNoTXV0YXRpb24obXV0YXRpb25zW2ldLnJlbW92ZWROb2RlcywgdHVybm9mZilcbiAgICAgIGVhY2hNdXRhdGlvbihtdXRhdGlvbnNbaV0uYWRkZWROb2RlcywgdHVybm9uKVxuICAgIH1cbiAgfSlcbiAgb2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudC5ib2R5LCB7XG4gICAgY2hpbGRMaXN0OiB0cnVlLFxuICAgIHN1YnRyZWU6IHRydWUsXG4gICAgYXR0cmlidXRlczogdHJ1ZSxcbiAgICBhdHRyaWJ1dGVPbGRWYWx1ZTogdHJ1ZSxcbiAgICBhdHRyaWJ1dGVGaWx0ZXI6IFtLRVlfQVRUUl1cbiAgfSlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBvbmxvYWQgKGVsLCBvbiwgb2ZmLCBjYWxsZXIpIHtcbiAgb24gPSBvbiB8fCBmdW5jdGlvbiAoKSB7fVxuICBvZmYgPSBvZmYgfHwgZnVuY3Rpb24gKCkge31cbiAgZWwuc2V0QXR0cmlidXRlKEtFWV9BVFRSLCAnbycgKyBJTkRFWClcbiAgd2F0Y2hbJ28nICsgSU5ERVhdID0gW29uLCBvZmYsIDAsIGNhbGxlciB8fCBvbmxvYWQuY2FsbGVyXVxuICBJTkRFWCArPSAxXG4gIHJldHVybiBlbFxufVxuXG5mdW5jdGlvbiB0dXJub24gKGluZGV4LCBlbCkge1xuICBpZiAod2F0Y2hbaW5kZXhdWzBdICYmIHdhdGNoW2luZGV4XVsyXSA9PT0gMCkge1xuICAgIHdhdGNoW2luZGV4XVswXShlbClcbiAgICB3YXRjaFtpbmRleF1bMl0gPSAxXG4gIH1cbn1cblxuZnVuY3Rpb24gdHVybm9mZiAoaW5kZXgsIGVsKSB7XG4gIGlmICh3YXRjaFtpbmRleF1bMV0gJiYgd2F0Y2hbaW5kZXhdWzJdID09PSAxKSB7XG4gICAgd2F0Y2hbaW5kZXhdWzFdKGVsKVxuICAgIHdhdGNoW2luZGV4XVsyXSA9IDBcbiAgfVxufVxuXG5mdW5jdGlvbiBlYWNoQXR0ciAobXV0YXRpb24sIG9uLCBvZmYpIHtcbiAgdmFyIG5ld1ZhbHVlID0gbXV0YXRpb24udGFyZ2V0LmdldEF0dHJpYnV0ZShLRVlfQVRUUilcbiAgaWYgKHNhbWVPcmlnaW4obXV0YXRpb24ub2xkVmFsdWUsIG5ld1ZhbHVlKSkge1xuICAgIHdhdGNoW25ld1ZhbHVlXSA9IHdhdGNoW211dGF0aW9uLm9sZFZhbHVlXVxuICAgIHJldHVyblxuICB9XG4gIGlmICh3YXRjaFttdXRhdGlvbi5vbGRWYWx1ZV0pIHtcbiAgICBvZmYobXV0YXRpb24ub2xkVmFsdWUsIG11dGF0aW9uLnRhcmdldClcbiAgfVxuICBpZiAod2F0Y2hbbmV3VmFsdWVdKSB7XG4gICAgb24obmV3VmFsdWUsIG11dGF0aW9uLnRhcmdldClcbiAgfVxufVxuXG5mdW5jdGlvbiBzYW1lT3JpZ2luIChvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgaWYgKCFvbGRWYWx1ZSB8fCAhbmV3VmFsdWUpIHJldHVybiBmYWxzZVxuICByZXR1cm4gd2F0Y2hbb2xkVmFsdWVdWzNdID09PSB3YXRjaFtuZXdWYWx1ZV1bM11cbn1cblxuZnVuY3Rpb24gZWFjaE11dGF0aW9uIChub2RlcywgZm4pIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh3YXRjaClcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChub2Rlc1tpXSAmJiBub2Rlc1tpXS5nZXRBdHRyaWJ1dGUgJiYgbm9kZXNbaV0uZ2V0QXR0cmlidXRlKEtFWV9BVFRSKSkge1xuICAgICAgdmFyIG9ubG9hZGlkID0gbm9kZXNbaV0uZ2V0QXR0cmlidXRlKEtFWV9BVFRSKVxuICAgICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XG4gICAgICAgIGlmIChvbmxvYWRpZCA9PT0gaykge1xuICAgICAgICAgIGZuKGssIG5vZGVzW2ldKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgICBpZiAobm9kZXNbaV0uY2hpbGROb2Rlcy5sZW5ndGggPiAwKSB7XG4gICAgICBlYWNoTXV0YXRpb24obm9kZXNbaV0uY2hpbGROb2RlcywgZm4pXG4gICAgfVxuICB9XG59XG4iLCIvKiFcbiAqIHBhZC1sZWZ0IDxodHRwczovL2dpdGh1Yi5jb20vam9uc2NobGlua2VydC9wYWQtbGVmdD5cbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtMjAxNSwgSm9uIFNjaGxpbmtlcnQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVwZWF0ID0gcmVxdWlyZSgncmVwZWF0LXN0cmluZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhZExlZnQoc3RyLCBudW0sIGNoKSB7XG4gIHN0ciA9IHN0ci50b1N0cmluZygpO1xuXG4gIGlmICh0eXBlb2YgbnVtID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBzdHI7XG4gIH1cblxuICBpZiAoY2ggPT09IDApIHtcbiAgICBjaCA9ICcwJztcbiAgfSBlbHNlIGlmIChjaCkge1xuICAgIGNoID0gY2gudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICBjaCA9ICcgJztcbiAgfVxuXG4gIHJldHVybiByZXBlYXQoY2gsIG51bSAtIHN0ci5sZW5ndGgpICsgc3RyO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlcGVhdCA9IHJlcXVpcmUoJ3JlcGVhdC1zdHJpbmcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYWRMZWZ0KHZhbCwgbnVtLCBzdHIpIHtcbiAgdmFyIHBhZGRpbmcgPSAnJztcbiAgdmFyIGRpZmYgPSBudW0gLSB2YWwubGVuZ3RoO1xuXG4gIC8vIEJyZWFrcG9pbnRzIGJhc2VkIG9uIGJlbmNobWFya3MgdG8gdXNlIHRoZSBmYXN0ZXN0IGFwcHJvYWNoXG4gIC8vIGZvciB0aGUgZ2l2ZW4gbnVtYmVyIG9mIHplcm9zXG4gIGlmIChkaWZmIDw9IDUgJiYgIXN0cikge1xuICAgIHBhZGRpbmcgPSAnMDAwMDAnO1xuICB9IGVsc2UgaWYgKGRpZmYgPD0gMjUgJiYgIXN0cikge1xuICAgIHBhZGRpbmcgPSAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdmFsICsgcmVwZWF0KHN0ciB8fCAnMCcsIGRpZmYpO1xuICB9XG5cbiAgcmV0dXJuIHZhbCArIHBhZGRpbmcuc2xpY2UoMCwgZGlmZik7XG59O1xuIiwidmFyIHRyaW0gPSByZXF1aXJlKCd0cmltJylcbiAgLCBmb3JFYWNoID0gcmVxdWlyZSgnZm9yLWVhY2gnKVxuICAsIGlzQXJyYXkgPSBmdW5jdGlvbihhcmcpIHtcbiAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJnKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbiAgICB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGhlYWRlcnMpIHtcbiAgaWYgKCFoZWFkZXJzKVxuICAgIHJldHVybiB7fVxuXG4gIHZhciByZXN1bHQgPSB7fVxuXG4gIGZvckVhY2goXG4gICAgICB0cmltKGhlYWRlcnMpLnNwbGl0KCdcXG4nKVxuICAgICwgZnVuY3Rpb24gKHJvdykge1xuICAgICAgICB2YXIgaW5kZXggPSByb3cuaW5kZXhPZignOicpXG4gICAgICAgICAgLCBrZXkgPSB0cmltKHJvdy5zbGljZSgwLCBpbmRleCkpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgICAsIHZhbHVlID0gdHJpbShyb3cuc2xpY2UoaW5kZXggKyAxKSlcblxuICAgICAgICBpZiAodHlwZW9mKHJlc3VsdFtrZXldKSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICByZXN1bHRba2V5XSA9IHZhbHVlXG4gICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShyZXN1bHRba2V5XSkpIHtcbiAgICAgICAgICByZXN1bHRba2V5XS5wdXNoKHZhbHVlKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdFtrZXldID0gWyByZXN1bHRba2V5XSwgdmFsdWUgXVxuICAgICAgICB9XG4gICAgICB9XG4gIClcblxuICByZXR1cm4gcmVzdWx0XG59IiwiY29uc3QgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0JylcblxubW9kdWxlLmV4cG9ydHMgPSBtYXRjaFxuXG4vLyBnZXQgdXJsIHBhdGggc2VjdGlvbiBmcm9tIGEgdXJsXG4vLyBzdHJpcCBxdWVyeXN0cmluZ3MgLyBoYXNoZXNcbi8vIHN0cmlwIHByb3RvY29sXG4vLyBzdHJpcCBob3N0bmFtZSBhbmQgcG9ydCAoYm90aCBpcCBhbmQgcm91dGUpXG4vLyBzdHIgLT4gc3RyXG5mdW5jdGlvbiBtYXRjaCAocm91dGUpIHtcbiAgYXNzZXJ0LmVxdWFsKHR5cGVvZiByb3V0ZSwgJ3N0cmluZycpXG5cbiAgcmV0dXJuIHJvdXRlLnRyaW0oKVxuICAgIC5yZXBsYWNlKC9bXFw/fCNdLiokLywgJycpXG4gICAgLnJlcGxhY2UoL14oPzpodHRwcz9cXDopXFwvXFwvLywgJycpXG4gICAgLnJlcGxhY2UoL14uKj8oXFwvLiopLywgJyQxJylcbiAgICAucmVwbGFjZSgvXFwvJC8sICcnKVxufVxuIiwiLyohXG4gKiByZXBlYXQtc3RyaW5nIDxodHRwczovL2dpdGh1Yi5jb20vam9uc2NobGlua2VydC9yZXBlYXQtc3RyaW5nPlxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNC0yMDE1LCBKb24gU2NobGlua2VydC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogUmVzdWx0cyBjYWNoZVxuICovXG5cbnZhciByZXMgPSAnJztcbnZhciBjYWNoZTtcblxuLyoqXG4gKiBFeHBvc2UgYHJlcGVhdGBcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcGVhdDtcblxuLyoqXG4gKiBSZXBlYXQgdGhlIGdpdmVuIGBzdHJpbmdgIHRoZSBzcGVjaWZpZWQgYG51bWJlcmBcbiAqIG9mIHRpbWVzLlxuICpcbiAqICoqRXhhbXBsZToqKlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVwZWF0ID0gcmVxdWlyZSgncmVwZWF0LXN0cmluZycpO1xuICogcmVwZWF0KCdBJywgNSk7XG4gKiAvLz0+IEFBQUFBXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gYHN0cmluZ2AgVGhlIHN0cmluZyB0byByZXBlYXRcbiAqIEBwYXJhbSB7TnVtYmVyfSBgbnVtYmVyYCBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIHJlcGVhdCB0aGUgc3RyaW5nXG4gKiBAcmV0dXJuIHtTdHJpbmd9IFJlcGVhdGVkIHN0cmluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiByZXBlYXQoc3RyLCBudW0pIHtcbiAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhwZWN0ZWQgYSBzdHJpbmcnKTtcbiAgfVxuXG4gIC8vIGNvdmVyIGNvbW1vbiwgcXVpY2sgdXNlIGNhc2VzXG4gIGlmIChudW0gPT09IDEpIHJldHVybiBzdHI7XG4gIGlmIChudW0gPT09IDIpIHJldHVybiBzdHIgKyBzdHI7XG5cbiAgdmFyIG1heCA9IHN0ci5sZW5ndGggKiBudW07XG4gIGlmIChjYWNoZSAhPT0gc3RyIHx8IHR5cGVvZiBjYWNoZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjYWNoZSA9IHN0cjtcbiAgICByZXMgPSAnJztcbiAgfSBlbHNlIGlmIChyZXMubGVuZ3RoID49IG1heCkge1xuICAgIHJldHVybiByZXMuc3Vic3RyKDAsIG1heCk7XG4gIH1cblxuICB3aGlsZSAobWF4ID4gcmVzLmxlbmd0aCAmJiBudW0gPiAxKSB7XG4gICAgaWYgKG51bSAmIDEpIHtcbiAgICAgIHJlcyArPSBzdHI7XG4gICAgfVxuXG4gICAgbnVtID4+PSAxO1xuICAgIHN0ciArPSBzdHI7XG4gIH1cblxuICByZXMgKz0gc3RyO1xuICByZXMgPSByZXMuc3Vic3RyKDAsIG1heCk7XG4gIHJldHVybiByZXM7XG59XG4iLCJjb25zdCB3aW5kb3cgPSByZXF1aXJlKCdnbG9iYWwvd2luZG93JylcbmNvbnN0IGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpXG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaFxuXG4vLyBsaXN0ZW4gdG8gd2luZG93IGhhc2hjaGFuZ2UgZXZlbnRzXG4vLyBhbmQgdXBkYXRlIHJvdXRlciBhY2NvcmRpbmdseVxuLy8gZm4oY2IpIC0+IG51bGxcbmZ1bmN0aW9uIGhhc2ggKGNiKSB7XG4gIGFzc2VydC5lcXVhbCh0eXBlb2YgY2IsICdmdW5jdGlvbicsICdjYiBtdXN0IGJlIGEgZnVuY3Rpb24nKVxuICB3aW5kb3cub25oYXNoY2hhbmdlID0gZnVuY3Rpb24gKGUpIHtcbiAgICBjYih3aW5kb3cubG9jYXRpb24uaGFzaClcbiAgfVxufVxuIiwiY29uc3QgZG9jdW1lbnQgPSByZXF1aXJlKCdnbG9iYWwvZG9jdW1lbnQnKVxuY29uc3Qgd2luZG93ID0gcmVxdWlyZSgnZ2xvYmFsL3dpbmRvdycpXG5jb25zdCBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhpc3RvcnlcblxuLy8gbGlzdGVuIHRvIGh0bWw1IHB1c2hzdGF0ZSBldmVudHNcbi8vIGFuZCB1cGRhdGUgcm91dGVyIGFjY29yZGluZ2x5XG4vLyBmbihzdHIpIC0+IG51bGxcbmZ1bmN0aW9uIGhpc3RvcnkgKGNiKSB7XG4gIGFzc2VydC5lcXVhbCh0eXBlb2YgY2IsICdmdW5jdGlvbicsICdjYiBtdXN0IGJlIGEgZnVuY3Rpb24nKVxuICB3aW5kb3cub25wb3BzdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBjYihkb2N1bWVudC5sb2NhdGlvbi5ocmVmKVxuICB9XG59XG4iLCJjb25zdCB3aW5kb3cgPSByZXF1aXJlKCdnbG9iYWwvd2luZG93JylcbmNvbnN0IGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpXG5cbm1vZHVsZS5leHBvcnRzID0gaHJlZlxuXG4vLyBoYW5kbGUgYSBjbGljayBpZiBpcyBhbmNob3IgdGFnIHdpdGggYW4gaHJlZlxuLy8gYW5kIHVybCBsaXZlcyBvbiB0aGUgc2FtZSBkb21haW4uIFJlcGxhY2VzXG4vLyB0cmFpbGluZyAnIycgc28gZW1wdHkgbGlua3Mgd29yayBhcyBleHBlY3RlZC5cbi8vIGZuKHN0cikgLT4gbnVsbFxuZnVuY3Rpb24gaHJlZiAoY2IpIHtcbiAgYXNzZXJ0LmVxdWFsKHR5cGVvZiBjYiwgJ2Z1bmN0aW9uJywgJ2NiIG11c3QgYmUgYSBmdW5jdGlvbicpXG5cbiAgd2luZG93Lm9uY2xpY2sgPSBmdW5jdGlvbiAoZSkge1xuICAgIGNvbnN0IG5vZGUgPSAoZnVuY3Rpb24gdHJhdmVyc2UgKG5vZGUpIHtcbiAgICAgIGlmICghbm9kZSkgcmV0dXJuXG4gICAgICBpZiAobm9kZS5sb2NhbE5hbWUgIT09ICdhJykgcmV0dXJuIHRyYXZlcnNlKG5vZGUucGFyZW50Tm9kZSlcbiAgICAgIGlmIChub2RlLmhyZWYgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHRyYXZlcnNlKG5vZGUucGFyZW50Tm9kZSlcbiAgICAgIGlmICh3aW5kb3cubG9jYXRpb24uaG9zdCAhPT0gbm9kZS5ob3N0KSByZXR1cm4gdHJhdmVyc2Uobm9kZS5wYXJlbnROb2RlKVxuICAgICAgcmV0dXJuIG5vZGVcbiAgICB9KShlLnRhcmdldClcblxuICAgIGlmICghbm9kZSkgcmV0dXJuXG5cbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zdCBocmVmID0gbm9kZS5ocmVmLnJlcGxhY2UoLyMkLywgJycpXG4gICAgY2IoaHJlZilcbiAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoe30sIG51bGwsIGhyZWYpXG4gIH1cbn1cbiIsImNvbnN0IHBhdGhuYW1lID0gcmVxdWlyZSgncGF0aG5hbWUtbWF0Y2gnKVxuY29uc3Qgd2F5ZmFyZXIgPSByZXF1aXJlKCd3YXlmYXJlcicpXG5jb25zdCBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNoZWV0Um91dGVyXG5cbi8vIEZhc3QsIG1vZHVsYXIgY2xpZW50IHJvdXRlclxuLy8gZm4oc3RyLCBhbnlbLi5dLCBmbj8pIC0+IGZuKHN0ciwgYW55Wy4uXSlcbmZ1bmN0aW9uIHNoZWV0Um91dGVyIChkZnQsIGNyZWF0ZVRyZWUsIGNyZWF0ZVJvdXRlKSB7XG4gIGNyZWF0ZVJvdXRlID0gKGNyZWF0ZVJvdXRlID8gY3JlYXRlUm91dGUoX2NyZWF0ZVJvdXRlKSA6IF9jcmVhdGVSb3V0ZSlcblxuICBpZiAoIWNyZWF0ZVRyZWUpIHtcbiAgICBjcmVhdGVUcmVlID0gZGZ0XG4gICAgZGZ0ID0gJydcbiAgfVxuXG4gIGFzc2VydC5lcXVhbCh0eXBlb2YgZGZ0LCAnc3RyaW5nJywgJ3NoZWV0LXJvdXRlcjogZGZ0IG11c3QgYmUgYSBzdHJpbmcnKVxuICBhc3NlcnQuZXF1YWwodHlwZW9mIGNyZWF0ZVRyZWUsICdmdW5jdGlvbicsICdzaGVldC1yb3V0ZXI6IGNyZWF0ZVRyZWUgbXVzdCBiZSBhIGZ1bmN0aW9uJylcbiAgYXNzZXJ0LmVxdWFsKHR5cGVvZiBjcmVhdGVSb3V0ZSwgJ2Z1bmN0aW9uJywgJ3NoZWV0LXJvdXRlcjogY3JlYXRlUm91dGUgbXVzdCBiZSBhIGZ1bmN0aW9uJylcblxuICBjb25zdCByb3V0ZXIgPSB3YXlmYXJlcihkZnQpXG4gIGNvbnN0IHRyZWUgPSBjcmVhdGVUcmVlKGNyZWF0ZVJvdXRlKVxuXG4gIC8vIHJlZ2lzdGVyIHRyZWUgaW4gcm91dGVyXG4gIDsoZnVuY3Rpb24gd2FsayAodHJlZSwgcm91dGUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0cmVlWzBdKSkge1xuICAgICAgLy8gd2FsayBvdmVyIGFsbCByb3V0ZXMgYXQgdGhlIHJvb3Qgb2YgdGhlIHRyZWVcbiAgICAgIHRyZWUuZm9yRWFjaChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICB3YWxrKG5vZGUsIHJvdXRlKVxuICAgICAgfSlcbiAgICB9IGVsc2UgaWYgKHRyZWVbMV0pIHtcbiAgICAgIC8vIGhhbmRsZSBpbmxpbmUgZnVuY3Rpb25zIGFzIGFyZ3NcbiAgICAgIGNvbnN0IGlubmVyUm91dGUgPSB0cmVlWzBdXG4gICAgICAgID8gcm91dGUuY29uY2F0KHRyZWVbMF0pLmpvaW4oJy8nKVxuICAgICAgICA6IHJvdXRlLmxlbmd0aCA/IHJvdXRlLmpvaW4oJy8nKSA6IHRyZWVbMF1cbiAgICAgIHJvdXRlci5vbihpbm5lclJvdXRlLCB0cmVlWzFdKVxuICAgICAgd2Fsayh0cmVlWzJdLCByb3V0ZS5jb25jYXQodHJlZVswXSkpXG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHRyZWVbMl0pKSB7XG4gICAgICAvLyB0cmF2ZXJzZSBhbmQgYXBwZW5kIHJvdXRlXG4gICAgICB3YWxrKHRyZWVbMl0sIHJvdXRlLmNvbmNhdCh0cmVlWzBdKSlcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gcmVnaXN0ZXIgcGF0aCBpbiByb3V0ZXJcbiAgICAgIGNvbnN0IG53Um91dGUgPSB0cmVlWzBdXG4gICAgICAgID8gcm91dGUuY29uY2F0KHRyZWVbMF0pLmpvaW4oJy8nKVxuICAgICAgICA6IHJvdXRlLmxlbmd0aCA/IHJvdXRlLmpvaW4oJy8nKSA6IHRyZWVbMF1cbiAgICAgIHJvdXRlci5vbihud1JvdXRlLCB0cmVlWzJdKVxuICAgIH1cbiAgfSkodHJlZSwgW10pXG5cbiAgLy8gbWF0Y2ggYSByb3V0ZSBvbiB0aGUgcm91dGVyXG4gIHJldHVybiBmdW5jdGlvbiBtYXRjaCAocm91dGUpIHtcbiAgICBhc3NlcnQuZXF1YWwodHlwZW9mIHJvdXRlLCAnc3RyaW5nJywgJ3JvdXRlIG11c3QgYmUgYSBzdHJpbmcnKVxuICAgIGNvbnN0IGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cylcbiAgICBhcmdzWzBdID0gcGF0aG5hbWUoYXJnc1swXSlcbiAgICByZXR1cm4gcm91dGVyLmFwcGx5KG51bGwsIGFyZ3MpXG4gIH1cbn1cblxuLy8gcmVnaXN0ZXIgcmVndWxhciByb3V0ZVxuZnVuY3Rpb24gX2NyZWF0ZVJvdXRlIChyb3V0ZSwgaW5saW5lLCBjaGlsZCkge1xuICBpZiAoIWNoaWxkKSB7XG4gICAgY2hpbGQgPSBpbmxpbmVcbiAgICBpbmxpbmUgPSBudWxsXG4gIH1cbiAgYXNzZXJ0LmVxdWFsKHR5cGVvZiByb3V0ZSwgJ3N0cmluZycsICdyb3V0ZSBtdXN0IGJlIGEgc3RyaW5nJylcbiAgYXNzZXJ0Lm9rKGNoaWxkLCAnY2hpbGQgZXhpc3RzJylcbiAgcm91dGUgPSByb3V0ZS5yZXBsYWNlKC9eXFwvLywgJycpXG4gIHJldHVybiBbIHJvdXRlLCBpbmxpbmUsIGNoaWxkIF1cbn1cbiIsIlwidXNlIHN0cmljdFwiXG4vLyBNb2R1bGUgZXhwb3J0IHBhdHRlcm4gZnJvbVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3VtZGpzL3VtZC9ibG9iL21hc3Rlci9yZXR1cm5FeHBvcnRzLmpzXG47KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICAvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG4gICAgICAgIGRlZmluZShbXSwgZmFjdG9yeSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgLy8gTm9kZS4gRG9lcyBub3Qgd29yayB3aXRoIHN0cmljdCBDb21tb25KUywgYnV0XG4gICAgICAgIC8vIG9ubHkgQ29tbW9uSlMtbGlrZSBlbnZpcm9ubWVudHMgdGhhdCBzdXBwb3J0IG1vZHVsZS5leHBvcnRzLFxuICAgICAgICAvLyBsaWtlIE5vZGUuXG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEJyb3dzZXIgZ2xvYmFscyAocm9vdCBpcyB3aW5kb3cpXG4gICAgICAgIHJvb3Quc3RvcmUgPSBmYWN0b3J5KCk7XG4gIH1cbn0odGhpcywgZnVuY3Rpb24gKCkge1xuXHRcblx0Ly8gU3RvcmUuanNcblx0dmFyIHN0b3JlID0ge30sXG5cdFx0d2luID0gKHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiBnbG9iYWwpLFxuXHRcdGRvYyA9IHdpbi5kb2N1bWVudCxcblx0XHRsb2NhbFN0b3JhZ2VOYW1lID0gJ2xvY2FsU3RvcmFnZScsXG5cdFx0c2NyaXB0VGFnID0gJ3NjcmlwdCcsXG5cdFx0c3RvcmFnZVxuXG5cdHN0b3JlLmRpc2FibGVkID0gZmFsc2Vcblx0c3RvcmUudmVyc2lvbiA9ICcxLjMuMjAnXG5cdHN0b3JlLnNldCA9IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHt9XG5cdHN0b3JlLmdldCA9IGZ1bmN0aW9uKGtleSwgZGVmYXVsdFZhbCkge31cblx0c3RvcmUuaGFzID0gZnVuY3Rpb24oa2V5KSB7IHJldHVybiBzdG9yZS5nZXQoa2V5KSAhPT0gdW5kZWZpbmVkIH1cblx0c3RvcmUucmVtb3ZlID0gZnVuY3Rpb24oa2V5KSB7fVxuXHRzdG9yZS5jbGVhciA9IGZ1bmN0aW9uKCkge31cblx0c3RvcmUudHJhbnNhY3QgPSBmdW5jdGlvbihrZXksIGRlZmF1bHRWYWwsIHRyYW5zYWN0aW9uRm4pIHtcblx0XHRpZiAodHJhbnNhY3Rpb25GbiA9PSBudWxsKSB7XG5cdFx0XHR0cmFuc2FjdGlvbkZuID0gZGVmYXVsdFZhbFxuXHRcdFx0ZGVmYXVsdFZhbCA9IG51bGxcblx0XHR9XG5cdFx0aWYgKGRlZmF1bHRWYWwgPT0gbnVsbCkge1xuXHRcdFx0ZGVmYXVsdFZhbCA9IHt9XG5cdFx0fVxuXHRcdHZhciB2YWwgPSBzdG9yZS5nZXQoa2V5LCBkZWZhdWx0VmFsKVxuXHRcdHRyYW5zYWN0aW9uRm4odmFsKVxuXHRcdHN0b3JlLnNldChrZXksIHZhbClcblx0fVxuXHRzdG9yZS5nZXRBbGwgPSBmdW5jdGlvbigpIHt9XG5cdHN0b3JlLmZvckVhY2ggPSBmdW5jdGlvbigpIHt9XG5cblx0c3RvcmUuc2VyaWFsaXplID0gZnVuY3Rpb24odmFsdWUpIHtcblx0XHRyZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsdWUpXG5cdH1cblx0c3RvcmUuZGVzZXJpYWxpemUgPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdGlmICh0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIHsgcmV0dXJuIHVuZGVmaW5lZCB9XG5cdFx0dHJ5IHsgcmV0dXJuIEpTT04ucGFyc2UodmFsdWUpIH1cblx0XHRjYXRjaChlKSB7IHJldHVybiB2YWx1ZSB8fCB1bmRlZmluZWQgfVxuXHR9XG5cblx0Ly8gRnVuY3Rpb25zIHRvIGVuY2Fwc3VsYXRlIHF1ZXN0aW9uYWJsZSBGaXJlRm94IDMuNi4xMyBiZWhhdmlvclxuXHQvLyB3aGVuIGFib3V0LmNvbmZpZzo6ZG9tLnN0b3JhZ2UuZW5hYmxlZCA9PT0gZmFsc2Vcblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXJjdXN3ZXN0aW4vc3RvcmUuanMvaXNzdWVzI2lzc3VlLzEzXG5cdGZ1bmN0aW9uIGlzTG9jYWxTdG9yYWdlTmFtZVN1cHBvcnRlZCgpIHtcblx0XHR0cnkgeyByZXR1cm4gKGxvY2FsU3RvcmFnZU5hbWUgaW4gd2luICYmIHdpbltsb2NhbFN0b3JhZ2VOYW1lXSkgfVxuXHRcdGNhdGNoKGVycikgeyByZXR1cm4gZmFsc2UgfVxuXHR9XG5cblx0aWYgKGlzTG9jYWxTdG9yYWdlTmFtZVN1cHBvcnRlZCgpKSB7XG5cdFx0c3RvcmFnZSA9IHdpbltsb2NhbFN0b3JhZ2VOYW1lXVxuXHRcdHN0b3JlLnNldCA9IGZ1bmN0aW9uKGtleSwgdmFsKSB7XG5cdFx0XHRpZiAodmFsID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIHN0b3JlLnJlbW92ZShrZXkpIH1cblx0XHRcdHN0b3JhZ2Uuc2V0SXRlbShrZXksIHN0b3JlLnNlcmlhbGl6ZSh2YWwpKVxuXHRcdFx0cmV0dXJuIHZhbFxuXHRcdH1cblx0XHRzdG9yZS5nZXQgPSBmdW5jdGlvbihrZXksIGRlZmF1bHRWYWwpIHtcblx0XHRcdHZhciB2YWwgPSBzdG9yZS5kZXNlcmlhbGl6ZShzdG9yYWdlLmdldEl0ZW0oa2V5KSlcblx0XHRcdHJldHVybiAodmFsID09PSB1bmRlZmluZWQgPyBkZWZhdWx0VmFsIDogdmFsKVxuXHRcdH1cblx0XHRzdG9yZS5yZW1vdmUgPSBmdW5jdGlvbihrZXkpIHsgc3RvcmFnZS5yZW1vdmVJdGVtKGtleSkgfVxuXHRcdHN0b3JlLmNsZWFyID0gZnVuY3Rpb24oKSB7IHN0b3JhZ2UuY2xlYXIoKSB9XG5cdFx0c3RvcmUuZ2V0QWxsID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgcmV0ID0ge31cblx0XHRcdHN0b3JlLmZvckVhY2goZnVuY3Rpb24oa2V5LCB2YWwpIHtcblx0XHRcdFx0cmV0W2tleV0gPSB2YWxcblx0XHRcdH0pXG5cdFx0XHRyZXR1cm4gcmV0XG5cdFx0fVxuXHRcdHN0b3JlLmZvckVhY2ggPSBmdW5jdGlvbihjYWxsYmFjaykge1xuXHRcdFx0Zm9yICh2YXIgaT0wOyBpPHN0b3JhZ2UubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0dmFyIGtleSA9IHN0b3JhZ2Uua2V5KGkpXG5cdFx0XHRcdGNhbGxiYWNrKGtleSwgc3RvcmUuZ2V0KGtleSkpXG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2UgaWYgKGRvYyAmJiBkb2MuZG9jdW1lbnRFbGVtZW50LmFkZEJlaGF2aW9yKSB7XG5cdFx0dmFyIHN0b3JhZ2VPd25lcixcblx0XHRcdHN0b3JhZ2VDb250YWluZXJcblx0XHQvLyBTaW5jZSAjdXNlckRhdGEgc3RvcmFnZSBhcHBsaWVzIG9ubHkgdG8gc3BlY2lmaWMgcGF0aHMsIHdlIG5lZWQgdG9cblx0XHQvLyBzb21laG93IGxpbmsgb3VyIGRhdGEgdG8gYSBzcGVjaWZpYyBwYXRoLiAgV2UgY2hvb3NlIC9mYXZpY29uLmljb1xuXHRcdC8vIGFzIGEgcHJldHR5IHNhZmUgb3B0aW9uLCBzaW5jZSBhbGwgYnJvd3NlcnMgYWxyZWFkeSBtYWtlIGEgcmVxdWVzdCB0b1xuXHRcdC8vIHRoaXMgVVJMIGFueXdheSBhbmQgYmVpbmcgYSA0MDQgd2lsbCBub3QgaHVydCB1cyBoZXJlLiAgV2Ugd3JhcCBhblxuXHRcdC8vIGlmcmFtZSBwb2ludGluZyB0byB0aGUgZmF2aWNvbiBpbiBhbiBBY3RpdmVYT2JqZWN0KGh0bWxmaWxlKSBvYmplY3Rcblx0XHQvLyAoc2VlOiBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvYWE3NTI1NzQodj1WUy44NSkuYXNweClcblx0XHQvLyBzaW5jZSB0aGUgaWZyYW1lIGFjY2VzcyBydWxlcyBhcHBlYXIgdG8gYWxsb3cgZGlyZWN0IGFjY2VzcyBhbmRcblx0XHQvLyBtYW5pcHVsYXRpb24gb2YgdGhlIGRvY3VtZW50IGVsZW1lbnQsIGV2ZW4gZm9yIGEgNDA0IHBhZ2UuICBUaGlzXG5cdFx0Ly8gZG9jdW1lbnQgY2FuIGJlIHVzZWQgaW5zdGVhZCBvZiB0aGUgY3VycmVudCBkb2N1bWVudCAod2hpY2ggd291bGRcblx0XHQvLyBoYXZlIGJlZW4gbGltaXRlZCB0byB0aGUgY3VycmVudCBwYXRoKSB0byBwZXJmb3JtICN1c2VyRGF0YSBzdG9yYWdlLlxuXHRcdHRyeSB7XG5cdFx0XHRzdG9yYWdlQ29udGFpbmVyID0gbmV3IEFjdGl2ZVhPYmplY3QoJ2h0bWxmaWxlJylcblx0XHRcdHN0b3JhZ2VDb250YWluZXIub3BlbigpXG5cdFx0XHRzdG9yYWdlQ29udGFpbmVyLndyaXRlKCc8JytzY3JpcHRUYWcrJz5kb2N1bWVudC53PXdpbmRvdzwvJytzY3JpcHRUYWcrJz48aWZyYW1lIHNyYz1cIi9mYXZpY29uLmljb1wiPjwvaWZyYW1lPicpXG5cdFx0XHRzdG9yYWdlQ29udGFpbmVyLmNsb3NlKClcblx0XHRcdHN0b3JhZ2VPd25lciA9IHN0b3JhZ2VDb250YWluZXIudy5mcmFtZXNbMF0uZG9jdW1lbnRcblx0XHRcdHN0b3JhZ2UgPSBzdG9yYWdlT3duZXIuY3JlYXRlRWxlbWVudCgnZGl2Jylcblx0XHR9IGNhdGNoKGUpIHtcblx0XHRcdC8vIHNvbWVob3cgQWN0aXZlWE9iamVjdCBpbnN0YW50aWF0aW9uIGZhaWxlZCAocGVyaGFwcyBzb21lIHNwZWNpYWxcblx0XHRcdC8vIHNlY3VyaXR5IHNldHRpbmdzIG9yIG90aGVyd3NlKSwgZmFsbCBiYWNrIHRvIHBlci1wYXRoIHN0b3JhZ2Vcblx0XHRcdHN0b3JhZ2UgPSBkb2MuY3JlYXRlRWxlbWVudCgnZGl2Jylcblx0XHRcdHN0b3JhZ2VPd25lciA9IGRvYy5ib2R5XG5cdFx0fVxuXHRcdHZhciB3aXRoSUVTdG9yYWdlID0gZnVuY3Rpb24oc3RvcmVGdW5jdGlvbikge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMClcblx0XHRcdFx0YXJncy51bnNoaWZ0KHN0b3JhZ2UpXG5cdFx0XHRcdC8vIFNlZSBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzEwODEodj1WUy44NSkuYXNweFxuXHRcdFx0XHQvLyBhbmQgaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTMxNDI0KHY9VlMuODUpLmFzcHhcblx0XHRcdFx0c3RvcmFnZU93bmVyLmFwcGVuZENoaWxkKHN0b3JhZ2UpXG5cdFx0XHRcdHN0b3JhZ2UuYWRkQmVoYXZpb3IoJyNkZWZhdWx0I3VzZXJEYXRhJylcblx0XHRcdFx0c3RvcmFnZS5sb2FkKGxvY2FsU3RvcmFnZU5hbWUpXG5cdFx0XHRcdHZhciByZXN1bHQgPSBzdG9yZUZ1bmN0aW9uLmFwcGx5KHN0b3JlLCBhcmdzKVxuXHRcdFx0XHRzdG9yYWdlT3duZXIucmVtb3ZlQ2hpbGQoc3RvcmFnZSlcblx0XHRcdFx0cmV0dXJuIHJlc3VsdFxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEluIElFNywga2V5cyBjYW5ub3Qgc3RhcnQgd2l0aCBhIGRpZ2l0IG9yIGNvbnRhaW4gY2VydGFpbiBjaGFycy5cblx0XHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL21hcmN1c3dlc3Rpbi9zdG9yZS5qcy9pc3N1ZXMvNDBcblx0XHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL21hcmN1c3dlc3Rpbi9zdG9yZS5qcy9pc3N1ZXMvODNcblx0XHR2YXIgZm9yYmlkZGVuQ2hhcnNSZWdleCA9IG5ldyBSZWdFeHAoXCJbIVxcXCIjJCUmJygpKissL1xcXFxcXFxcOjs8PT4/QFtcXFxcXV5ge3x9fl1cIiwgXCJnXCIpXG5cdFx0dmFyIGllS2V5Rml4ID0gZnVuY3Rpb24oa2V5KSB7XG5cdFx0XHRyZXR1cm4ga2V5LnJlcGxhY2UoL15kLywgJ19fXyQmJykucmVwbGFjZShmb3JiaWRkZW5DaGFyc1JlZ2V4LCAnX19fJylcblx0XHR9XG5cdFx0c3RvcmUuc2V0ID0gd2l0aElFU3RvcmFnZShmdW5jdGlvbihzdG9yYWdlLCBrZXksIHZhbCkge1xuXHRcdFx0a2V5ID0gaWVLZXlGaXgoa2V5KVxuXHRcdFx0aWYgKHZhbCA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiBzdG9yZS5yZW1vdmUoa2V5KSB9XG5cdFx0XHRzdG9yYWdlLnNldEF0dHJpYnV0ZShrZXksIHN0b3JlLnNlcmlhbGl6ZSh2YWwpKVxuXHRcdFx0c3RvcmFnZS5zYXZlKGxvY2FsU3RvcmFnZU5hbWUpXG5cdFx0XHRyZXR1cm4gdmFsXG5cdFx0fSlcblx0XHRzdG9yZS5nZXQgPSB3aXRoSUVTdG9yYWdlKGZ1bmN0aW9uKHN0b3JhZ2UsIGtleSwgZGVmYXVsdFZhbCkge1xuXHRcdFx0a2V5ID0gaWVLZXlGaXgoa2V5KVxuXHRcdFx0dmFyIHZhbCA9IHN0b3JlLmRlc2VyaWFsaXplKHN0b3JhZ2UuZ2V0QXR0cmlidXRlKGtleSkpXG5cdFx0XHRyZXR1cm4gKHZhbCA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdFZhbCA6IHZhbClcblx0XHR9KVxuXHRcdHN0b3JlLnJlbW92ZSA9IHdpdGhJRVN0b3JhZ2UoZnVuY3Rpb24oc3RvcmFnZSwga2V5KSB7XG5cdFx0XHRrZXkgPSBpZUtleUZpeChrZXkpXG5cdFx0XHRzdG9yYWdlLnJlbW92ZUF0dHJpYnV0ZShrZXkpXG5cdFx0XHRzdG9yYWdlLnNhdmUobG9jYWxTdG9yYWdlTmFtZSlcblx0XHR9KVxuXHRcdHN0b3JlLmNsZWFyID0gd2l0aElFU3RvcmFnZShmdW5jdGlvbihzdG9yYWdlKSB7XG5cdFx0XHR2YXIgYXR0cmlidXRlcyA9IHN0b3JhZ2UuWE1MRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmF0dHJpYnV0ZXNcblx0XHRcdHN0b3JhZ2UubG9hZChsb2NhbFN0b3JhZ2VOYW1lKVxuXHRcdFx0Zm9yICh2YXIgaT1hdHRyaWJ1dGVzLmxlbmd0aC0xOyBpPj0wOyBpLS0pIHtcblx0XHRcdFx0c3RvcmFnZS5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlc1tpXS5uYW1lKVxuXHRcdFx0fVxuXHRcdFx0c3RvcmFnZS5zYXZlKGxvY2FsU3RvcmFnZU5hbWUpXG5cdFx0fSlcblx0XHRzdG9yZS5nZXRBbGwgPSBmdW5jdGlvbihzdG9yYWdlKSB7XG5cdFx0XHR2YXIgcmV0ID0ge31cblx0XHRcdHN0b3JlLmZvckVhY2goZnVuY3Rpb24oa2V5LCB2YWwpIHtcblx0XHRcdFx0cmV0W2tleV0gPSB2YWxcblx0XHRcdH0pXG5cdFx0XHRyZXR1cm4gcmV0XG5cdFx0fVxuXHRcdHN0b3JlLmZvckVhY2ggPSB3aXRoSUVTdG9yYWdlKGZ1bmN0aW9uKHN0b3JhZ2UsIGNhbGxiYWNrKSB7XG5cdFx0XHR2YXIgYXR0cmlidXRlcyA9IHN0b3JhZ2UuWE1MRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmF0dHJpYnV0ZXNcblx0XHRcdGZvciAodmFyIGk9MCwgYXR0cjsgYXR0cj1hdHRyaWJ1dGVzW2ldOyArK2kpIHtcblx0XHRcdFx0Y2FsbGJhY2soYXR0ci5uYW1lLCBzdG9yZS5kZXNlcmlhbGl6ZShzdG9yYWdlLmdldEF0dHJpYnV0ZShhdHRyLm5hbWUpKSlcblx0XHRcdH1cblx0XHR9KVxuXHR9XG5cblx0dHJ5IHtcblx0XHR2YXIgdGVzdEtleSA9ICdfX3N0b3JlanNfXydcblx0XHRzdG9yZS5zZXQodGVzdEtleSwgdGVzdEtleSlcblx0XHRpZiAoc3RvcmUuZ2V0KHRlc3RLZXkpICE9IHRlc3RLZXkpIHsgc3RvcmUuZGlzYWJsZWQgPSB0cnVlIH1cblx0XHRzdG9yZS5yZW1vdmUodGVzdEtleSlcblx0fSBjYXRjaChlKSB7XG5cdFx0c3RvcmUuZGlzYWJsZWQgPSB0cnVlXG5cdH1cblx0c3RvcmUuZW5hYmxlZCA9ICFzdG9yZS5kaXNhYmxlZFxuXHRcblx0cmV0dXJuIHN0b3JlXG59KSk7XG4iLCJcbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHRyaW07XG5cbmZ1bmN0aW9uIHRyaW0oc3RyKXtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzKnxcXHMqJC9nLCAnJyk7XG59XG5cbmV4cG9ydHMubGVmdCA9IGZ1bmN0aW9uKHN0cil7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyovLCAnJyk7XG59O1xuXG5leHBvcnRzLnJpZ2h0ID0gZnVuY3Rpb24oc3RyKXtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9cXHMqJC8sICcnKTtcbn07XG4iLCIndXNlIHN0cmljdCdcblxuLyoqXG4gKiBHZW5lcmF0ZSBhIGZ1bmN0aW9uIGZvciBzZXF1ZW5jZXMgb2YgcmUtdXNhYmxlIElEcy5cbiAqXG4gKiBAcGFyYW0gcHJlZml4IHtzdHJpbmd9XG4gKiBAcGFyYW0gc3VmZml4IHtzdHJpbmd9XG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHByZWZpeCwgc3VmZml4KSB7XG4gIHZhciBpZCA9IDBcblxuICBwcmVmaXggPSBwcmVmaXggfHwgJydcbiAgc3VmZml4ID0gc3VmZml4IHx8ICcnXG5cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gcHJlZml4ICsgKGlkKyspICsgc3VmZml4XG4gIH1cbn1cbiIsImNvbnN0IGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpXG5jb25zdCB0cmllID0gcmVxdWlyZSgnLi90cmllJylcblxubW9kdWxlLmV4cG9ydHMgPSBXYXlmYXJlclxuXG4vLyBjcmVhdGUgYSByb3V0ZXJcbi8vIHN0ciAtPiBvYmpcbmZ1bmN0aW9uIFdheWZhcmVyIChkZnQpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFdheWZhcmVyKSkgcmV0dXJuIG5ldyBXYXlmYXJlcihkZnQpXG5cbiAgY29uc3QgX2RlZmF1bHQgPSAoZGZ0IHx8ICcnKS5yZXBsYWNlKC9eXFwvLywgJycpXG4gIGNvbnN0IF90cmllID0gdHJpZSgpXG5cbiAgZW1pdC5fdHJpZSA9IF90cmllXG4gIGVtaXQuZW1pdCA9IGVtaXRcbiAgZW1pdC5vbiA9IG9uXG4gIGVtaXQuX3dheWZhcmVyID0gdHJ1ZVxuXG4gIHJldHVybiBlbWl0XG5cbiAgLy8gZGVmaW5lIGEgcm91dGVcbiAgLy8gKHN0ciwgZm4pIC0+IG9ialxuICBmdW5jdGlvbiBvbiAocm91dGUsIGNiKSB7XG4gICAgYXNzZXJ0LmVxdWFsKHR5cGVvZiByb3V0ZSwgJ3N0cmluZycpXG4gICAgYXNzZXJ0LmVxdWFsKHR5cGVvZiBjYiwgJ2Z1bmN0aW9uJylcblxuICAgIHJvdXRlID0gcm91dGUgfHwgJy8nXG5cbiAgICBpZiAoY2IgJiYgY2IuX3dheWZhcmVyICYmIGNiLl90cmllKSB7XG4gICAgICBfdHJpZS5tb3VudChyb3V0ZSwgY2IuX3RyaWUudHJpZSlcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgbm9kZSA9IF90cmllLmNyZWF0ZShyb3V0ZSlcbiAgICAgIG5vZGUuY2IgPSBjYlxuICAgIH1cblxuICAgIHJldHVybiBlbWl0XG4gIH1cblxuICAvLyBtYXRjaCBhbmQgY2FsbCBhIHJvdXRlXG4gIC8vIChzdHIsIG9iaj8pIC0+IG51bGxcbiAgZnVuY3Rpb24gZW1pdCAocm91dGUpIHtcbiAgICBhc3NlcnQubm90RXF1YWwocm91dGUsIHVuZGVmaW5lZCwgXCIncm91dGUnIG11c3QgYmUgZGVmaW5lZFwiKVxuICAgIGNvbnN0IGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aClcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV1cbiAgICB9XG5cbiAgICBjb25zdCBub2RlID0gX3RyaWUubWF0Y2gocm91dGUpXG4gICAgaWYgKG5vZGUgJiYgbm9kZS5jYikge1xuICAgICAgYXJnc1swXSA9IG5vZGUucGFyYW1zXG4gICAgICByZXR1cm4gbm9kZS5jYi5hcHBseShudWxsLCBhcmdzKVxuICAgIH1cblxuICAgIGNvbnN0IGRmdCA9IF90cmllLm1hdGNoKF9kZWZhdWx0KVxuICAgIGlmIChkZnQgJiYgZGZ0LmNiKSB7XG4gICAgICBhcmdzWzBdID0gZGZ0LnBhcmFtc1xuICAgICAgcmV0dXJuIGRmdC5jYi5hcHBseShudWxsLCBhcmdzKVxuICAgIH1cblxuICAgIHRocm93IG5ldyBFcnJvcihcInJvdXRlICdcIiArIHJvdXRlICsgXCInIGRpZCBub3QgbWF0Y2hcIilcbiAgfVxufVxuIiwiY29uc3QgbXV0YXRlID0gcmVxdWlyZSgneHRlbmQvbXV0YWJsZScpXG5jb25zdCBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQnKVxuY29uc3QgeHRlbmQgPSByZXF1aXJlKCd4dGVuZCcpXG5cbm1vZHVsZS5leHBvcnRzID0gVHJpZVxuXG4vLyBjcmVhdGUgYSBuZXcgdHJpZVxuLy8gbnVsbCAtPiBvYmpcbmZ1bmN0aW9uIFRyaWUgKCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVHJpZSkpIHJldHVybiBuZXcgVHJpZSgpXG4gIHRoaXMudHJpZSA9IHsgbm9kZXM6IHt9IH1cbn1cblxuLy8gY3JlYXRlIGEgbm9kZSBvbiB0aGUgdHJpZSBhdCByb3V0ZVxuLy8gYW5kIHJldHVybiBhIG5vZGVcbi8vIHN0ciAtPiBudWxsXG5UcmllLnByb3RvdHlwZS5jcmVhdGUgPSBmdW5jdGlvbiAocm91dGUpIHtcbiAgYXNzZXJ0LmVxdWFsKHR5cGVvZiByb3V0ZSwgJ3N0cmluZycsICdyb3V0ZSBzaG91bGQgYmUgYSBzdHJpbmcnKVxuICAvLyBzdHJpcCBsZWFkaW5nICcvJyBhbmQgc3BsaXQgcm91dGVzXG4gIGNvbnN0IHJvdXRlcyA9IHJvdXRlLnJlcGxhY2UoL15cXC8vLCAnJykuc3BsaXQoJy8nKVxuICByZXR1cm4gKGZ1bmN0aW9uIGNyZWF0ZU5vZGUgKGluZGV4LCB0cmllLCByb3V0ZXMpIHtcbiAgICBjb25zdCByb3V0ZSA9IHJvdXRlc1tpbmRleF1cblxuICAgIGlmIChyb3V0ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gdHJpZVxuXG4gICAgdmFyIG5vZGUgPSBudWxsXG4gICAgaWYgKC9eOi8udGVzdChyb3V0ZSkpIHtcbiAgICAgIC8vIGlmIG5vZGUgaXMgYSBuYW1lIG1hdGNoLCBzZXQgbmFtZSBhbmQgYXBwZW5kIHRvICc6JyBub2RlXG4gICAgICBpZiAoIXRyaWUubm9kZXNbJyQkJ10pIHtcbiAgICAgICAgbm9kZSA9IHsgbm9kZXM6IHt9IH1cbiAgICAgICAgdHJpZS5ub2Rlc1snJCQnXSA9IG5vZGVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGUgPSB0cmllLm5vZGVzWyckJCddXG4gICAgICB9XG4gICAgICB0cmllLm5hbWUgPSByb3V0ZS5yZXBsYWNlKC9eOi8sICcnKVxuICAgIH0gZWxzZSBpZiAoIXRyaWUubm9kZXNbcm91dGVdKSB7XG4gICAgICBub2RlID0geyBub2Rlczoge30gfVxuICAgICAgdHJpZS5ub2Rlc1tyb3V0ZV0gPSBub2RlXG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGUgPSB0cmllLm5vZGVzW3JvdXRlXVxuICAgIH1cblxuICAgIC8vIHdlIG11c3QgcmVjdXJzZSBkZWVwZXJcbiAgICByZXR1cm4gY3JlYXRlTm9kZShpbmRleCArIDEsIG5vZGUsIHJvdXRlcylcbiAgfSkoMCwgdGhpcy50cmllLCByb3V0ZXMpXG59XG5cbi8vIG1hdGNoIGEgcm91dGUgb24gdGhlIHRyaWVcbi8vIGFuZCByZXR1cm4gdGhlIG5vZGVcbi8vIHN0ciAtPiBvYmpcblRyaWUucHJvdG90eXBlLm1hdGNoID0gZnVuY3Rpb24gKHJvdXRlKSB7XG4gIGFzc2VydC5lcXVhbCh0eXBlb2Ygcm91dGUsICdzdHJpbmcnLCAncm91dGUgc2hvdWxkIGJlIGEgc3RyaW5nJylcblxuICBjb25zdCByb3V0ZXMgPSByb3V0ZS5yZXBsYWNlKC9eXFwvLywgJycpLnNwbGl0KCcvJylcbiAgY29uc3QgcGFyYW1zID0ge31cblxuICB2YXIgbm9kZSA9IChmdW5jdGlvbiBzZWFyY2ggKGluZGV4LCB0cmllKSB7XG4gICAgLy8gZWl0aGVyIHRoZXJlJ3Mgbm8gbWF0Y2gsIG9yIHdlJ3JlIGRvbmUgc2VhcmNoaW5nXG4gICAgaWYgKHRyaWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHVuZGVmaW5lZFxuICAgIGNvbnN0IHJvdXRlID0gcm91dGVzW2luZGV4XVxuICAgIGlmIChyb3V0ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gdHJpZVxuXG4gICAgaWYgKHRyaWUubm9kZXNbcm91dGVdKSB7XG4gICAgICAvLyBtYXRjaCByZWd1bGFyIHJvdXRlcyBmaXJzdFxuICAgICAgcmV0dXJuIHNlYXJjaChpbmRleCArIDEsIHRyaWUubm9kZXNbcm91dGVdKVxuICAgIH0gZWxzZSBpZiAodHJpZS5uYW1lKSB7XG4gICAgICAvLyBtYXRjaCBuYW1lZCByb3V0ZXNcbiAgICAgIHBhcmFtc1t0cmllLm5hbWVdID0gcm91dGVcbiAgICAgIHJldHVybiBzZWFyY2goaW5kZXggKyAxLCB0cmllLm5vZGVzWyckJCddKVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBubyBtYXRjaGVzIGZvdW5kXG4gICAgICByZXR1cm4gc2VhcmNoKGluZGV4ICsgMSlcbiAgICB9XG4gIH0pKDAsIHRoaXMudHJpZSlcblxuICBpZiAoIW5vZGUpIHJldHVybiB1bmRlZmluZWRcbiAgbm9kZSA9IHh0ZW5kKG5vZGUpXG4gIG5vZGUucGFyYW1zID0gcGFyYW1zXG4gIHJldHVybiBub2RlXG59XG5cbi8vIG1vdW50IGEgdHJpZSBvbnRvIGEgbm9kZSBhdCByb3V0ZVxuLy8gKHN0ciwgb2JqKSAtPiBudWxsXG5UcmllLnByb3RvdHlwZS5tb3VudCA9IGZ1bmN0aW9uIChyb3V0ZSwgdHJpZSkge1xuICBhc3NlcnQuZXF1YWwodHlwZW9mIHJvdXRlLCAnc3RyaW5nJywgJ3JvdXRlIHNob3VsZCBiZSBhIHN0cmluZycpXG4gIGFzc2VydC5lcXVhbCh0eXBlb2YgdHJpZSwgJ29iamVjdCcsICd0cmllIHNob3VsZCBiZSBhIG9iamVjdCcpXG5cbiAgY29uc3Qgc3BsaXQgPSByb3V0ZS5yZXBsYWNlKC9eXFwvLywgJycpLnNwbGl0KCcvJylcbiAgdmFyIG5vZGUgPSBudWxsXG4gIHZhciBrZXkgPSBudWxsXG5cbiAgaWYgKHNwbGl0Lmxlbmd0aCA9PT0gMSkge1xuICAgIGtleSA9IHNwbGl0WzBdXG4gICAgbm9kZSA9IHRoaXMuY3JlYXRlKGtleSlcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBoZWFkQXJyID0gc3BsaXQuc3BsaWNlKDAsIHNwbGl0Lmxlbmd0aCAtIDEpXG4gICAgY29uc3QgaGVhZCA9IGhlYWRBcnIuam9pbignLycpXG4gICAga2V5ID0gc3BsaXRbMF1cbiAgICBub2RlID0gdGhpcy5jcmVhdGUoaGVhZClcbiAgfVxuXG4gIG11dGF0ZShub2RlLm5vZGVzLCB0cmllLm5vZGVzKVxuICBpZiAodHJpZS5uYW1lKSBub2RlLm5hbWUgPSB0cmllLm5hbWVcblxuICAvLyBkZWxlZ2F0ZSBwcm9wZXJ0aWVzIGZyb20gJy8nIHRvIHRoZSBuZXcgbm9kZVxuICAvLyAnLycgY2Fubm90IGJlIHJlYWNoZWQgb25jZSBtb3VudGVkXG4gIGlmIChub2RlLm5vZGVzWycnXSkge1xuICAgIE9iamVjdC5rZXlzKG5vZGUubm9kZXNbJyddKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGlmIChrZXkgPT09ICdub2RlcycpIHJldHVyblxuICAgICAgbm9kZVtrZXldID0gbm9kZS5ub2Rlc1snJ11ba2V5XVxuICAgIH0pXG4gICAgbXV0YXRlKG5vZGUubm9kZXMsIG5vZGUubm9kZXNbJyddLm5vZGVzKVxuICAgIGRlbGV0ZSBub2RlLm5vZGVzWycnXS5ub2Rlc1xuICB9XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciB3aW5kb3cgPSByZXF1aXJlKFwiZ2xvYmFsL3dpbmRvd1wiKVxudmFyIGlzRnVuY3Rpb24gPSByZXF1aXJlKFwiaXMtZnVuY3Rpb25cIilcbnZhciBwYXJzZUhlYWRlcnMgPSByZXF1aXJlKFwicGFyc2UtaGVhZGVyc1wiKVxudmFyIHh0ZW5kID0gcmVxdWlyZShcInh0ZW5kXCIpXG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlWEhSXG5jcmVhdGVYSFIuWE1MSHR0cFJlcXVlc3QgPSB3aW5kb3cuWE1MSHR0cFJlcXVlc3QgfHwgbm9vcFxuY3JlYXRlWEhSLlhEb21haW5SZXF1ZXN0ID0gXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiAobmV3IGNyZWF0ZVhIUi5YTUxIdHRwUmVxdWVzdCgpKSA/IGNyZWF0ZVhIUi5YTUxIdHRwUmVxdWVzdCA6IHdpbmRvdy5YRG9tYWluUmVxdWVzdFxuXG5mb3JFYWNoQXJyYXkoW1wiZ2V0XCIsIFwicHV0XCIsIFwicG9zdFwiLCBcInBhdGNoXCIsIFwiaGVhZFwiLCBcImRlbGV0ZVwiXSwgZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgY3JlYXRlWEhSW21ldGhvZCA9PT0gXCJkZWxldGVcIiA/IFwiZGVsXCIgOiBtZXRob2RdID0gZnVuY3Rpb24odXJpLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgICAgICBvcHRpb25zID0gaW5pdFBhcmFtcyh1cmksIG9wdGlvbnMsIGNhbGxiYWNrKVxuICAgICAgICBvcHRpb25zLm1ldGhvZCA9IG1ldGhvZC50b1VwcGVyQ2FzZSgpXG4gICAgICAgIHJldHVybiBfY3JlYXRlWEhSKG9wdGlvbnMpXG4gICAgfVxufSlcblxuZnVuY3Rpb24gZm9yRWFjaEFycmF5KGFycmF5LCBpdGVyYXRvcikge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaXRlcmF0b3IoYXJyYXlbaV0pXG4gICAgfVxufVxuXG5mdW5jdGlvbiBpc0VtcHR5KG9iail7XG4gICAgZm9yKHZhciBpIGluIG9iail7XG4gICAgICAgIGlmKG9iai5oYXNPd25Qcm9wZXJ0eShpKSkgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIHJldHVybiB0cnVlXG59XG5cbmZ1bmN0aW9uIGluaXRQYXJhbXModXJpLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgIHZhciBwYXJhbXMgPSB1cmlcblxuICAgIGlmIChpc0Z1bmN0aW9uKG9wdGlvbnMpKSB7XG4gICAgICAgIGNhbGxiYWNrID0gb3B0aW9uc1xuICAgICAgICBpZiAodHlwZW9mIHVyaSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgcGFyYW1zID0ge3VyaTp1cml9XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBwYXJhbXMgPSB4dGVuZChvcHRpb25zLCB7dXJpOiB1cml9KVxuICAgIH1cblxuICAgIHBhcmFtcy5jYWxsYmFjayA9IGNhbGxiYWNrXG4gICAgcmV0dXJuIHBhcmFtc1xufVxuXG5mdW5jdGlvbiBjcmVhdGVYSFIodXJpLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgIG9wdGlvbnMgPSBpbml0UGFyYW1zKHVyaSwgb3B0aW9ucywgY2FsbGJhY2spXG4gICAgcmV0dXJuIF9jcmVhdGVYSFIob3B0aW9ucylcbn1cblxuZnVuY3Rpb24gX2NyZWF0ZVhIUihvcHRpb25zKSB7XG4gICAgaWYodHlwZW9mIG9wdGlvbnMuY2FsbGJhY2sgPT09IFwidW5kZWZpbmVkXCIpe1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjYWxsYmFjayBhcmd1bWVudCBtaXNzaW5nXCIpXG4gICAgfVxuXG4gICAgdmFyIGNhbGxlZCA9IGZhbHNlXG4gICAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24gY2JPbmNlKGVyciwgcmVzcG9uc2UsIGJvZHkpe1xuICAgICAgICBpZighY2FsbGVkKXtcbiAgICAgICAgICAgIGNhbGxlZCA9IHRydWVcbiAgICAgICAgICAgIG9wdGlvbnMuY2FsbGJhY2soZXJyLCByZXNwb25zZSwgYm9keSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlYWR5c3RhdGVjaGFuZ2UoKSB7XG4gICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICAgICAgbG9hZEZ1bmMoKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Qm9keSgpIHtcbiAgICAgICAgLy8gQ2hyb21lIHdpdGggcmVxdWVzdFR5cGU9YmxvYiB0aHJvd3MgZXJyb3JzIGFycm91bmQgd2hlbiBldmVuIHRlc3RpbmcgYWNjZXNzIHRvIHJlc3BvbnNlVGV4dFxuICAgICAgICB2YXIgYm9keSA9IHVuZGVmaW5lZFxuXG4gICAgICAgIGlmICh4aHIucmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGJvZHkgPSB4aHIucmVzcG9uc2VcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJvZHkgPSB4aHIucmVzcG9uc2VUZXh0IHx8IGdldFhtbCh4aHIpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNKc29uKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGJvZHkgPSBKU09OLnBhcnNlKGJvZHkpXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGJvZHlcbiAgICB9XG5cbiAgICB2YXIgZmFpbHVyZVJlc3BvbnNlID0ge1xuICAgICAgICAgICAgICAgIGJvZHk6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7fSxcbiAgICAgICAgICAgICAgICBzdGF0dXNDb2RlOiAwLFxuICAgICAgICAgICAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgICAgICAgICAgIHVybDogdXJpLFxuICAgICAgICAgICAgICAgIHJhd1JlcXVlc3Q6IHhoclxuICAgICAgICAgICAgfVxuXG4gICAgZnVuY3Rpb24gZXJyb3JGdW5jKGV2dCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dFRpbWVyKVxuICAgICAgICBpZighKGV2dCBpbnN0YW5jZW9mIEVycm9yKSl7XG4gICAgICAgICAgICBldnQgPSBuZXcgRXJyb3IoXCJcIiArIChldnQgfHwgXCJVbmtub3duIFhNTEh0dHBSZXF1ZXN0IEVycm9yXCIpIClcbiAgICAgICAgfVxuICAgICAgICBldnQuc3RhdHVzQ29kZSA9IDBcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGV2dCwgZmFpbHVyZVJlc3BvbnNlKVxuICAgIH1cblxuICAgIC8vIHdpbGwgbG9hZCB0aGUgZGF0YSAmIHByb2Nlc3MgdGhlIHJlc3BvbnNlIGluIGEgc3BlY2lhbCByZXNwb25zZSBvYmplY3RcbiAgICBmdW5jdGlvbiBsb2FkRnVuYygpIHtcbiAgICAgICAgaWYgKGFib3J0ZWQpIHJldHVyblxuICAgICAgICB2YXIgc3RhdHVzXG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0VGltZXIpXG4gICAgICAgIGlmKG9wdGlvbnMudXNlWERSICYmIHhoci5zdGF0dXM9PT11bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vSUU4IENPUlMgR0VUIHN1Y2Nlc3NmdWwgcmVzcG9uc2UgZG9lc24ndCBoYXZlIGEgc3RhdHVzIGZpZWxkLCBidXQgYm9keSBpcyBmaW5lXG4gICAgICAgICAgICBzdGF0dXMgPSAyMDBcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0YXR1cyA9ICh4aHIuc3RhdHVzID09PSAxMjIzID8gMjA0IDogeGhyLnN0YXR1cylcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVzcG9uc2UgPSBmYWlsdXJlUmVzcG9uc2VcbiAgICAgICAgdmFyIGVyciA9IG51bGxcblxuICAgICAgICBpZiAoc3RhdHVzICE9PSAwKXtcbiAgICAgICAgICAgIHJlc3BvbnNlID0ge1xuICAgICAgICAgICAgICAgIGJvZHk6IGdldEJvZHkoKSxcbiAgICAgICAgICAgICAgICBzdGF0dXNDb2RlOiBzdGF0dXMsXG4gICAgICAgICAgICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge30sXG4gICAgICAgICAgICAgICAgdXJsOiB1cmksXG4gICAgICAgICAgICAgICAgcmF3UmVxdWVzdDogeGhyXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZih4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKXsgLy9yZW1lbWJlciB4aHIgY2FuIGluIGZhY3QgYmUgWERSIGZvciBDT1JTIGluIElFXG4gICAgICAgICAgICAgICAgcmVzcG9uc2UuaGVhZGVycyA9IHBhcnNlSGVhZGVycyh4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlcnIgPSBuZXcgRXJyb3IoXCJJbnRlcm5hbCBYTUxIdHRwUmVxdWVzdCBFcnJvclwiKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIsIHJlc3BvbnNlLCByZXNwb25zZS5ib2R5KVxuICAgIH1cblxuICAgIHZhciB4aHIgPSBvcHRpb25zLnhociB8fCBudWxsXG5cbiAgICBpZiAoIXhocikge1xuICAgICAgICBpZiAob3B0aW9ucy5jb3JzIHx8IG9wdGlvbnMudXNlWERSKSB7XG4gICAgICAgICAgICB4aHIgPSBuZXcgY3JlYXRlWEhSLlhEb21haW5SZXF1ZXN0KClcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICB4aHIgPSBuZXcgY3JlYXRlWEhSLlhNTEh0dHBSZXF1ZXN0KClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBrZXlcbiAgICB2YXIgYWJvcnRlZFxuICAgIHZhciB1cmkgPSB4aHIudXJsID0gb3B0aW9ucy51cmkgfHwgb3B0aW9ucy51cmxcbiAgICB2YXIgbWV0aG9kID0geGhyLm1ldGhvZCA9IG9wdGlvbnMubWV0aG9kIHx8IFwiR0VUXCJcbiAgICB2YXIgYm9keSA9IG9wdGlvbnMuYm9keSB8fCBvcHRpb25zLmRhdGEgfHwgbnVsbFxuICAgIHZhciBoZWFkZXJzID0geGhyLmhlYWRlcnMgPSBvcHRpb25zLmhlYWRlcnMgfHwge31cbiAgICB2YXIgc3luYyA9ICEhb3B0aW9ucy5zeW5jXG4gICAgdmFyIGlzSnNvbiA9IGZhbHNlXG4gICAgdmFyIHRpbWVvdXRUaW1lclxuXG4gICAgaWYgKFwianNvblwiIGluIG9wdGlvbnMpIHtcbiAgICAgICAgaXNKc29uID0gdHJ1ZVxuICAgICAgICBoZWFkZXJzW1wiYWNjZXB0XCJdIHx8IGhlYWRlcnNbXCJBY2NlcHRcIl0gfHwgKGhlYWRlcnNbXCJBY2NlcHRcIl0gPSBcImFwcGxpY2F0aW9uL2pzb25cIikgLy9Eb24ndCBvdmVycmlkZSBleGlzdGluZyBhY2NlcHQgaGVhZGVyIGRlY2xhcmVkIGJ5IHVzZXJcbiAgICAgICAgaWYgKG1ldGhvZCAhPT0gXCJHRVRcIiAmJiBtZXRob2QgIT09IFwiSEVBRFwiKSB7XG4gICAgICAgICAgICBoZWFkZXJzW1wiY29udGVudC10eXBlXCJdIHx8IGhlYWRlcnNbXCJDb250ZW50LVR5cGVcIl0gfHwgKGhlYWRlcnNbXCJDb250ZW50LVR5cGVcIl0gPSBcImFwcGxpY2F0aW9uL2pzb25cIikgLy9Eb24ndCBvdmVycmlkZSBleGlzdGluZyBhY2NlcHQgaGVhZGVyIGRlY2xhcmVkIGJ5IHVzZXJcbiAgICAgICAgICAgIGJvZHkgPSBKU09OLnN0cmluZ2lmeShvcHRpb25zLmpzb24pXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gcmVhZHlzdGF0ZWNoYW5nZVxuICAgIHhoci5vbmxvYWQgPSBsb2FkRnVuY1xuICAgIHhoci5vbmVycm9yID0gZXJyb3JGdW5jXG4gICAgLy8gSUU5IG11c3QgaGF2ZSBvbnByb2dyZXNzIGJlIHNldCB0byBhIHVuaXF1ZSBmdW5jdGlvbi5cbiAgICB4aHIub25wcm9ncmVzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gSUUgbXVzdCBkaWVcbiAgICB9XG4gICAgeGhyLm9udGltZW91dCA9IGVycm9yRnVuY1xuICAgIHhoci5vcGVuKG1ldGhvZCwgdXJpLCAhc3luYywgb3B0aW9ucy51c2VybmFtZSwgb3B0aW9ucy5wYXNzd29yZClcbiAgICAvL2hhcyB0byBiZSBhZnRlciBvcGVuXG4gICAgaWYoIXN5bmMpIHtcbiAgICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9ICEhb3B0aW9ucy53aXRoQ3JlZGVudGlhbHNcbiAgICB9XG4gICAgLy8gQ2Fubm90IHNldCB0aW1lb3V0IHdpdGggc3luYyByZXF1ZXN0XG4gICAgLy8gbm90IHNldHRpbmcgdGltZW91dCBvbiB0aGUgeGhyIG9iamVjdCwgYmVjYXVzZSBvZiBvbGQgd2Via2l0cyBldGMuIG5vdCBoYW5kbGluZyB0aGF0IGNvcnJlY3RseVxuICAgIC8vIGJvdGggbnBtJ3MgcmVxdWVzdCBhbmQganF1ZXJ5IDEueCB1c2UgdGhpcyBraW5kIG9mIHRpbWVvdXQsIHNvIHRoaXMgaXMgYmVpbmcgY29uc2lzdGVudFxuICAgIGlmICghc3luYyAmJiBvcHRpb25zLnRpbWVvdXQgPiAwICkge1xuICAgICAgICB0aW1lb3V0VGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBhYm9ydGVkPXRydWUvL0lFOSBtYXkgc3RpbGwgY2FsbCByZWFkeXN0YXRlY2hhbmdlXG4gICAgICAgICAgICB4aHIuYWJvcnQoXCJ0aW1lb3V0XCIpXG4gICAgICAgICAgICB2YXIgZSA9IG5ldyBFcnJvcihcIlhNTEh0dHBSZXF1ZXN0IHRpbWVvdXRcIilcbiAgICAgICAgICAgIGUuY29kZSA9IFwiRVRJTUVET1VUXCJcbiAgICAgICAgICAgIGVycm9yRnVuYyhlKVxuICAgICAgICB9LCBvcHRpb25zLnRpbWVvdXQgKVxuICAgIH1cblxuICAgIGlmICh4aHIuc2V0UmVxdWVzdEhlYWRlcikge1xuICAgICAgICBmb3Ioa2V5IGluIGhlYWRlcnMpe1xuICAgICAgICAgICAgaWYoaGVhZGVycy5oYXNPd25Qcm9wZXJ0eShrZXkpKXtcbiAgICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihrZXksIGhlYWRlcnNba2V5XSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5oZWFkZXJzICYmICFpc0VtcHR5KG9wdGlvbnMuaGVhZGVycykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSGVhZGVycyBjYW5ub3QgYmUgc2V0IG9uIGFuIFhEb21haW5SZXF1ZXN0IG9iamVjdFwiKVxuICAgIH1cblxuICAgIGlmIChcInJlc3BvbnNlVHlwZVwiIGluIG9wdGlvbnMpIHtcbiAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9IG9wdGlvbnMucmVzcG9uc2VUeXBlXG4gICAgfVxuXG4gICAgaWYgKFwiYmVmb3JlU2VuZFwiIGluIG9wdGlvbnMgJiZcbiAgICAgICAgdHlwZW9mIG9wdGlvbnMuYmVmb3JlU2VuZCA9PT0gXCJmdW5jdGlvblwiXG4gICAgKSB7XG4gICAgICAgIG9wdGlvbnMuYmVmb3JlU2VuZCh4aHIpXG4gICAgfVxuXG4gICAgeGhyLnNlbmQoYm9keSlcblxuICAgIHJldHVybiB4aHJcblxuXG59XG5cbmZ1bmN0aW9uIGdldFhtbCh4aHIpIHtcbiAgICBpZiAoeGhyLnJlc3BvbnNlVHlwZSA9PT0gXCJkb2N1bWVudFwiKSB7XG4gICAgICAgIHJldHVybiB4aHIucmVzcG9uc2VYTUxcbiAgICB9XG4gICAgdmFyIGZpcmVmb3hCdWdUYWtlbkVmZmVjdCA9IHhoci5zdGF0dXMgPT09IDIwNCAmJiB4aHIucmVzcG9uc2VYTUwgJiYgeGhyLnJlc3BvbnNlWE1MLmRvY3VtZW50RWxlbWVudC5ub2RlTmFtZSA9PT0gXCJwYXJzZXJlcnJvclwiXG4gICAgaWYgKHhoci5yZXNwb25zZVR5cGUgPT09IFwiXCIgJiYgIWZpcmVmb3hCdWdUYWtlbkVmZmVjdCkge1xuICAgICAgICByZXR1cm4geGhyLnJlc3BvbnNlWE1MXG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGxcbn1cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGV4dGVuZFxuXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG5mdW5jdGlvbiBleHRlbmQoKSB7XG4gICAgdmFyIHRhcmdldCA9IHt9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldXG5cbiAgICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldFxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBleHRlbmRcblxudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuZnVuY3Rpb24gZXh0ZW5kKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV1cblxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0XG59XG4iLCJ2YXIgYmVsID0gcmVxdWlyZSgnYmVsJykgLy8gdHVybnMgdGVtcGxhdGUgdGFnIGludG8gRE9NIGVsZW1lbnRzXG52YXIgbW9ycGhkb20gPSByZXF1aXJlKCdtb3JwaGRvbScpIC8vIGVmZmljaWVudGx5IGRpZmZzICsgbW9ycGhzIHR3byBET00gZWxlbWVudHNcbnZhciBkZWZhdWx0RXZlbnRzID0gcmVxdWlyZSgnLi91cGRhdGUtZXZlbnRzLmpzJykgLy8gZGVmYXVsdCBldmVudHMgdG8gYmUgY29waWVkIHdoZW4gZG9tIGVsZW1lbnRzIHVwZGF0ZVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJlbFxuXG4vLyBUT0RPIG1vdmUgdGhpcyArIGRlZmF1bHRFdmVudHMgdG8gYSBuZXcgbW9kdWxlIG9uY2Ugd2UgcmVjZWl2ZSBtb3JlIGZlZWRiYWNrXG5tb2R1bGUuZXhwb3J0cy51cGRhdGUgPSBmdW5jdGlvbiAoZnJvbU5vZGUsIHRvTm9kZSwgb3B0cykge1xuICBpZiAoIW9wdHMpIG9wdHMgPSB7fVxuICBpZiAob3B0cy5ldmVudHMgIT09IGZhbHNlKSB7XG4gICAgaWYgKCFvcHRzLm9uQmVmb3JlRWxVcGRhdGVkKSBvcHRzLm9uQmVmb3JlRWxVcGRhdGVkID0gY29waWVyXG4gIH1cblxuICByZXR1cm4gbW9ycGhkb20oZnJvbU5vZGUsIHRvTm9kZSwgb3B0cylcblxuICAvLyBtb3JwaGRvbSBvbmx5IGNvcGllcyBhdHRyaWJ1dGVzLiB3ZSBkZWNpZGVkIHdlIGFsc28gd2FudGVkIHRvIGNvcHkgZXZlbnRzXG4gIC8vIHRoYXQgY2FuIGJlIHNldCB2aWEgYXR0cmlidXRlc1xuICBmdW5jdGlvbiBjb3BpZXIgKGYsIHQpIHtcbiAgICAvLyBjb3B5IGV2ZW50czpcbiAgICB2YXIgZXZlbnRzID0gb3B0cy5ldmVudHMgfHwgZGVmYXVsdEV2ZW50c1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXZlbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZXYgPSBldmVudHNbaV1cbiAgICAgIGlmICh0W2V2XSkgeyAvLyBpZiBuZXcgZWxlbWVudCBoYXMgYSB3aGl0ZWxpc3RlZCBhdHRyaWJ1dGVcbiAgICAgICAgZltldl0gPSB0W2V2XSAvLyB1cGRhdGUgZXhpc3RpbmcgZWxlbWVudFxuICAgICAgfSBlbHNlIGlmIChmW2V2XSkgeyAvLyBpZiBleGlzdGluZyBlbGVtZW50IGhhcyBpdCBhbmQgbmV3IG9uZSBkb2VzbnRcbiAgICAgICAgZltldl0gPSB1bmRlZmluZWQgLy8gcmVtb3ZlIGl0IGZyb20gZXhpc3RpbmcgZWxlbWVudFxuICAgICAgfVxuICAgIH1cbiAgICAvLyBjb3B5IHZhbHVlcyBmb3IgZm9ybSBlbGVtZW50c1xuICAgIGlmICgoZi5ub2RlTmFtZSA9PT0gJ0lOUFVUJyAmJiBmLnR5cGUgIT09ICdmaWxlJykgfHwgZi5ub2RlTmFtZSA9PT0gJ1NFTEVDVCcpIHtcbiAgICAgIGlmICh0LmdldEF0dHJpYnV0ZSgndmFsdWUnKSA9PT0gbnVsbCkgdC52YWx1ZSA9IGYudmFsdWVcbiAgICB9IGVsc2UgaWYgKGYubm9kZU5hbWUgPT09ICdURVhUQVJFQScpIHtcbiAgICAgIGlmICh0LmdldEF0dHJpYnV0ZSgndmFsdWUnKSA9PT0gbnVsbCkgZi52YWx1ZSA9IHQudmFsdWVcbiAgICB9XG4gIH1cbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gW1xuICAvLyBhdHRyaWJ1dGUgZXZlbnRzIChjYW4gYmUgc2V0IHdpdGggYXR0cmlidXRlcylcbiAgJ29uY2xpY2snLFxuICAnb25kYmxjbGljaycsXG4gICdvbm1vdXNlZG93bicsXG4gICdvbm1vdXNldXAnLFxuICAnb25tb3VzZW92ZXInLFxuICAnb25tb3VzZW1vdmUnLFxuICAnb25tb3VzZW91dCcsXG4gICdvbmRyYWdzdGFydCcsXG4gICdvbmRyYWcnLFxuICAnb25kcmFnZW50ZXInLFxuICAnb25kcmFnbGVhdmUnLFxuICAnb25kcmFnb3ZlcicsXG4gICdvbmRyb3AnLFxuICAnb25kcmFnZW5kJyxcbiAgJ29ua2V5ZG93bicsXG4gICdvbmtleXByZXNzJyxcbiAgJ29ua2V5dXAnLFxuICAnb251bmxvYWQnLFxuICAnb25hYm9ydCcsXG4gICdvbmVycm9yJyxcbiAgJ29ucmVzaXplJyxcbiAgJ29uc2Nyb2xsJyxcbiAgJ29uc2VsZWN0JyxcbiAgJ29uY2hhbmdlJyxcbiAgJ29uc3VibWl0JyxcbiAgJ29ucmVzZXQnLFxuICAnb25mb2N1cycsXG4gICdvbmJsdXInLFxuICAnb25pbnB1dCcsXG4gIC8vIG90aGVyIGNvbW1vbiBldmVudHNcbiAgJ29uY29udGV4dG1lbnUnLFxuICAnb25mb2N1c2luJyxcbiAgJ29uZm9jdXNvdXQnXG5dXG4iLCJpbXBvcnQgY2hvbyBmcm9tICdjaG9vJ1xuaW1wb3J0IGZhc3RjbGljayBmcm9tICdmYXN0Y2xpY2snXG5pbXBvcnQgbG9nIGZyb20gJ2Nob28tbG9nJ1xuaW1wb3J0IHN0b3JlIGZyb20gJ3N0b3JlJ1xuaW1wb3J0IGFwaU1vZGVsIGZyb20gJ34vbW9kZWxzL2FwaSdcbmltcG9ydCBhcHBNb2RlbCBmcm9tICd+L21vZGVscy9hcHAnXG5pbXBvcnQgZ2FtZU1vZGVsIGZyb20gJ34vbW9kZWxzL2dhbWUnXG5pbXBvcnQgd2VsY29tZVBhZ2UgZnJvbSAnfi9wYWdlcy93ZWxjb21lJ1xuaW1wb3J0IGluZ2FtZVBhZ2UgZnJvbSAnfi9wYWdlcy9pbmdhbWUnXG5cbndpbmRvdy5vbmVycm9yID0gZnVuY3Rpb24obWVzc2FnZSwgZmlsZSwgbGluZSkge1xuICBtaXhwYW5lbC50cmFjaygnanM6ZXJyJywgeyBtZXNzYWdlLCBmaWxlLCBsaW5lIH0pXG59XG5cbmlmIChudWxsID09IHN0b3JlLmdldCgnYXBwOnN1bW1vbmVyJykpIHtcbiAgc3RvcmUuc2V0KCdhcHA6c3VtbW9uZXInLCAnJylcbn1cbmlmIChudWxsID09IHN0b3JlLmdldCgnYXBwOnJlZ2lvbicpKSB7XG4gIHN0b3JlLnNldCgnYXBwOnJlZ2lvbicsICdFVVcnKVxufVxuXG5jb25zdCBhcHAgPSBjaG9vKClcbmFwcC51c2UobG9nKCkpXG5hcHAudXNlKHtcbiAgd3JhcEluaXRpYWxTdGF0ZShtb2RlbHMpIHtcbiAgICBjb25zdCB7IGFwcCB9ID0gbW9kZWxzXG4gICAgYXBwLnN1bW1vbmVyID0gc3RvcmUuZ2V0KCdhcHA6c3VtbW9uZXInKVxuICAgIGFwcC5yZWdpb24gPSBzdG9yZS5nZXQoJ2FwcDpyZWdpb24nKVxuICAgIHJldHVybiBtb2RlbHNcbiAgfVxufSlcblxuYXBwLm1vZGVsKGFwaU1vZGVsKVxuYXBwLm1vZGVsKGFwcE1vZGVsKVxuYXBwLm1vZGVsKGdhbWVNb2RlbClcblxuLy8gVE9ETzogd2FpdCBmb3IgY2hvbyB0byBtYWtlIGhhc2ggcm91dGluZyByZWFsbHkgd29ya1xuYXBwLnJvdXRlcihyb3V0ZSA9PiBbXG4gIHJvdXRlKCcvJywgd2VsY29tZVBhZ2UpLFxuICByb3V0ZSgnL2luZ2FtZScsIGluZ2FtZVBhZ2UpXG5dKVxuXG5jb25zdCBzdGFydCA9ICh1dWlkKSA9PiB7XG4gIG1peHBhbmVsLmlkZW50aWZ5KHV1aWQpXG4gIG1peHBhbmVsLnBlb3BsZS5pbmNyZW1lbnQoJ3Nlc3Npb25zJylcblxuICBjb25zdCB0cmVlID0gYXBwLnN0YXJ0KClcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0cmVlKVxuICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoJy1yZWFkeScpXG4gIGZhc3RjbGljayhkb2N1bWVudC5ib2R5KVxufVxuXG5pZiAod2luZG93LmNvcmRvdmEpIHtcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZGV2aWNlcmVhZHknLCAoKSA9PiB7XG4gICAgc3RhcnQoZGV2aWNlLnV1aWQpXG5cbiAgICBwbHVnaW5zLmluc29tbmlhLmtlZXBBd2FrZSgpXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignYmFja2J1dHRvbicsICgpID0+IHtcbiAgICAgIGhpc3RvcnkuYmFjaygpXG4gICAgfSlcbiAgfSlcbn1cbmVsc2Uge1xuICBzdGFydCgtMSlcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlbmRlcklmKGNvbmRpdGlvbiwgc3RhdGUsIHJlbmRlcmVyKSB7XG4gIHJldHVybiAoY29uZGl0aW9uID8gcmVuZGVyZXIoc3RhdGUpIDogJycpXG59XG4iLCJpbXBvcnQgY2hhbXBpb25zIGZyb20gJ2xvbC1jaGFtcGlvbnMnXG5pbXBvcnQgZmluZCBmcm9tICdhcnJheS1maW5kJ1xuaW1wb3J0IHNwZWxscyBmcm9tICdsb2wtc3BlbGxzJ1xuaW1wb3J0IHN0b3JlIGZyb20gJ3N0b3JlJ1xuaW1wb3J0IHVuaXF1ZWlkIGZyb20gJ3VuaXF1ZWlkJ1xuaW1wb3J0IHhociBmcm9tICd4aHInXG5pbXBvcnQgeHRlbmQgZnJvbSAneHRlbmQnXG5cbmNvbnN0IHByb3h5VXJsID0gJ2h0dHBzOi8vd3QtbmdyeW1hbi1nbWFpbF9jb20tMC5ydW4ud2VidGFzay5pby9yaW90LXByb3h5J1xuXG5jb25zdCBlbmRwb2ludCA9IChuYW1lKSA9PiB7XG4gIGNvbnN0IHJlZ2lvbiA9IHN0b3JlLmdldCgnYXBwOnJlZ2lvbicpXG4gIHN3aXRjaCAobmFtZSkge1xuICAgIGNhc2UgJ3N1bW1vbmVyJzpcbiAgICAgIHJldHVybiBgL2FwaS9sb2wvJHtyZWdpb259L3YxLjQvc3VtbW9uZXIvYnktbmFtZWBcbiAgICBjYXNlICdlbm5lbWllcyc6XG4gICAgICByZXR1cm4gYC9vYnNlcnZlci1tb2RlL3Jlc3QvY29uc3VtZXIvZ2V0U3BlY3RhdG9yR2FtZUluZm8vJHtyZWdpb259MWBcbiAgfVxufVxuXG5jb25zdCBlcnJvciA9IChtZXNzYWdlLCB1cmwsIHN0YXR1cywgZG9uZSkgPT4ge1xuICBkb25lKHsgbWVzc2FnZSwgdXJsLCBzdGF0dXMgfSlcbn1cblxuY29uc3QgdWlkID0gdW5pcXVlaWQoKVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWVzcGFjZTogJ2FwaScsXG4gIGVmZmVjdHM6IHtcbiAgICByZXF1ZXN0OiAodXJsLCBzdGF0ZSwgc2VuZCwgZG9uZSkgPT4ge1xuICAgICAgY29uc3QgcmVnaW9uID0gc3RvcmUuZ2V0KCdhcHA6cmVnaW9uJylcbiAgICAgIHJldHVybiB4aHIoYCR7cHJveHlVcmx9P3VybD0ke3VybH0mcmVnaW9uPSR7cmVnaW9ufWAsIHsganNvbjogdHJ1ZSB9LFxuICAgICAgKGVyciwgcmVzLCBib2R5KSA9PiB7XG4gICAgICAgIGlmIChudWxsID09IGJvZHkuc3RhdHVzKSB7XG4gICAgICAgICAgZG9uZShudWxsLCBib2R5KVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGRvbmUoYm9keS5zdGF0dXMuc3RhdHVzX2NvZGUpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICBzdW1tb25lcjogKG5hbWUsIHN0YXRlLCBzZW5kLCBkb25lKSA9PiB7XG4gICAgICBjb25zdCBzdW1tb25lciA9IHN0b3JlLmdldCgnYXBpOnN1bW1vbmVyJylcblxuICAgICAgaWYgKG51bGwgIT0gc3VtbW9uZXIgJiYgc3VtbW9uZXIubmFtZSA9PT0gbmFtZSlcbiAgICAgICAgcmV0dXJuIGRvbmUobnVsbCwgc3VtbW9uZXIpXG5cbiAgICAgIGNvbnN0IHVybCA9IGAke2VuZHBvaW50KCdzdW1tb25lcicpfS8ke25hbWV9YFxuXG4gICAgICBzZW5kKCdhcGk6cmVxdWVzdCcsIHVybCwgKGVyciwgYm9keSkgPT4ge1xuICAgICAgICBpZiAoZXJyID4gNDAwKVxuICAgICAgICAgIHJldHVybiBlcnJvcignVW5rbm93biBzdW1tb25lcicsIHVybCwgZXJyLCBkb25lKVxuXG4gICAgICAgIGNvbnN0IHN1bW1vbmVyID0gYm9keVtuYW1lLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvIC9nLCAnJyldXG4gICAgICAgIGlmICghc3VtbW9uZXIpXG4gICAgICAgICAgcmV0dXJuIGVycm9yKCdObyBzdW1tb25lciBmb3VuZCcsIHVybCwgZXJyLCBkb25lKVxuXG4gICAgICAgIHN0b3JlLnNldCgnYXBpOnN1bW1vbmVyJywgc3VtbW9uZXIpXG5cbiAgICAgICAgZG9uZShudWxsLCBzdW1tb25lcilcbiAgICAgIH0pXG4gICAgfSxcbiAgICBnYW1lOiAoc3VtbW9uZXIsIHN0YXRlLCBzZW5kLCBkb25lKSA9PiB7XG4gICAgICBjb25zdCB1cmwgPSBgJHtlbmRwb2ludCgnZW5uZW1pZXMnKX0vJHtzdW1tb25lci5pZH1gXG5cbiAgICAgIHNlbmQoJ2FwaTpyZXF1ZXN0JywgdXJsLCAoZXJyLCBib2R5KSA9PiB7XG4gICAgICAgIGlmIChlcnIgPiA0MDApXG4gICAgICAgICAgcmV0dXJuIGVycm9yKCdObyBsaXZlIGdhbWUgZm91bmQnLCB1cmwsIGVyciwgZG9uZSlcblxuICAgICAgICBpZiAoJ0NMQVNTSUMnICE9PSBib2R5LmdhbWVNb2RlIHx8ICdNQVRDSEVEX0dBTUUnICE9PSBib2R5LmdhbWVUeXBlKVxuICAgICAgICAgIHJldHVybiBlcnJvcignR2FtZSBtb2RlIG5vdCBzdXBwb3J0ZWQnLCB1cmwsIGVyciwgZG9uZSlcblxuICAgICAgICBjb25zdCB7IGdhbWVJZCwgcGFydGljaXBhbnRzIH0gPSBib2R5XG5cbiAgICAgICAgY29uc3Qgc3VtbW9uZXJUZWFtID0gZmluZChwYXJ0aWNpcGFudHMsIHBhcnRpY2lwYW50ID0+XG4gICAgICAgICAgc3VtbW9uZXIubmFtZSA9PT0gcGFydGljaXBhbnQuc3VtbW9uZXJOYW1lXG4gICAgICAgICkudGVhbUlkXG5cbiAgICAgICAgY29uc3QgZW5uZW1pZXMgPSBwYXJ0aWNpcGFudHNcbiAgICAgICAgICAuZmlsdGVyKHBhcnRpY2lwYW50ID0+IHBhcnRpY2lwYW50LnRlYW1JZCAhPT0gc3VtbW9uZXJUZWFtKVxuICAgICAgICAgIC5tYXAocGFydGljaXBhbnQgPT4gKHtcbiAgICAgICAgICAgIG5hbWU6IHBhcnRpY2lwYW50LnN1bW1vbmVyTmFtZSxcbiAgICAgICAgICAgIGNoYW1waW9uOiBjcmVhdGVDaGFtcGlvbihwYXJ0aWNpcGFudC5jaGFtcGlvbklkKSxcbiAgICAgICAgICAgIHNwZWxsczogW1xuICAgICAgICAgICAgICBjcmVhdGVTcGVsbChwYXJ0aWNpcGFudC5zcGVsbDFJZCksXG4gICAgICAgICAgICAgIGNyZWF0ZVNwZWxsKHBhcnRpY2lwYW50LnNwZWxsMklkKVxuICAgICAgICAgICAgXVxuICAgICAgICAgIH0pKVxuXG4gICAgICAgIGRvbmUobnVsbCwgeyBnYW1lSWQsIGVubmVtaWVzIH0pXG4gICAgICB9KVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDaGFtcGlvbihpZCkge1xuICByZXR1cm4gZmluZChjaGFtcGlvbnMsIGMgPT4gYy5rZXkgPT09IFN0cmluZyhpZCkpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVNwZWxsKGlkKSB7XG4gIGNvbnN0IHNwZWxsID0gZmluZChzcGVsbHMsIHMgPT4gcy5rZXkgPT09IFN0cmluZyhpZCkpXG4gIHJldHVybiB4dGVuZCh7fSwgc3BlbGwsIHtcbiAgICB1aWQ6IHVpZCgpLFxuICAgIHN0YXRlOiAnYXZhaWxhYmxlJyxcbiAgICBjb29sZG93bjogMCxcbiAgICByZWZDb29sZG93bjogc3BlbGwuY29vbGRvd25cbiAgfSlcbn1cbiIsImltcG9ydCBzdG9yZSBmcm9tICdzdG9yZSdcbmltcG9ydCB4dGVuZCBmcm9tICd4dGVuZCdcblxubGV0IGVyclRpbWVvdXRJZFxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWVzcGFjZTogJ2FwcCcsXG4gIHN0YXRlOiB7XG4gICAgdGl0bGU6ICc8ZW0+Tm88L2VtPiBGbGFzaCcsXG4gICAgdGFnbGluZTogJ1RyYWNrIHN1bW1vbmVyIHNwZWxscycsXG4gICAgbG9hZGluZzogZmFsc2UsXG4gICAgZXJyb3I6ICcnLFxuICAgIHN1bW1vbmVyOiBzdG9yZS5nZXQoJ2FwcDpzdW1tb25lcicpLFxuICAgIHJlZ2lvbjogc3RvcmUuZ2V0KCdhcHA6cmVnaW9uJylcbiAgfSxcbiAgZWZmZWN0czoge1xuICAgIHN1bW1vbmVyOiAoc3VtbW9uZXIsIHN0YXRlLCBzZW5kLCBkb25lKSA9PiB7XG4gICAgICBzdG9yZS5zZXQoJ2FwcDpzdW1tb25lcicsIHN1bW1vbmVyKVxuICAgICAgc2VuZCgnYXBwOnNldCcsIHsgc3VtbW9uZXIgfSwgZG9uZSlcbiAgICB9LFxuICAgIHJlZ2lvbjogKHJlZ2lvbiwgc3RhdGUsIHNlbmQsIGRvbmUpID0+IHtcbiAgICAgIHN0b3JlLnNldCgnYXBwOnJlZ2lvbicsIHJlZ2lvbilcbiAgICAgIHNlbmQoJ2FwcDpzZXQnLCB7IHJlZ2lvbiB9LCBkb25lKVxuICAgIH0sXG4gICAgbG9hZGluZzogKGRhdGEsIHN0YXRlLCBzZW5kLCBkb25lKSA9PiB7XG4gICAgICBzZW5kKCdhcHA6c2V0JywgeyBlcnJvcjogJycsIGxvYWRpbmc6IHRydWUgfSwgZG9uZSlcbiAgICB9LFxuICAgIGVycm9yOiAoZGF0YSwgc3RhdGUsIHNlbmQsIGRvbmUpID0+IHtcbiAgICAgIHNlbmQoJ2FwcDpzZXQnLCB7IGVycm9yOiBkYXRhLmVyci5tZXNzYWdlLCBsb2FkaW5nOiBmYWxzZSB9LCBkb25lKVxuXG4gICAgICBtaXhwYW5lbC50cmFjaygnYXBwOmVycm9yJywgZGF0YS5lcnIpXG5cbiAgICAgIGNsZWFyVGltZW91dChlcnJUaW1lb3V0SWQpXG4gICAgICBlcnJUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgc2VuZCgnYXBwOnNldCcsIHsgZXJyb3I6ICcnLCBsb2FkaW5nOiBmYWxzZSB9LCBkb25lKVxuICAgICAgfSwgMzAwMClcbiAgICB9LFxuICAgIGNsZWFyOiAoZGF0YSwgc3RhdGUsIHNlbmQsIGRvbmUpID0+IHtcbiAgICAgIHNlbmQoJ2FwcDpzZXQnLCB7IGVycm9yOiAnJywgbG9hZGluZzogZmFsc2UgfSwgZG9uZSlcbiAgICB9XG4gIH0sXG4gIHJlZHVjZXJzOiB7XG4gICAgc2V0OiAoZGF0YSwgc3RhdGUpID0+IHh0ZW5kKHN0YXRlLCBkYXRhKVxuICB9XG59XG4iLCJpbXBvcnQgeHRlbmQgZnJvbSAneHRlbmQnXG5cbmNvbnN0IHNwZWxsQXVkaW8gPSBuZXcgQXVkaW8oJ3NvdW5kcy9zcGVsbC5vZ2cnKVxuXG5sZXQgbnVtQ29vbGRvd25zID0gMFxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWVzcGFjZTogJ2dhbWUnLFxuICBzdGF0ZToge1xuICAgIGdhbWVJZDogMCxcbiAgICBlbm5lbWllczogW11cbiAgfSxcbiAgZWZmZWN0czoge1xuICAgIGZldGNoOiAobmFtZSwgc3RhdGUsIHNlbmQsIGRvbmUpID0+IHtcbiAgICAgIHNlbmQoJ2FwcDpsb2FkaW5nJywgKCkgPT4ge1xuICAgICAgICBzZW5kKCdhcGk6c3VtbW9uZXInLCBuYW1lLCAoZXJyLCBzdW1tb25lcikgPT4ge1xuICAgICAgICAgIGlmIChlcnIpIHJldHVybiBzZW5kKCdhcHA6ZXJyb3InLCB7IGVyciB9LCBkb25lKVxuXG4gICAgICAgICAgbWl4cGFuZWwucGVvcGxlLnNldCgnJGZpcnN0X25hbWUnLCBzdW1tb25lci5uYW1lKVxuXG4gICAgICAgICAgc2VuZCgnYXBpOmdhbWUnLCBzdW1tb25lciwgKGVyciwgZ2FtZSkgPT4ge1xuICAgICAgICAgICAgaWYgKGVycikgcmV0dXJuIHNlbmQoJ2FwcDplcnJvcicsIHsgZXJyIH0sIGRvbmUpXG5cbiAgICAgICAgICAgIHNlbmQoJ2dhbWU6c2V0JywgZ2FtZSwgKCkgPT4ge1xuICAgICAgICAgICAgICBzZW5kKCdhcHA6Y2xlYXInLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgbWl4cGFuZWwucGVvcGxlLmluY3JlbWVudCgnZ2FtZXNQbGF5ZWQnKVxuICAgICAgICAgICAgICAgIG1peHBhbmVsLnBlb3BsZS51bmlvbignZ2FtZXNJZCcsIGdhbWUuZ2FtZUlkKVxuICAgICAgICAgICAgICAgIG1peHBhbmVsLnRyYWNrKCdnYW1lOmluaXQnLCB7IGdhbWVJZDogZ2FtZS5nYW1lSWQgfSlcblxuICAgICAgICAgICAgICAgIHNlbmQoJ2xvY2F0aW9uOnNldExvY2F0aW9uJywgeyBsb2NhdGlvbjogJy9pbmdhbWUnIH0sIGRvbmUpXG4gICAgICAgICAgICAgICAgaGlzdG9yeS5wdXNoU3RhdGUoe30sIG51bGwsICcvaW5nYW1lJylcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfSxcbiAgICBjb29sZG93bjogKHNwZWxsLCBzdGF0ZSwgc2VuZCwgZG9uZSkgPT4ge1xuICAgICAgaWYgKCdjb29sZG93bicgIT09IHNwZWxsLnN0YXRlKSB7XG4gICAgICAgIG51bUNvb2xkb3ducysrXG4gICAgICAgIHNlbmQoJ2dhbWU6c3RhcnRDb29sZG93bicsIHNwZWxsLnVpZCwgZG9uZSlcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBzZW5kKCdnYW1lOmRlY3JlbWVudENvb2xkb3duJywgeyB1aWQ6IHNwZWxsLnVpZCwgYW1vdW50OiAxMCB9LCBkb25lKVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgcmVkdWNlcnM6IHtcbiAgICBzZXQ6IChnYW1lLCBzdGF0ZSkgPT4gZ2FtZSxcbiAgICBzdGFydENvb2xkb3duOiAodWlkLCBzdGF0ZSkgPT4gKHtcbiAgICAgIGVubmVtaWVzOiBzdGF0ZS5lbm5lbWllcy5tYXAoZW5uZW15ID0+IHh0ZW5kKGVubmVteSwge1xuICAgICAgICBzcGVsbHM6IGVubmVteS5zcGVsbHMubWFwKHNwZWxsID0+IHtcbiAgICAgICAgICBpZiAoc3BlbGwudWlkID09PSB1aWQpIHtcbiAgICAgICAgICAgIG1peHBhbmVsLnRyYWNrKCdnYW1lOmNvb2xkb3duOnN0YXJ0Jywge1xuICAgICAgICAgICAgICBnYW1lSWQ6IHN0YXRlLmdhbWVJZCxcbiAgICAgICAgICAgICAgc3BlbGw6IHNwZWxsLmlkXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICByZXR1cm4geHRlbmQoe30sIHNwZWxsLCB7XG4gICAgICAgICAgICAgIHN0YXRlOiAnY29vbGRvd24nLFxuICAgICAgICAgICAgICBjb29sZG93bjogc3BlbGwucmVmQ29vbGRvd24gLSAxXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBzcGVsbFxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH0pKVxuICAgIH0pLFxuICAgIGRlY3JlbWVudENvb2xkb3duOiAoZGF0YSwgc3RhdGUpID0+ICh7XG4gICAgICBlbm5lbWllczogc3RhdGUuZW5uZW1pZXMubWFwKGVubmVteSA9PiB4dGVuZChlbm5lbXksIHtcbiAgICAgICAgc3BlbGxzOiBlbm5lbXkuc3BlbGxzLm1hcChzcGVsbCA9PiB7XG4gICAgICAgICAgaWYgKCdjb29sZG93bicgIT09IHNwZWxsLnN0YXRlKSByZXR1cm4gc3BlbGxcbiAgICAgICAgICBpZiAoZGF0YS51aWQgJiYgc3BlbGwudWlkICE9PSBkYXRhLnVpZCkgcmV0dXJuIHNwZWxsXG5cbiAgICAgICAgICBpZiAoZGF0YS5hbW91bnQgPiAxKSB7XG4gICAgICAgICAgICBtaXhwYW5lbC50cmFjaygnZ2FtZTpjb29sZG93bjpkZWNyZW1lbnQnLCB7XG4gICAgICAgICAgICAgIGdhbWVJZDogc3RhdGUuZ2FtZUlkLFxuICAgICAgICAgICAgICBzcGVsbDogc3BlbGwuaWRcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgbmV3U3BlbGwgPSB4dGVuZCh7fSwgc3BlbGwsIHtcbiAgICAgICAgICAgIGNvb2xkb3duOiBzcGVsbC5jb29sZG93biAtIGRhdGEuYW1vdW50XG4gICAgICAgICAgfSlcblxuICAgICAgICAgIGlmIChuZXdTcGVsbC5jb29sZG93biA8PSAwKSB7XG4gICAgICAgICAgICBuZXdTcGVsbC5jb29sZG93biA9IDBcbiAgICAgICAgICAgIG5ld1NwZWxsLnN0YXRlID0gJ2F2YWlsYWJsZSdcbiAgICAgICAgICAgIG51bUNvb2xkb3ducy0tXG5cbiAgICAgICAgICAgIHNwZWxsQXVkaW8ucGxheSgpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIG5ld1NwZWxsXG4gICAgICAgIH0pXG4gICAgICB9KSlcbiAgICB9KSxcbiAgICB0b2dnbGVGb2N1czogKGRhdGEsIHN0YXRlKSA9PiAoe1xuICAgICAgZW5uZW1pZXM6IHN0YXRlLmVubmVtaWVzLm1hcChlbm5lbXkgPT4ge1xuICAgICAgICBpZiAoZW5uZW15Lm5hbWUgPT09IGRhdGEubmFtZSkge1xuICAgICAgICAgIGNvbnN0IGZvY3VzZWQgPSAhZW5uZW15LmZvY3VzZWRcbiAgICAgICAgICBtaXhwYW5lbC50cmFjaygnZ2FtZTpmb2N1cycsIHtcbiAgICAgICAgICAgIGdhbWVJZDogc3RhdGUuZ2FtZUlkLFxuICAgICAgICAgICAgZm9jdXNlZFxuICAgICAgICAgIH0pXG5cbiAgICAgICAgICByZXR1cm4geHRlbmQoe30sIGVubmVteSwgeyBmb2N1c2VkIH0pXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGVubmVteVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0pXG4gIH0sXG4gIHN1YnNjcmlwdGlvbnM6IHtcbiAgICB0aWNrOiAoc2VuZCwgZG9uZSkgPT4ge1xuICAgICAgc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICBpZiAoMCAhPT0gbnVtQ29vbGRvd25zKSB7XG4gICAgICAgICAgc2VuZCgnZ2FtZTpkZWNyZW1lbnRDb29sZG93bicsIHsgYW1vdW50OiAxIH0sIGRvbmUpXG4gICAgICAgIH1cbiAgICAgIH0sIDEwMDApXG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgaHRtbCBmcm9tICdjaG9vL2h0bWwnXG5pbXBvcnQgZW5uZW15TGlzdCBmcm9tICd+L3ZpZXdzL2VubmVteS1saXN0J1xuXG5leHBvcnQgZGVmYXVsdCAoc3RhdGUsIHByZXYsIHNlbmQpID0+IGh0bWxgXG4gIDxtYWluIGNsYXNzPVwiaW5nYW1lLXBhZ2VcIj5cbiAgICAke2VubmVteUxpc3Qoc3RhdGUuZ2FtZSwgcHJldiwgc2VuZCl9XG4gIDwvbWFpbj5cbmBcbiIsImltcG9ydCBodG1sIGZyb20gJ2Nob28vaHRtbCdcbmltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnXG5pbXBvcnQgcmVuZGVySWYgZnJvbSAnfi9saWIvcmVuZGVyLWlmJ1xuXG5jb25zdCByZWdpb25zID0gW1xuICAnQlInLCAnRVVORScsICdFVVcnLCAnSlAnLCAnS1InLCAnTEFOJywgJ0xBUycsICdOQScsICdPQ0UnLCAnUEJFJywgJ1JVJywgJ1RSJ1xuXVxuXG5jb25zdCBoYW5kbGVTdWJtaXQgPSAoZSwgc3RhdGUsIHNlbmQpID0+IHtcbiAgZS5wcmV2ZW50RGVmYXVsdCgpXG5cbiAgaWYgKHN0YXRlLmFwcC5zdW1tb25lcikge1xuICAgIHNlbmQoJ2dhbWU6ZmV0Y2gnLCBzdGF0ZS5hcHAuc3VtbW9uZXIpXG4gIH1cbiAgZWxzZSB7XG4gICAgc2VuZCgnYXBwOmVycm9yJywgeyBlcnI6IG5ldyBFcnJvcignRW1wdHkgc3VtbW9uZXIgbmFtZScpIH0pXG4gIH1cbn1cblxuY29uc3QgaGFuZGxlSW5wdXQgPSAoZSwgc3RhdGUsIHNlbmQpID0+IHtcbiAgc2VuZCgnYXBwOnN1bW1vbmVyJywgZS50YXJnZXQudmFsdWUpXG59XG5cbmNvbnN0IGhhbmRsZUNoYW5nZSA9IChlLCBzdGF0ZSwgc2VuZCkgPT4ge1xuICBzZW5kKCdhcHA6cmVnaW9uJywgZS50YXJnZXQudmFsdWUpXG59XG5cbmNvbnN0IGNsYXNzVmFyaWFudHMgPSAoc3RhdGUpID0+IGNsYXNzbmFtZXMoe1xuICBbYC1sb2FkaW5nYF06IHN0YXRlLmFwcC5sb2FkaW5nXG59KVxuXG5jb25zdCByZW5kZXJSZWdpb24gPSAocmVnaW9uLCBzdGF0ZSkgPT4gaHRtbGBcbiAgPG9wdGlvbiAke3JlZ2lvbiA9PT0gc3RhdGUuYXBwLnJlZ2lvbiA/ICdzZWxlY3RlZCcgOiAnJ30+JHtyZWdpb259PC9vcHRpb24+XG5gXG5cbmNvbnN0IHJlbmRlckVycm9yID0gKGVycm9yKSA9PiBodG1sYFxuICA8ZGl2IGNsYXNzPVwiZXJyb3ItcGFuZVwiPiR7ZXJyb3J9PC9kaXY+XG5gXG5cbmV4cG9ydCBkZWZhdWx0IChzdGF0ZSwgcHJldiwgc2VuZCkgPT4gaHRtbGBcbiAgPG1haW4gY2xhc3M9XCJ3ZWxjb21lLXBhZ2VcIj5cbiAgICA8ZGl2IGNsYXNzPVwid2VsY29tZS1oZWFkZXJcIj5cbiAgICAgIDxzdmcgY2xhc3M9XCJsb2dvXCIgd2lkdGg9XCI5NnB4XCIgaGVpZ2h0PVwiMTQxcHhcIj5cbiAgICAgICAgPHVzZSB4bGluazpocmVmPVwiI2ljb24tbG9nb1wiPlxuICAgICAgPC9zdmc+XG4gICAgICA8aDEgY2xhc3M9XCJ0aXRsZVwiPm5vZmxhc2g8L2gxPlxuICAgIDwvZGl2PlxuICAgIDxmb3JtIGNsYXNzPVwid2VsY29tZS1mb3JtICR7Y2xhc3NWYXJpYW50cyhzdGF0ZSl9XCJcbiAgICAgIG9uc3VibWl0PSR7ZSA9PiBoYW5kbGVTdWJtaXQoZSwgc3RhdGUsIHNlbmQpfX0+XG4gICAgICA8ZmllbGRzZXQgY2xhc3M9XCJmaWVsZHNldFwiPlxuICAgICAgICA8aW5wdXRcbiAgICAgICAgICBjbGFzcz1cImlucHV0XCJcbiAgICAgICAgICB2YWx1ZT0ke3N0YXRlLmFwcC5zdW1tb25lcn1cbiAgICAgICAgICBwbGFjZWhvbGRlcj1cIlN1bW1vbmVyIG5hbWVcIlxuICAgICAgICAgICR7c3RhdGUuYXBwLmxvYWRpbmcgPyAnZGlzYWJsZWQnIDogJyd9XG4gICAgICAgICAgb25pbnB1dD0ke2UgPT4gaGFuZGxlSW5wdXQoZSwgc3RhdGUsIHNlbmQpfSAvPlxuICAgICAgICA8c2VsZWN0IGNsYXNzPVwicmVnaW9uc1wiIG9uY2hhbmdlPSR7ZSA9PiBoYW5kbGVDaGFuZ2UoZSwgc3RhdGUsIHNlbmQpfT5cbiAgICAgICAgICAke3JlZ2lvbnMubWFwKHJlZ2lvbiA9PiByZW5kZXJSZWdpb24ocmVnaW9uLCBzdGF0ZSkpfVxuICAgICAgICA8L3NlbGVjdD5cbiAgICAgIDwvZmllbGRzZXQ+XG4gICAgICA8YnV0dG9uIGNsYXNzPVwic3VibWl0XCI+U3RhcnQ8L2J1dHRvbj5cbiAgICA8L2Zvcm0+XG4gICAgJHtyZW5kZXJJZihzdGF0ZS5hcHAuZXJyb3IsIHN0YXRlLmFwcC5lcnJvciwgcmVuZGVyRXJyb3IpfVxuICA8L21haW4+XG5gXG4iLCJpbXBvcnQgaHRtbCBmcm9tICdjaG9vL2h0bWwnXG5pbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJ1xuaW1wb3J0IGNsb3Nlc3QgZnJvbSAnY2xvc2VzdCdcbmltcG9ydCBzcGVsbExpc3QgZnJvbSAnLi9zcGVsbC1saXN0J1xuXG5jb25zdCBoYW5kbGVDbGljayA9IChlLCBlbm5lbXksIHNlbmQpID0+IHtcbiAgaWYgKG51bGwgPT0gY2xvc2VzdChlLnRhcmdldCwgJy5zcGVsbC1pdGVtJywgdHJ1ZSkpIHtcbiAgICBzZW5kKCdnYW1lOnRvZ2dsZUZvY3VzJywgZW5uZW15KVxuICB9XG59XG5cbmNvbnN0IGNsYXNzVmFyaWFudHMgPSAoZW5uZW15KSA9PiBjbGFzc25hbWVzKHtcbiAgW2AtZm9jdXNlZGBdOiBlbm5lbXkuZm9jdXNlZFxufSlcblxuZXhwb3J0IGRlZmF1bHQgKGVubmVteSwgcHJldiwgc2VuZCkgPT4gaHRtbGBcbiAgPGxpIGNsYXNzPVwiZW5uZW15LWl0ZW0gJHtjbGFzc1ZhcmlhbnRzKGVubmVteSl9XCJcbiAgICBvbmNsaWNrPSR7ZSA9PiBoYW5kbGVDbGljayhlLCBlbm5lbXksIHNlbmQpfT5cbiAgICA8ZGl2IGNsYXNzPVwiZW5uZW15LW1ldGFcIj5cbiAgICAgIDxoMiBjbGFzcz1cImNoYW1waW9uXCI+JHtlbm5lbXkuY2hhbXBpb24ubmFtZX08L2gyPlxuICAgIDwvZGl2PlxuICAgICR7c3BlbGxMaXN0KGVubmVteSwgcHJldiwgc2VuZCl9XG4gIDwvbGk+XG5gXG4iLCJpbXBvcnQgaHRtbCBmcm9tICdjaG9vL2h0bWwnXG5pbXBvcnQgY2xvc2VzdCBmcm9tICdjbG9zZXN0J1xuaW1wb3J0IGVubmVteUl0ZW0gZnJvbSAnLi9lbm5lbXktaXRlbSdcblxubGV0IGRyYWdJbmZvXG5cbmNvbnN0IGluZGV4T2YgPSAoZWwpID0+IEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoXG4gIGVsLnBhcmVudE5vZGUuY2hpbGROb2RlcywgZWwpXG5cbmNvbnN0IGhhbmRsZURyYWdTdGFydCA9IChlKSA9PiB7XG4gIGNvbnN0IGxpc3QgPSBjbG9zZXN0KGUudGFyZ2V0LCAnLmVubmVteS1saXN0JylcbiAgbGlzdC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBoYW5kbGVEcmFnTW92ZSlcbiAgbGlzdC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgaGFuZGxlRHJhZ0VuZClcblxuICBjb25zdCBsaXN0SXRlbSA9IGNsb3Nlc3QoZS50YXJnZXQsICcuZW5uZW15LWl0ZW0nLCB0cnVlKVxuXG4gIGRyYWdJbmZvID0ge1xuICAgIGRyYWdnaW5nOiBmYWxzZSxcbiAgICBzdGFydDogZS5jbGllbnRZLFxuICAgIGluZGV4OiBpbmRleE9mKGxpc3RJdGVtKSxcbiAgICBsaXN0LFxuICAgIGxpc3RJdGVtXG4gIH1cbn1cblxuY29uc3QgaGFuZGxlRHJhZ01vdmUgPSAoZSkgPT4ge1xuICBjb25zdCB7IGxpc3QsIGxpc3RJdGVtIH0gPSBkcmFnSW5mb1xuXG4gIGlmICghZHJhZ0luZm8uZHJhZ2dpbmcgJiYgTWF0aC5hYnMoZS5jbGllbnRZIC0gZHJhZ0luZm8uc3RhcnQpID4gMTApIHtcbiAgICBsaXN0SXRlbS5jbGFzc0xpc3QuYWRkKCctZHJhZ2dpbmcnKVxuICAgIGRyYWdJbmZvLmRyYWdnaW5nID0gdHJ1ZVxuICB9XG5cbiAgaWYgKGRyYWdJbmZvLmRyYWdnaW5nKSB7XG4gICAgY29uc3QgaG92ZXJFbCA9IGRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQoZS5jbGllbnRYLCBlLmNsaWVudFkpXG4gICAgY29uc3QgaG92ZXJJdGVtID0gY2xvc2VzdChlLnRhcmdldCwgJy5lbm5lbXktaXRlbScsIHRydWUpXG5cbiAgICBpZiAobnVsbCAhPSBob3Zlckl0ZW0pIHtcbiAgICAgIGNvbnN0IGRlc3RJbmRleCA9IGluZGV4T2YoaG92ZXJJdGVtKVxuICAgICAgY29uc3QgZGVzdEl0ZW0gPSBob3Zlckl0ZW0ubmV4dEVsZW1lbnRTaWJsaW5nXG5cbiAgICAgIGlmIChkZXN0SW5kZXggIT09IGRyYWdJbmZvLmluZGV4KSB7XG4gICAgICAgIGxpc3QuaW5zZXJ0QmVmb3JlKGxpc3RJdGVtLCBkZXN0SXRlbSlcbiAgICAgICAgZHJhZ0luZm8uaW5kZXggPSBkZXN0SW5kZXhcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuY29uc3QgaGFuZGxlRHJhZ0VuZCA9IChlKSA9PiB7XG4gIGNvbnN0IHsgbGlzdCwgbGlzdEl0ZW0gfSA9IGRyYWdJbmZvXG5cbiAgbGlzdEl0ZW0uY2xhc3NMaXN0LnJlbW92ZSgnLWRyYWdnaW5nJylcbiAgbGlzdEl0ZW0uc3R5bGUudHJhbnNmb3JtID0gJydcblxuICBsaXN0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGhhbmRsZURyYWdNb3ZlKVxuICBsaXN0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBoYW5kbGVEcmFnRW5kKVxufVxuXG5leHBvcnQgZGVmYXVsdCAoZ2FtZSwgcHJldiwgc2VuZCkgPT4gaHRtbGBcbiAgPHVsIGNsYXNzPVwiZW5uZW15LWxpc3RcIj5cbiAgICAke2dhbWUuZW5uZW1pZXMubWFwKGVubmVteSA9PiBlbm5lbXlJdGVtKGVubmVteSwgcHJldiwgc2VuZCkpfVxuICA8L3VsPlxuYFxuIiwiaW1wb3J0IGh0bWwgZnJvbSAnY2hvby9odG1sJ1xuaW1wb3J0IGNsYXNzbmFtZXMgZnJvbSAnY2xhc3NuYW1lcydcbmltcG9ydCByZW5kZXJJZiBmcm9tICd+L2xpYi9yZW5kZXItaWYnXG5cbmNvbnN0IGhhbmRsZUNsaWNrID0gKGUsIHNwZWxsLCBzZW5kKSA9PiB7XG4gIHNlbmQoJ2dhbWU6Y29vbGRvd24nLCBzcGVsbClcbn1cblxuY29uc3QgY2xhc3NWYXJpYW50cyA9IChzcGVsbCkgPT4gY2xhc3NuYW1lcyh7XG4gIFtgLSR7c3BlbGwuaWR9YF06IHRydWUsXG4gIFtgLSR7c3BlbGwuc3RhdGV9YF06IHRydWUsXG4gIFtgLXRpbWU2MGBdOiBzcGVsbC5jb29sZG93biA8PSA2MCAmJiBzcGVsbC5jb29sZG93biA+IDMwLFxuICBbYC10aW1lMzBgXTogc3BlbGwuY29vbGRvd24gPD0gMzAgJiYgc3BlbGwuY29vbGRvd24gPiAwXG59KVxuXG5jb25zdCBkcmF3Q29vbGRvd25QaWUgPSAoc3BlbGwpID0+IHtcbiAgY29uc3QgciA9IDUwXG4gIGNvbnN0IHQgPSAxIC0gc3BlbGwuY29vbGRvd24gLyBzcGVsbC5yZWZDb29sZG93blxuICBjb25zdCBhID0gdCAqIE1hdGguUEkgKiAyXG4gIGNvbnN0IG0gPSBhID4gTWF0aC5QSSA/IDEgOiAwXG4gIGNvbnN0IHggPSBNYXRoLnNpbihhKSAqIHJcbiAgY29uc3QgeSA9IE1hdGguY29zKGEpICogLXJcblxuICByZXR1cm4gaHRtbGBcbiAgICA8ZyB0cmFuc2Zvcm09JHtgdHJhbnNsYXRlKCR7cn0sICR7cn0pYH1cbiAgICAgIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIlxuICAgICAgdmVjdG9yLWVmZmVjdD1cIm5vbi1zY2FsaW5nLXN0cm9rZVwiPlxuICAgICAgPGNpcmNsZSBjbGFzcz1cInByb2dyZXNzLWJnXCIgY3g9XCIwXCIgY3k9XCIwXCIgcj1cIjUwXCIgLz5cbiAgICAgIDxwYXRoIGNsYXNzPVwicHJvZ3Jlc3NcIiBkPSR7YE0gMCAkey1yfSBBICR7cn0gJHtyfSAxICR7bX0gMSAke3h9ICR7eX1gfT48L3BhdGg+XG4gICAgPC9nPlxuICBgXG59XG5cbmNvbnN0IHJlbmRlckNvb2xkb3duID0gKHNwZWxsKSA9PiBodG1sYFxuICA8c3ZnIGNsYXNzPVwiY29vbGRvd25cIlxuICAgIHZpZXdCb3g9XCItNSAtNSAxMTAgMTEwXCI+XG4gICAgJHtkcmF3Q29vbGRvd25QaWUoc3BlbGwpfVxuICA8L3N2Zz5cbmBcblxuZXhwb3J0IGRlZmF1bHQgKHNwZWxsLCBwcmV2LCBzZW5kKSA9PiBodG1sYFxuICA8bGlcbiAgICBjbGFzcz1cInNwZWxsLWl0ZW0gJHtjbGFzc1ZhcmlhbnRzKHNwZWxsKX1cIlxuICAgIG9uY2xpY2s9JHtlID0+IGhhbmRsZUNsaWNrKGUsIHNwZWxsLCBzZW5kKX0+XG4gICAgJHtyZW5kZXJJZignY29vbGRvd24nID09PSBzcGVsbC5zdGF0ZSwgc3BlbGwsIHJlbmRlckNvb2xkb3duKX1cbiAgICA8c3ZnIGNsYXNzPVwiaWNvblwiPlxuICAgICAgPHVzZSB4bGluazpocmVmPVwiI3N2Zy0ke3NwZWxsLmlkfVwiPlxuICAgIDwvc3ZnPlxuICA8L2xpPlxuYFxuIiwiaW1wb3J0IGh0bWwgZnJvbSAnY2hvby9odG1sJ1xuaW1wb3J0IHNwZWxsSXRlbSBmcm9tICcuL3NwZWxsLWl0ZW0nXG5cbmV4cG9ydCBkZWZhdWx0IChlbm5lbXksIHByZXYsIHNlbmQpID0+IGh0bWxgXG4gIDx1bCBjbGFzcz1cInNwZWxsLWxpc3RcIj5cbiAgICAke2VubmVteS5zcGVsbHMubWFwKHNwZWxsID0+IHNwZWxsSXRlbShzcGVsbCwgcHJldiwgc2VuZCkpfVxuICA8L3VsPlxuYFxuIl19
